<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF初体验——MoeCTF2022</title>
      <link href="/2022/08/26/moectf2022/"/>
      <url>/2022/08/26/moectf2022/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://baike.baidu.com/item/CTF/9548546?fr=aladdin">CTF</a>（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。已经成为全球范围网络安全圈流行的竞赛形式。——百度百科  </p></blockquote><p>如主办方所言，本次<a href="https://ctf.xidian.edu.cn/">MoeCTF2022</a>面向全国全体准大学生举办，题目难度不高且坡度平缓，0基础新生可以通过本次比赛对<strong>信息安全夺旗赛</strong>有一个基础且全面的认识。但由于我水平有限，仅对本次比赛的一小部分题目做部分赏析。  </p><h2 id="计算机技术基础"><a href="#计算机技术基础" class="headerlink" title="计算机技术基础"></a>计算机技术基础</h2><h3 id="run-me-25’"><a href="#run-me-25’" class="headerlink" title="run me (25’)"></a>run me (25’)</h3><p>下载得runme.exe文件，双击打开闪退。将文件拖入cmd回车运行得Flag。<br><img src="https://s2.loli.net/2022/08/31/LbtoWpMjxCUDTPg.png" alt="runme.png"></p><h3 id="CCCCC-25’"><a href="#CCCCC-25’" class="headerlink" title="CCCCC (25’)"></a>CCCCC (25’)</h3><p>下载得CCCCC.c文件，配置C语言环境运行得Flag。<br>笔者在此处选择了Dev-C++。</p><h3 id="Python-25’"><a href="#Python-25’" class="headerlink" title="Python (25’)"></a>Python (25’)</h3><p>同上，配置Python环境运行得Flag。<br>笔者选择了Python自带的IDE——IDLE，不过平时写脚本之类的还是更偏爱PyCharm。</p><h3 id="run-me-2-25’"><a href="#run-me-2-25’" class="headerlink" title="run me 2 (25’)"></a>run me 2 (25’)</h3><p>配置虚拟机安装Linux系统运行文件，我选择了VMware Station。<br>安装虚拟机费了我老大劲儿，参考了一下CSDN上的<a href="https://blog.csdn.net/qq_41689437/article/details/125367151">野生安装文档</a>。<br>联网安装图形化界面后运行程序得Flag。</p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h3 id="ABCDEFG-25’"><a href="#ABCDEFG-25’" class="headerlink" title="ABCDEFG~ (25’)"></a>ABCDEFG~ (25’)</h3><h3 id="小小凯撒-50’"><a href="#小小凯撒-50’" class="headerlink" title="小小凯撒 (50’)"></a>小小凯撒 (50’)</h3><h3 id="凯撒变异了-50’"><a href="#凯撒变异了-50’" class="headerlink" title="凯撒变异了 (50’)"></a>凯撒变异了 (50’)</h3><h3 id="Vigenere-100’"><a href="#Vigenere-100’" class="headerlink" title="Vigenere (100’)"></a>Vigenere (100’)</h3><h2 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h2><h3 id="密码学之入门指北-25’"><a href="#密码学之入门指北-25’" class="headerlink" title="密码学之入门指北 (25’)"></a>密码学之入门指北 (25’)</h3><h2 id="隐写等杂项"><a href="#隐写等杂项" class="headerlink" title="隐写等杂项"></a>隐写等杂项</h2><h3 id="Hide-and-seek-25’"><a href="#Hide-and-seek-25’" class="headerlink" title="Hide-and-seek (25’)"></a>Hide-and-seek (25’)</h3><h3 id="Misc杂项之入门指北-25’"><a href="#Misc杂项之入门指北-25’" class="headerlink" title="Misc杂项之入门指北 (25’)"></a>Misc杂项之入门指北 (25’)</h3><h3 id="Rabbit-50’"><a href="#Rabbit-50’" class="headerlink" title="Rabbit (50’)"></a>Rabbit (50’)</h3><h3 id="小纸条-50’"><a href="#小纸条-50’" class="headerlink" title="小纸条 (50’)"></a>小纸条 (50’)</h3><h3 id="寻找黑客的家-50’"><a href="#寻找黑客的家-50’" class="headerlink" title="寻找黑客的家 (50’)"></a>寻找黑客的家 (50’)</h3><h3 id="Locked-bass-50’"><a href="#Locked-bass-50’" class="headerlink" title="Locked bass (50’)"></a>Locked bass (50’)</h3><h3 id="Nyanyanya-100’"><a href="#Nyanyanya-100’" class="headerlink" title="Nyanyanya! (100’)"></a>Nyanyanya! (100’)</h3><h3 id="What-do-you-recognize-me-by-100’"><a href="#What-do-you-recognize-me-by-100’" class="headerlink" title="What do you recognize me by? (100’)"></a>What do you recognize me by? (100’)</h3><h3 id="A-band-100’"><a href="#A-band-100’" class="headerlink" title="A band (100’)"></a>A band (100’)</h3><h3 id="想听点啥？-200’"><a href="#想听点啥？-200’" class="headerlink" title="想听点啥？ (200’)"></a>想听点啥？ (200’)</h3><p>文件内容：<br>whatdoyouliketohear.zip<br>|–whatdoyouliketohear.mp3<br>|–whatdoyouliketohear.mscz<br>|– mister.7z<br>&amp;#8194;|– flag.txt<br>&amp;#8194;|– qaq.py<br>这是本次CTF为数不多的一道音频隐写题。我本以为这题和图片隐写差不多，因为音频也可以采取LSB等隐写方式，甚至可以把信息藏入频谱图。然而我还是小了，在一遍又一遍地欣赏了MP3文件里的美妙阴乐后，方才意识到附带的.mscz文件可能有玄机。面向搜索引擎发现这是个乐谱文件，使用<a href="https://musescore.org/zh-hans">MuseScore</a>打开后，我不得不佩服出题人的艺术创作能力。<br><font size=6><strong>未成年人请在大人陪同下观看</strong></font><br><img src="https://s2.loli.net/2022/09/01/whx9vOtEBGpjkzl.png" alt="抽象的艺术.png"><br>抽象的艺术。<br>原谅我不懂欣赏，但至少拿到压缩包密码了不是吗？<br>然而，在经历了几十遍尝试后，我放弃了。因为我不理解这个圈是大写字母O还是数字0，这条线是大写字母I还是小写字母l（最后友人试出密码证明它是数字1）。<br>抽象，太抽象了。<br>更抽象的是这个名为Flag实际又不是Flag的文本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">,6+,C]:2Al2BR\B</span><br></pre></td></tr></table></figure><p>打开py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this is not flag, but real flag will be encrypted in same algorithm.</span></span><br><span class="line">flag = <span class="string">&#x27;moectf&#123;xxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">src: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([<span class="built_in">ord</span>(src[i]) ^ <span class="built_in">ord</span>(src[i-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(src))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    out.write(encrypt(flag))</span><br></pre></td></tr></table></figure><p>仔细阅读代码，发现是“已知加密算法与密文求明文”的套路。研究加密算法，encrypt函数输入string类型src形参，输出bytes类型。return后跟的括号有点多，外层是bytes([])，即将一个列表转化为字节串。内层是字符串遍历，从第二位开始，src的每一位字符的ASCII码与其前一位字符的ASCII码做按位异或运算。最后调用函数，传入实参flag，将密文写入flag.txt。<br>异或运算可逆，可以采取a^b^b&#x3D;a的方式得出答案（貌似）。但是本题计算量不大<del>懒得研究逻辑</del>，我决定采用爆破的方式。<br>代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">target = <span class="built_in">bytes</span>(f1.read(), encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">testflag = <span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">28</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        testflag[i] = <span class="built_in">chr</span>(k)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ord</span>(testflag[i]) ^ <span class="built_in">ord</span>(testflag[i-<span class="number">1</span>])) == target[i-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(testflag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>易得flag.txt文本内容长度为28，与上文flag字符串的长度差一，刚好是两两按位异或后的结果长度.除去前面的”moectf{“和末尾的”}”，得出爆破范围为7~28。采用ASCII可显示字符逐位尝试，与前一位进行加密运算后和target对应位的值进行比较，如此反复后得出Flag。<br>需要注意的是字符串与字节串的转换。</p><h2 id="Web审计与渗透测试"><a href="#Web审计与渗透测试" class="headerlink" title="Web审计与渗透测试"></a>Web审计与渗透测试</h2><h3 id="ezhtml-25’"><a href="#ezhtml-25’" class="headerlink" title="ezhtml (25’)"></a>ezhtml (25’)</h3><h3 id="web安全之入门指北-25’"><a href="#web安全之入门指北-25’" class="headerlink" title="web安全之入门指北 (25’)"></a>web安全之入门指北 (25’)</h3><h3 id="God-of-Aim-50’"><a href="#God-of-Aim-50’" class="headerlink" title="God_of_Aim (50’)"></a>God_of_Aim (50’)</h3><h2 id="二进制漏洞审计"><a href="#二进制漏洞审计" class="headerlink" title="二进制漏洞审计"></a>二进制漏洞审计</h2><h3 id="二进制漏洞审计之入门指北-25’"><a href="#二进制漏洞审计之入门指北-25’" class="headerlink" title="二进制漏洞审计之入门指北 (25’)"></a>二进制漏洞审计之入门指北 (25’)</h3><h2 id="软件逆向工程"><a href="#软件逆向工程" class="headerlink" title="软件逆向工程"></a>软件逆向工程</h2><h3 id="check-in-25’"><a href="#check-in-25’" class="headerlink" title="check in (25’)"></a>check in (25’)</h3><h3 id="Hex-25’"><a href="#Hex-25’" class="headerlink" title="Hex (25’)"></a>Hex (25’)</h3><h3 id="逆向工程之入门指北-25’"><a href="#逆向工程之入门指北-25’" class="headerlink" title="逆向工程之入门指北 (25’)"></a>逆向工程之入门指北 (25’)</h3><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>截至2022&#x2F;8&#x2F;26&#x2F;19:00，笔者共在本次比赛中获得1050分，排名73位。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Misc </tag>
            
            <tag> Web </tag>
            
            <tag> Reverse </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comment_tips</title>
      <link href="/2022/08/11/Comment-tips/"/>
      <url>/2022/08/11/Comment-tips/</url>
      
        <content type="html"><![CDATA[<p><font size=6><strong>评论者必读事项！</strong></font></p><p>首先感谢你到<a href="https://ch3cooh12138.github.io/">Cabelis’s lab</a>参观。这是一个<del>做着玩的</del>个人博客，用于记录一些学习经验及感想等。  </p><h2 id="评论前奏"><a href="#评论前奏" class="headerlink" title="评论前奏"></a>评论前奏</h2><p>本网站评论系统采用<a href="https://github.com/gitalk/gitalk">Gitalk</a>插件以及<a href="https://waline.js.org/">Waline</a>插件。你可以使用评论框右上角的转换按钮进行转换。<br>两个评论插件的评论彼此独立。他们都支持Markdown语法。<br>以下是关于两个评论插件的介绍，请仔细阅读。</p><h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h3><p>要使用Gitalk进行评论，首先你得先有一个<a href="https://github.com/">Github</a>账号。由于Gitalk的某些 <del>Bug</del> <strong>神奇特性</strong>，你需要找到一个<em>标题</em>为<strong>无空格的纯英文</strong>的post（比如本post标题为Comment_tips）下的Gitalk进行登录，否则你可能会跳转回<a href="https://ch3cooh12138.github.io/">首页</a>。<br>如此，你就可以成功登录Github并使用Gitalk插件进行评论。 </p><blockquote><p>Q.为什么Github登不上&#x2F;Gitalk加载很慢？<br>A.建议挂个梯子。</p></blockquote><h3 id="Waline"><a href="#Waline" class="headerlink" title="Waline"></a>Waline</h3><p>使用此插件进行评论不需要登录任何社交账号（当然也可以登录，我支持你这么做），但是需要填写评论时的昵称与邮箱（你当然可以乱填，匿名评论是你的权利）。Waline会通过邮箱地址自动获取你的头像作为评论头像。<br>无论你是否匿名评论，Waline都会自动获取你的IP地址、浏览器版本等信息。每个IP每分钟只能评论一次。<br>Waline的GIF功能（表情包功能）在国内不可用。如果你要插入表情包的话，请使用Markdown语法。  </p><h3 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h3><p>虽然你可以使用纯文本进行评论编辑，但是我还是建议你使用<a href="http://markdown.p2hp.com/">Markdown</a>。这是一个易学且易读的标记语言。通过使用Markdown，你可以写出<strong>粗体</strong>，<em>斜体</em>，<del>删除线</del>等特殊文字，对文字加上<a href="https://ch3cooh12138.github.io/">链接</a>。<br><code># you can even use it to code!</code><br>如果你要使用Markdown插入图片的话，建议你使用图床（e.g.<a href="https://sm.ms/">SM.MS</a>)。将图片上传至图床后复制链接，然后用特定格式插入图片。  </p><p>Markdown快速入门：<a href="https://www.markdowntutorial.com/">点我！</a>  </p><h2 id="评论守则"><a href="#评论守则" class="headerlink" title="评论守则"></a>评论守则</h2><blockquote><p>互联网不是法外之地。</p></blockquote><ul><li>请不要进行恶意评论，包括但不限于诅咒、人肉等。</li><li>请不要发布瑟琴、爆利等内容。</li><li>想到再加…</li></ul><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>本人是第一次做这类项目，如果做得不好敬请见谅。<br>如果你有任何建议，欢迎你<a href="mailto:1225610429@qq.com">发邮件给我</a>！<br>Cabelis祝你网上冲浪愉快。😉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/08/11/Hello%20World!/"/>
      <url>/2022/08/11/Hello%20World!/</url>
      
        <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>2022.8.10<br>属于是把一些基本内容搞好了。特别累今天。睡觉明天再写。  </p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>2022.8.11<br>加入了评论系统，具体参照Comment_tips。<br>还加了一些乱七八糟的东西。<br><em>（哈欠）</em>已经熬了两个大夜了，离左嘴角15mm的地方长了颗痘。<br>敷个面膜早点睡罢。  </p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>2022.8.12<br>今天在做丽泽八方的推文，没有碰这个网站。<br>又是很累的一天呢。</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>2022.8.13<br><del>新增levere评论系统，由于太慢&amp;太丑被弃用</del><br>新增waline评论系统，可匿名评论，目前后端未配置完成，明天再说。</p><h2 id="第N天"><a href="#第N天" class="headerlink" title="第N天"></a>第N天</h2><p>2022.8.?<br>评论系统已基本部署完成。  </p><h2 id="第N-1天"><a href="#第N-1天" class="headerlink" title="第N+1天"></a>第N+1天</h2><p>2022.8.?<br>准备“金中相册”项目的开发。</p><h2 id="此帖已停更。"><a href="#此帖已停更。" class="headerlink" title="此帖已停更。"></a>此帖已停更。</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
