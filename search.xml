<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HECTF 一些re和密码</title>
      <link href="/2022/11/08/hectf2022/"/>
      <url>/2022/11/08/hectf2022/</url>
      
        <content type="html"><![CDATA[<h2 id="re-author’sB0x">re: author’sB0x</h2><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">cry = [<span class="number">0xc3</span>,<span class="number">0xf5</span>,<span class="number">0xe5</span>,<span class="number">0xe2</span>,<span class="number">0xEC</span>,<span class="number">0x17</span>,<span class="number">0xE5</span>,<span class="number">0x2A</span>,<span class="number">0xCA</span>,<span class="number">0x3</span>,<span class="number">0xB6</span>,<span class="number">0xFD</span>,<span class="number">0xC1</span>,<span class="number">0xBC</span>,<span class="number">0x70</span>,<span class="number">0x44</span>,<span class="number">0x10</span>,<span class="number">0xCD</span>,<span class="number">0xA6</span>,<span class="number">0x13</span>,<span class="number">0x0B</span>,<span class="number">0x9A</span>,<span class="number">0x73</span>,<span class="number">0x6</span>,<span class="number">0x0E</span>,<span class="number">0x4D</span>,<span class="number">0xDE</span>,<span class="number">0x95</span>,<span class="number">0x12</span>,<span class="number">0x9C</span>,<span class="number">0xD9</span>,<span class="number">0x46</span>]</span><br><span class="line">key = <span class="string">&quot;thisiskey&quot;</span></span><br><span class="line">len1 = <span class="built_in">len</span>(cry)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">t = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">keystream = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    s[i] = i</span><br><span class="line">    t[i] = key[i%<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line">v1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v3 = (s[i] + v3 + <span class="built_in">ord</span>(t[i]))%<span class="number">256</span></span><br><span class="line">    v1 = s[i]</span><br><span class="line">    s[i] = s[v3]</span><br><span class="line">    s[v3] = v1</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    v2 = len1</span><br><span class="line">    len1 -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v2==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = (i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v6 = (v6+s[i])%<span class="number">256</span></span><br><span class="line">    v4 = s[i]</span><br><span class="line">    s[i] = s[v6]</span><br><span class="line">    s[v6] = v4</span><br><span class="line">    keystream[<span class="number">4</span>*v5] = s[(s[v6]+s[i])%<span class="number">256</span>]</span><br><span class="line">    v5 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">len1 = <span class="built_in">len</span>(cry)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1):</span><br><span class="line">    flag[i] = cry[i] ^ keystream[<span class="number">4</span>*i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手搓一遍就出来了。</p><h2 id="密码-ezrsa">密码:ezrsa</h2><p>原题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">t = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q * t</span><br><span class="line">p_=<span class="built_in">pow</span>(p,<span class="number">2</span>,n)</span><br><span class="line">q_=<span class="built_in">pow</span>(q,<span class="number">2</span>,n)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p_=&#x27;</span>,p_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q_=&#x27;</span>,q_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"><span class="comment">#p_= 10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line"><span class="comment">#q_= 24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line"><span class="comment">#c= 946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line"><span class="comment">#n= 1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个问题是<code>p_ = p^2 % n</code>。乍一看很难解，甚至好像和二次剩余有关，实际仔细分析一番得出p并不难。n由3个1024位质数相乘，为3072位。p^2则只有2048位，小于n，相当于没模。易通过<code>p = gmpy2.iroot(p_ , 2)[0]</code>得出p。q同理。</p><p>第二个问题是<code>n = p * q * t</code>，三元质数加密，没学过呀。<a href="https://blog.csdn.net/weixin_44159598/article/details/109563019">搜索一下</a>可知三元的欧拉函数和二元的格式相同，遂放心使用<code>phi = (p-1)*(q-1)*(t-1)</code>。</p><p>第三个问题是<code>gcd(e, phi) != 1</code>，所以没法直接逆元。这里可以先将e整除<code>GCD = gcd(e, phi)</code>得到新的e1后通过构造<code>d1 = gmpy2.invert(e1,phi)</code>后得出密钥，最后的密文要开GCD次根。<br>原理如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>e</mi><mn>1</mn></msub><mo>=</mo><mfrac><mi>e</mi><mi>g</mi></mfrac><mspace linebreak="newline"></mspace><mo>∵</mo><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mi>g</mi></msup><msup><mo stretchy="false">)</mo><mstyle displaystyle="false" scriptlevel="0"><mfrac><mi>e</mi><mi>g</mi></mfrac></mstyle></msup><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mi>g</mi></msup><msup><mo stretchy="false">)</mo><msub><mi>e</mi><msub><mrow></mrow><mn>1</mn></msub></msub></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><msup><mi>m</mi><mi>g</mi></msup><mo>=</mo><msup><mi>c</mi><msub><mi>d</mi><msub><mrow></mrow><mn>1</mn></msub></msub></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mspace linebreak="newline"></mspace><mtext>其中</mtext><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g = gcd(e,\phi(n)) \\e_1 = \frac e {g} \\\because m^e \equiv c\space(mod\space n) \\\therefore m^e \equiv (m^g)^{\tfrac e g} \equiv (m^g)^{e_{_ 1}} \equiv c\space(mod\space n) \\\therefore m^g = c^{d_{_ 1}}\space mod\space n \\\text{其中} d_1 = inverse(e_1,\phi(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1799em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9298em;"><span style="top:-3.4458em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1033em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2996em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.357em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1033em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2996em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.357em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord text"><span class="mord cjk_fallback">其中</span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></span></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p_= <span class="number">10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line">q_= <span class="number">24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line">c= <span class="number">946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line">n= <span class="number">1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843</span></span><br><span class="line">e=<span class="number">114</span></span><br><span class="line">p,f = gmpy2.iroot(p_,<span class="number">2</span>)</span><br><span class="line">q,f = gmpy2.iroot(q_,<span class="number">2</span>)</span><br><span class="line">t = n//(p*q)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(t-<span class="number">1</span>)</span><br><span class="line">GCD=gmpy2.gcd(e,phi)</span><br><span class="line">d1 = gmpy2.invert(e//GCD,phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c,d1,n)</span><br><span class="line">m,f = gmpy2.iroot(m1,GCD)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rever$e </tag>
            
            <tag> Crypt0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的动态网页爬虫——以PTA为例</title>
      <link href="/2022/11/08/py5-ptaspider/"/>
      <url>/2022/11/08/py5-ptaspider/</url>
      
        <content type="html"><![CDATA[<h2 id="项目源码">项目源码</h2><p><a href="https://github.com/CH3COOH12138/PTASpider">https://github.com/CH3COOH12138/PTASpider</a></p><p>项目结构：</p><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td><a href="http://main.py">main.py</a></td><td>主程序</td></tr><tr><td>pintia_cookies.txt</td><td>Cookie</td></tr><tr><td>requirement.txt</td><td>依赖</td></tr><tr><td>studata.xlsx</td><td>信息映射</td></tr><tr><td>urls.txt</td><td>爬取的网址</td></tr><tr><td><a href="http://readme.md">readme.md</a></td><td>注意事项</td></tr></tbody></table><h2 id="前情提要">前情提要</h2><p>某计导老师很喜欢按学期布置作业，66道布置完了又来98道，外加机考等不定期测试，有些卷✌️次次AK（请勿代入）。我们可以通过这项数据推测一个同学的计导学习进度以及是不是✌️。<br>但是PTA的排名界面只显示学号，记住整个院的学号和姓名的对应关系未免太费脑细胞，我们可以通过Python链接excel表格查询班级、学号、姓名等信息。<br>查完了顺便在PTA里读一下成分（无恶意）。</p><h2 id="预备工作">预备工作</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><h3 id="安装-Selenium-WebDriver">安装 Selenium WebDriver</h3><p>静态网页的爬取用requests库即可，然而PTA的排名页是动态的，数据不在源码中。<br>对于动态网页的爬取，这里采用的是Selenium测试工具。它支持所有主流的浏览器（包括 IE、Firefox、Safari、Opera和Chrome等）,可以使用它对浏览器进行各种各样的模拟操作，包括爬取一些网页内容。<br>不过，Selenium自己不带浏览器，它需要与第三方浏览器结合在一起才能使用。要使用它，需要<a href="https://www.selenium.dev/downloads/">下载</a>对应浏览器的WebDriver并放到Python的Scripts文件夹下。<br>Selenium基础入门：<a href="https://blog.csdn.net/benzhujie1245com/article/details/117089767">https://blog.csdn.net/benzhujie1245com/article/details/117089767</a></p><h2 id="读取数据映射">读取数据映射</h2><p>这里用到了<a href="https://www.cnblogs.com/caiya/p/16683639.html">pandas库来读取excel文件</a>。<br>项目文件的excel共有三张工作表，可以使用<code>file = pd.read_excel(path, sheet_name=sheets)</code>读取。<code>sheets</code>参数可以是字符串（工作表名称），数字（默认从0开始编号）或列表，但是如果传入列表的话传出也是列表，干脆用循环一张一张表读。</p><p>这里为了实现学号和姓名的双重关键字查找写了俩函数（每张工作表的最后一行用0填充来代表结尾）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">readexcelbyid</span>(<span class="params">stuid, sheets</span>):</span><br><span class="line">    info = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    file = pd.read_excel(path, sheet_name=sheets)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    data = file.iloc[index, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> data != <span class="number">0</span>: <span class="comment"># 表的最后一行用0填充，代表结尾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(data) == stuid: <span class="comment"># 找到</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                info[i] = file.iloc[index, i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        data = file.iloc[index, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readexcelbyname</span>(<span class="params">name, sheets</span>):</span><br><span class="line">    info = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    file = pd.read_excel(path, sheet_name=sheets)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    data = file.iloc[index, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">while</span> data != <span class="string">&#x27;0&#x27;</span>: <span class="comment"># 表的最后一行用0填充，代表结尾</span></span><br><span class="line">        <span class="keyword">if</span> data == name: <span class="comment"># 找到</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                info[i] = file.iloc[index, i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        data = file.iloc[index, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    str1 = <span class="built_in">input</span>(<span class="string">&quot;请输入学号或姓名：\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> str1[<span class="number">0</span>:<span class="number">3</span>] == <span class="string">&#x27;202&#x27;</span>: <span class="comment"># 输入前3位是&#x27;202&#x27;代表学号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 读3张表</span></span><br><span class="line">            info = readexcelbyid(str1, i)</span><br><span class="line">            <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 读3张表</span></span><br><span class="line">            info = readexcelbyname(str1, i)</span><br><span class="line">            <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>: <span class="comment"># 找到</span></span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查无此人&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="爬取PTA动态网页">爬取PTA动态网页</h2><h3 id="获取Cookie">获取Cookie</h3><p>第一次爬取之前需要手动登录账户以保存Cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getcookie</span>():</span><br><span class="line">    <span class="comment"># 填写完整url</span></span><br><span class="line">    url = <span class="string">r&#x27;&#x27;</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment"># 程序打开网页后50秒内 “手动登陆账户”</span></span><br><span class="line">    time.sleep(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pintia_cookies.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将cookies保存为json格式</span></span><br><span class="line">        f.write(json.dumps(driver.get_cookies()))</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬取网页">爬取网页</h3><p>弄好Cookie后我们就可以欢乐地爬了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ptaspider</span>(<span class="params">url, stuid</span>):</span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) <span class="comment"># 静默运行</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) <span class="comment"># 禁用gpu渲染</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--incognito&#x27;</span>) <span class="comment"># 无痕模式</span></span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>]) <span class="comment"># 禁止打印日志</span></span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line">    browser.implicitly_wait(<span class="number">10</span>) <span class="comment"># 隐式等待</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cookiepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cookies_list = json.load(f)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies_list:</span><br><span class="line">            browser.add_cookie(cookie) <span class="comment"># 加Cookie</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    data = browser.find_element(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;DataTable_1vh8W&#x27;</span>).text</span><br><span class="line">    scoreRe = re.<span class="built_in">compile</span>(<span class="string">&#x27;([0-9]+) &#x27;</span> + <span class="built_in">str</span>(stuid) + <span class="string">&#x27; ([0-9]+)&#x27;</span>)</span><br><span class="line">    score = scoreRe.findall(data)</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(score) == <span class="number">0</span>:</span><br><span class="line">        maxpage = browser.find_elements(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;pageItem_3P4fJ&#x27;</span>)[-<span class="number">2</span>].text</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(score) == <span class="number">0</span> <span class="keyword">and</span> page &lt; <span class="built_in">int</span>(maxpage):</span><br><span class="line">            browser.get(url + <span class="string">&#x27;?page=&#x27;</span> + <span class="built_in">str</span>(page)) <span class="comment"># 拼接url</span></span><br><span class="line">            data = browser.find_element(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;DataTable_1vh8W&#x27;</span>).text</span><br><span class="line">            score = scoreRe.findall(data)</span><br><span class="line">            page += <span class="number">1</span></span><br><span class="line">    browser.quit()</span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><p>这里有几个注意点：</p><ol><li>传入参数为 要爬取的网页（url）和 要匹配的学生学号（stuid）。</li><li>加Cookie前要先get一遍网页，不然不知道Cookie加哪。</li><li><code>data = browser.find_element(&quot;class name&quot;, 'DataTable_1vh8W').text</code>的意思是找一个class名称为’DataTable_1vh8W’（需自行调试）的元素，返回它的文本并保存到data里，以便后续正则分析。</li><li>正则表达式视具体情况而定，需自行调试。</li><li>最后的循环实现了逐页查找的功能。这个功能的实现有两个前提。一是获取到网页的最大页数（maxpage)，二是通过拼接url得出每页的访问网址。</li><li>最后返回的是一个列表，代表每个查找到的位置的对应正则匹配（单处匹配返回文本，多处匹配返回元组）。</li></ol><h3 id="通过正则表达式获取url列表">通过<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式</a>获取url列表</h3><p>我们只剩最后一步了：读取项目目录下的urls.txt文件并获取url列表。</p><p>默认的urls.txt写入文件的格式应为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example:https://www.example.com</span><br></pre></td></tr></table></figure><p>显然，我们可以通过<code>'(.+?):(.+)'</code>分别对每条数据的名称和网址进行匹配。需要注意的是<code>https://</code>里也有<code>:</code>，对名称的匹配应使用非贪婪模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">urlRe = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(.+?):(.+)&#x27;</span>)</span><br><span class="line">names = []</span><br><span class="line">urls = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(urlpath) <span class="keyword">as</span> f:</span><br><span class="line">    str2 = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    names.append(urlRe.findall(str2[i])[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    urls.append(urlRe.findall(str2[i])[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">    score = ptaspider(urls[i], info[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(score) != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + names[i] + <span class="string">&#x27;\n排名：&#x27;</span> + score[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;\n分数：&#x27;</span> + score[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + names[i] + <span class="string">&#x27;\n无此记录&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写在最后">写在最后</h2><p>挺烂的活。没写过静态爬虫就来写动态了，有点吃力。<br>之前学的正则有点忘了，复习了一下午。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一上计导期中考回顾</title>
      <link href="/2022/11/05/test20221105/"/>
      <url>/2022/11/05/test20221105/</url>
      
        <content type="html"><![CDATA[<p>单选题-2，原题如下：</p><blockquote><p>设有定义“int a=1, b=2, c=3, d=4, m=2, n=2;”, 则执行表达式“(m=a&gt;b)&amp;&amp;(n=c&gt;d)”后,n的值为()。<br>A. 1<br>B. 2<br>C. 3<br>D. 0</p><p>错误答案：D<br>错因：受到VB语言的影响，以及知识点的遗忘。</p></blockquote><h2 id="短路运算符">短路运算符</h2><p><strong>《C Primer Plus》曾经说过：“C保证逻辑表达式的求值顺序是从左往右。&amp;&amp;和||运算符都是序列点，所以程序在从一个运算对象执行到下一个运算对象之前，所有的副作用都会生效。而且，C 保证一旦发现某个元素让整个表达式无效，便立即停止求值。”</strong></p><p>意思是，对于<code>a &amp;&amp; (b-c)</code>这个逻辑表达式，如果a为False，则整体必定为False，不必再对<code>(b-c)</code>进行求值。<br>对于<code>a || (b-c)</code>亦然，如果a为True，整体必为True，不必理会<code>(b-c)</code>。</p><p>回到原题，<code>(m=a&gt;b)</code>计算得False，则整体必为False，后续<code>(n=c&gt;d)</code>不再参与计算。故n为原值，即<code>n=2</code>，选C。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 近期re刷题记录</title>
      <link href="/2022/11/03/ctf3/"/>
      <url>/2022/11/03/ctf3/</url>
      
        <content type="html"><![CDATA[<h2 id="Reverse">Reverse</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=919a59d6-f42f-498a-a095-544eac546273_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=919a59d6-f42f-498a-a095-544eac546273_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">v12 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v5 = <span class="string">&quot;1A2F943C4D8C5B6EA3C9BCAD7E&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    v2 = v5[j]</span><br><span class="line">    v3 = v5[j+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(v2)-<span class="number">48</span> &gt; <span class="number">9</span>: </span><br><span class="line">        v8 = <span class="built_in">ord</span>(v2)-<span class="number">55</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v8 = <span class="built_in">ord</span>(v2)</span><br><span class="line">    v4 = v8 &amp; <span class="number">0xf</span> <span class="comment">#v2转16进制</span></span><br><span class="line">    v51 = (<span class="built_in">ord</span>(v3) - <span class="number">55</span>) &amp; <span class="number">0xf</span> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(v3)-<span class="number">48</span>) &amp;<span class="number">0xff</span> &lt;=<span class="number">9</span>:</span><br><span class="line">        v51 = <span class="built_in">ord</span>(v3) &amp; <span class="number">0xf</span> <span class="comment"># v51 = v3转16进制</span></span><br><span class="line">    v12[j] = v51 | (<span class="number">16</span> * v4)</span><br><span class="line"></span><br><span class="line">v9 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">v9[<span class="number">0</span>] = <span class="number">15</span></span><br><span class="line">v9[<span class="number">1</span>] = -<span class="number">121</span></span><br><span class="line">v9[<span class="number">2</span>] = <span class="number">98</span></span><br><span class="line">v9[<span class="number">3</span>] = <span class="number">20</span></span><br><span class="line">v9[<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">v9[<span class="number">5</span>] = -<span class="number">58</span></span><br><span class="line">v9[<span class="number">6</span>] = -<span class="number">16</span></span><br><span class="line">v9[<span class="number">7</span>] = <span class="number">33</span></span><br><span class="line">v9[<span class="number">8</span>] = <span class="number">48</span></span><br><span class="line">v9[<span class="number">9</span>] = <span class="number">17</span></span><br><span class="line">v9[<span class="number">10</span>] = <span class="number">80</span></span><br><span class="line">v9[<span class="number">11</span>] = -<span class="number">48</span></span><br><span class="line">v9[<span class="number">12</span>] = -<span class="number">126</span></span><br><span class="line">v9[<span class="number">13</span>] = <span class="number">35</span></span><br><span class="line">v9[<span class="number">14</span>] = -<span class="number">82</span></span><br><span class="line">v9[<span class="number">15</span>] = <span class="number">35</span></span><br><span class="line">v9[<span class="number">16</span>] = -<span class="number">18</span></span><br><span class="line">v9[<span class="number">17</span>] = -<span class="number">87</span></span><br><span class="line">v9[<span class="number">18</span>] = -<span class="number">76</span></span><br><span class="line">v9[<span class="number">19</span>] = <span class="number">82</span></span><br><span class="line">v9[<span class="number">20</span>] = <span class="number">120</span></span><br><span class="line">v9[<span class="number">21</span>] = <span class="number">87</span></span><br><span class="line">v9[<span class="number">22</span>] = <span class="number">12</span></span><br><span class="line">v9[<span class="number">23</span>] = -<span class="number">122</span></span><br><span class="line">v9[<span class="number">24</span>] = -<span class="number">117</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>): <span class="comment"># 可以简化</span></span><br><span class="line">    <span class="keyword">if</span> v9[i]&gt;<span class="number">0</span>:</span><br><span class="line">        flag[i] = v9[i] ^ v12[i]</span><br><span class="line">    <span class="keyword">elif</span> v9[i]&lt;<span class="number">0</span> <span class="keyword">and</span> v12[i]&lt;<span class="number">128</span>:</span><br><span class="line">        flag[i] = ((v9[i]+<span class="number">128</span>)^v12[i])+<span class="number">2</span>**<span class="number">7</span></span><br><span class="line">    <span class="keyword">elif</span> v9[i]&lt;<span class="number">0</span> <span class="keyword">and</span> v12[i]&gt;<span class="number">128</span>:</span><br><span class="line">        flag[i] = (v9[i]+<span class="number">128</span>)^(v12[i]-<span class="number">2</span>**<span class="number">7</span>)</span><br><span class="line">    flag[i] = (flag[i]&gt;&gt;<span class="number">2</span>) + (flag[i]%<span class="number">4</span> &lt;&lt; <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考点是unsigned __int8和 signed __int8 在计算机中的存储方式，要考虑补码。</p><h2 id="666">666</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=b77f33bb-046b-4be9-8507-00dacd0358fc_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=b77f33bb-046b-4be9-8507-00dacd0358fc_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">v3 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>)]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">enflag = <span class="string">&#x27;izwhroz&quot;&quot;w&quot;v.K&quot;.Ni&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">key = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;key:</span><br><span class="line">    v3[i + <span class="number">64</span>] = <span class="built_in">ord</span>(enflag[i])</span><br><span class="line">    v3[i + <span class="number">33</span>] = <span class="built_in">ord</span>(enflag[i+<span class="number">1</span>])</span><br><span class="line">    v3[i + <span class="number">2</span>] = <span class="built_in">ord</span>(enflag[i+<span class="number">2</span>])</span><br><span class="line">    flag[i] = (key ^ v3[i + <span class="number">64</span>]) - <span class="number">6</span></span><br><span class="line">    flag[i+<span class="number">1</span>] = (key ^ v3[i + <span class="number">33</span>]) + <span class="number">6</span></span><br><span class="line">    flag[i+<span class="number">2</span>] = v3[i + <span class="number">2</span>] ^ <span class="number">6</span> ^ key</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流浪者">流浪者</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=703754e8-4aef-4976-af09-25d41ecdd37d_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=703754e8-4aef-4976-af09-25d41ecdd37d_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">abc = <span class="string">&quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;</span></span><br><span class="line">enflag = <span class="string">&quot;KanXueCTF2019JustForhappy&quot;</span></span><br><span class="line">str1 = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag))]</span><br><span class="line">flag1 = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag))]</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(abc)):</span><br><span class="line">        <span class="keyword">if</span> enflag[i] == abc[j]:</span><br><span class="line">            flag1[i] = j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>&lt;=flag1[i]&lt;=<span class="number">9</span>:</span><br><span class="line">        flag1[i] += <span class="number">48</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span>&lt;=flag1[i]&lt;=<span class="number">35</span>:</span><br><span class="line">        flag1[i] += <span class="number">87</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag1[i]+= <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag1[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Signin">Signin</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=b9b2c51c-a545-4d2f-ba34-a58d8d040115_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=b9b2c51c-a545-4d2f-ba34-a58d8d040115_2&amp;task_category_id=4</a></p><img src="https://s2.loli.net/2022/11/09/Mf1ykYNtAeih8Bx.png" width=80% /><p>一眼RSA。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rever$e </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 crypto爆破 hidden key</title>
      <link href="/2022/10/27/ctf2/"/>
      <url>/2022/10/27/ctf2/</url>
      
        <content type="html"><![CDATA[<p>原题地址：<a href="https://adworld.xctf.org.cn/challenges/details?hash=1a1149ba-3b29-11ed-abf3-fa163e4fa609&amp;task_category_id=5">https://adworld.xctf.org.cn/challenges/details?hash=1a1149ba-3b29-11ed-abf3-fa163e4fa609&amp;task_category_id=5</a></p><p>原题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">key=os.urandom(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line">m=[]</span><br><span class="line">random.seed(<span class="built_in">int</span>(hashlib.md5(key).hexdigest(), <span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    rand(<span class="number">256</span>)</span><br><span class="line">    xor=flag[i]^rand(<span class="number">256</span>)</span><br><span class="line">    m.append(xor)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key)&gt;&gt;<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [140, 96, 112, 178, 38, 180, 158, 240, 179, 202, 251, 138, 188, 185, 23, 67, 163, 22, 150, 18, 143, 212, 93, 87, 209, 139, 92, 252, 55, 137, 6, 231, 105, 12, 65, 59, 223, 25, 179, 101, 19, 215]</span></span><br><span class="line"><span class="comment"># 2669175714787937</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="题解">题解</h2><p>观察题目，发现byte_to_long后的key右移12位后得<code>2669175714787937</code>，即<code>0x97B99E652B261</code>，共13位数字，转二进制就是52位，<code>52+12 = 64 bits = 8 bytes</code>，与原题<code>key=os.urandom(8)</code>对应。而key的前52位我们已经知道了，只需要爆破后12位即可。</p><p>易得爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">m = [<span class="number">140</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">178</span>, <span class="number">38</span>, <span class="number">180</span>, <span class="number">158</span>, <span class="number">240</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">251</span>, <span class="number">138</span>, <span class="number">188</span>, <span class="number">185</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">163</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">18</span>, <span class="number">143</span>, <span class="number">212</span>, <span class="number">93</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">139</span>, <span class="number">92</span>, <span class="number">252</span>, <span class="number">55</span>, <span class="number">137</span>, <span class="number">6</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">59</span>, <span class="number">223</span>, <span class="number">25</span>, <span class="number">179</span>, <span class="number">101</span>, <span class="number">19</span>, <span class="number">215</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">    tmpkey = long_to_bytes((<span class="number">2669175714787937</span> &lt;&lt; <span class="number">12</span>) + j)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    random.seed(<span class="built_in">int</span>(hashlib.md5(tmpkey).hexdigest(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        rand(<span class="number">256</span>)</span><br><span class="line">        xor = m[i]^rand(<span class="number">256</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(xor)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;e319a58c-4dd6-4e6a-a3fb-f4b0d339faba&#125;</span></span><br></pre></td></tr></table></figure><p>这题的考点应该是计算机伪随机数的产生。鉴于题目中用到了较多产生随机数的函数，姑且对这些函数做个不完全的总结。欢迎各路大神在评论区补充。</p><h2 id="产生随机数">产生随机数</h2><p>众所周知，计算机不能产生真正的随机数。在实践中，大多数编程环境会提供一个<strong>伪随机数生成器</strong>，使得返回值在统计上看起来是随机的。这里不对随机算法进行深入研究，只需知道随机数是由一个名为“种子”的数推算而来。</p><h3 id="C的随机数产生">C的随机数产生</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一个简单的用于产生随机数的程序 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到，上面这个程序的核心代码是<code>rand()</code>。它可以随机的产生 0 ~ RAND_MAX 的随机数，RAND_MAX包含在头文件stdlib.h中，默认为32767。<br>所以我们可以使用<code>a = rand() % (n-m+1) + m;</code>来生成一个m ~ n的随机数。</p><p>然而，我们会发现，虽然函数返回值是无法预料的，但是无论运行多少次，这个函数的返回值都是固定的。其根本原因是没有初始化随机种子。种子在每次启动计算机时是随机的，但是一旦计算机启动以后它就不再变化了。也就是说，每次启动计算机以后，种子就是定值了，所以根据公式推算出来的结果（也就是生成的随机数）就是固定的。</p><p>以下代码可以帮助我们初始化随机种子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>)); <span class="comment">// # include &lt;stdlib.h&gt;  # include &lt;time.h&gt;</span></span><br></pre></td></tr></table></figure><p>原理是使用<code>time(NULL)</code>函数来获取系统时间（从1970年1月1日0点到现在时间的秒数），并转化为unsigned int，最后传给srand()函数作为种子。</p><h3 id="Python的随机数产生">Python的随机数产生</h3><h4 id="os-urandom-n">os.urandom(n)</h4><p>返回一个n字节的随机字符串，适用于加密等。</p><h4 id="random库">random库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><ol><li><p><code>random.seed(a)</code><br>设置初始化随机种子，可输出相同随机数序列；a取整数或浮点数，不设置时默认以系统时间为种子。</p></li><li><p><code>random.random()</code><br>用于生成一个0.0到1.0的随机数。</p></li><li><p><code>random.uniform(a, b)</code><br>生成一个[a, b]之间的随机浮点数（a、b取整数或浮点数）</p></li><li><p><code>random.randint(a, b)</code><br>生成一个[a, b]之间随机整数。</p></li><li><p><code>random.randrange(start, stop, \[step\])</code><br>生成一个[start, stop]之间以step步数的随机整数；start、stop、step取整数，step不设置时默认值为1。</p></li><li><p><code>random.choice(seq)</code><br>从序列类型seq中随机返回一个元素；seq取序列类型，如字符串、列表、元组。</p></li><li><p><code>random.shuffle(seq)</code><br>将序列类型中元素随机排序，无返回值，seq被改变（改变原序列），shuffle为洗牌之意；seq取序列类型，如字符串、列表；元组不能被洗牌。</p></li></ol><h2 id="运算符优先级">运算符优先级</h2><p>debug了一小时啊一小时，最后发现<code>tmpkey = long_to_bytes((2669175714787937 &lt;&lt; 12) + j)</code>这句左移运算符那里没加括号。<br>移位的本质不是乘除吗，为什么优先级比加减还要低？<br>（某乎上有人发了同样的问题）<br><img src="https://s2.loli.net/2022/10/31/58S1twRYoLNeZKv.png" width=80% /></p><p>贴个运算符优先级顺序表在这里以时刻提醒自己。</p><p>C:</p><table><thead><tr><th>优先级</th><th>运算符（们）</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>()　[]　-&gt;　.</td><td>括号/函数调用  索引  间接成员访问  成员访问</td></tr><tr><td>2</td><td>++　–　+　-　!　~　&amp;　*　sizeof　类型转换</td><td>自增（后缀大于前缀）  自减  正  负  非  按位非  取址  解引用  内存大小  类型转换</td></tr><tr><td>3</td><td>*　/　%</td><td>乘  除  模</td></tr><tr><td>4</td><td>+　-</td><td>加  减</td></tr><tr><td>5</td><td>&lt;&lt;　&gt;&gt;</td><td>左移位  右移位</td></tr><tr><td>6</td><td>&lt;　&lt;=　&gt;　&gt;=</td><td>小于  小于等于  大于  大于等于</td></tr><tr><td>7</td><td>==　!=</td><td>等于 不等于</td></tr><tr><td>8</td><td>&amp;</td><td>按位与</td></tr><tr><td>9</td><td>^</td><td>按位异或</td></tr><tr><td>10</td><td>|</td><td>按位或</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>12</td><td>||</td><td>逻辑或</td></tr><tr><td>13</td><td>?:</td><td>三目条件运算符</td></tr><tr><td>14</td><td>=　*=　/=　+=　-=　&lt;&lt;=　&gt;=　&amp;=　|=　^=</td><td>各种赋值运算符</td></tr><tr><td>15</td><td>,</td><td>逗号运算符</td></tr></tbody></table><p>Python:</p><table><thead><tr><th>优先级</th><th>运算符（们）</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>()　[]　.</td><td>括号/函数调用  索引  属性引用</td></tr><tr><td>2</td><td>**</td><td>幂</td></tr><tr><td>3</td><td>+　-　~</td><td>正  负  按位非</td></tr><tr><td>4</td><td>*　/　//　%</td><td>乘  除  整除  模</td></tr><tr><td>5</td><td>+　-</td><td>加  减</td></tr><tr><td>6</td><td>&lt;&lt;　&gt;&gt;</td><td>左移位  右移位</td></tr><tr><td>7</td><td>&amp;</td><td>按位与</td></tr><tr><td>8</td><td>^</td><td>按位异或</td></tr><tr><td>9</td><td>|</td><td>按位或</td></tr><tr><td>10</td><td>&lt;　&lt;=　&gt;　&gt;=</td><td>比较运算</td></tr><tr><td>11</td><td>==　!=</td><td>等于  不等于</td></tr><tr><td>12</td><td>is　not is</td><td>实体检查</td></tr><tr><td>13</td><td>in　not in</td><td>成员检查</td></tr><tr><td>14</td><td>not</td><td>逻辑非</td></tr><tr><td>15</td><td>and</td><td>逻辑与</td></tr><tr><td>16</td><td>or</td><td>逻辑或</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypt0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中的RSA攻击方式总结</title>
      <link href="/2022/10/24/rsa/"/>
      <url>/2022/10/24/rsa/</url>
      
        <content type="html"><![CDATA[<h2 id="RSA简介">RSA简介</h2><p><a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&amp;fromid=210678&amp;fr=aladdin">RSA</a>是一种算法，并且广泛应用于现代，用于保密通信。</p><p>基本原理为单向陷门函数，即满足如下的三个条件：</p><ol><li>正向计算容易。</li><li>在不知道私钥的情况下，反向计算不可行。</li><li>在知道私钥的情况下，反向计算容易。</li></ol><p>具体加密算法：</p><ol><li>选取两个大素数p和q，两个数位数接近且相差较大。</li><li>计算<code>n = p*q</code>，<code>φ(n) = (p-1)(q-1)</code>。</li><li>随机选取整数e，满足<code>gcd(e,φ(n)) = 1</code>，作为公钥。</li><li>计算私钥d，满足<code>d*e ≡ 1 (mod φ(n))</code>，即d是e模φ(n)的逆元。CTF的角度看就是，d是由e,p,q可以求解出的。</li></ol><p>一般CTF就是把我们想要获得的flag作为明文，RSA中表示为m。然后通过<code>c = pow(m,e,n)</code>加密，得到密文，RSA中表示为c。<br>如果知道私钥d，则可以通过<code>m = pow(c,d,n)</code>进行解密。</p><p>在实际应用中，n，e是公开的，但是由于n一般是两个大素数的乘积，所以我们很难求解出d，所以RSA加密就是利用现代无法快速实现大素数的分解，所存在的一种安全的非对称加密。</p><p>加解密程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    m = bytes_to_long(<span class="string">b&#x27;flag&#123;XXXXXXXXXX&#125;&#x27;</span>)</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span>    <span class="comment"># 视具体题目而定</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)    <span class="comment"># 一般保密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)    <span class="comment"># 一般保密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">p, q, n, e, c</span>):</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上面的内容我们可以知道要想解密一段密文，我们需要c，d，n三个值。其中c我们是知道的，而n和d都可以通过p，q，e算出来，e我们一般也是知道的，也就是说常规的rsa题目我们的解题思路就是想想怎样把p和q求出来，并以此进行解密。</p><h2 id="攻击方法">攻击方法</h2><h3 id="已知p、q">已知p、q</h3><p>略。</p><h3 id="分解n得到p、q">分解n得到p、q</h3><p>适用情况：n已知且可因式分解</p><p>既然<code>n = p*q</code>，那么最常规的想法就是把n因式分解得到p，q，上面说n很难分解，但对于一些不太大的n，我们可以借助 <a href="http://www.factordb.com">在线因式分解网站</a> 或 <a href="https://sourceforge.net/projects/yafu/">yafu</a> 去分解它。<br>如果密钥的长度小于等于256位,一台较快的电脑可以在几个小时内成功分解其因子。</p><p>解密程序见上文。</p><h3 id="低加密指数攻击">低加密指数攻击</h3><p>适用情况：n很大但是e很小，一般e=3</p><p>n很大时我们就不能因式分解了，但是当e很小时，比如e=3，有<code>c = m^e+kn</code>，我们可以对k进行爆破，直到c-kn可以开根，借此得到m。</p><h2 id="维护中，未完待续…">维护中，未完待续…</h2><h2 id="参考资料">参考资料</h2><blockquote><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/</a><br><a href="https://blog.csdn.net/qq_46145027/article/details/125047313">https://blog.csdn.net/qq_46145027/article/details/125047313</a><br><a href="https://www.freesion.com/article/8945408137/">https://www.freesion.com/article/8945408137/</a><br><a href="https://www.freebuf.com/vuls/257835.html">https://www.freebuf.com/vuls/257835.html</a><br><a href="https://skysec.top/2018/09/15/%E6%B5%85%E6%9E%90RSA-Padding-Attack/">https://skysec.top/2018/09/15/浅析RSA-Padding-Attack/</a><br><a href="https://www.iacr.org/archive/pkc2005/33860001/33860001.pdf">https://www.iacr.org/archive/pkc2005/33860001/33860001.pdf</a><br><a href="https://www.cnblogs.com/nLesxw/p/learn_math_rsa.html">https://www.cnblogs.com/nLesxw/p/learn_math_rsa.html</a></p><p>篇幅有限，不完全列举。如以上文章作者认为此博客有侵权行为或不合理的引用之处，请联系我修改。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypt0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 re迷宫题 reverse_re3</title>
      <link href="/2022/10/21/ctf1/"/>
      <url>/2022/10/21/ctf1/</url>
      
        <content type="html"><![CDATA[<p>原题地址：<a href="https://adworld.xctf.org.cn/challenges/details?hash=0d75f9ba-1c77-11ed-abf3-fa163e4fa609&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=0d75f9ba-1c77-11ed-abf3-fa163e4fa609&amp;task_category_id=4</a></p><hr><p>下载文件拖入IDA查看<br>根据以前做迷宫题的经验，F12+shift，无果，遂观察源代码，发现可疑长字符串。<br><img src="https://s2.loli.net/2022/10/21/fBWEdLjYxtAehRV.png" width=80% /></p><p>一开始我没意识到它的长，所以选择手打，打到一半打不下去了，选择写脚本收集。<br>下面的代码实现文件每行最后一个字符（换行符除外）的收集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    file1 = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    string = file1.readlines()</span><br><span class="line">    file1.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件路径：\n&quot;</span>)</span><br><span class="line">    file1 = <span class="built_in">open</span>(path)</span><br><span class="line">    string = file1.readlines()</span><br><span class="line">    file1.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="built_in">print</span>(string[i][-<span class="number">2</span>],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将<code>print(string[i][-2],end=&quot;&quot;)</code>中的<code>[-2]</code>换成<code>[0]</code>可实现第一个字符的收集，下面会用到。</p><p>其实我感觉这个功能的实现应该用EOF指针的，奈何学不来时间又不够，凑合用一下罢。</p><p>复制IDA汇编代码到记事本后拖入脚本，得长字符串：<codecode><br>统计一下有2699个字符。</p><p>然后我傻乎乎地去对2699因式分解了，殊不知这串字符串是dword类型，每4个为一组，只有第一个值是有效值。<br><img src="https://s2.loli.net/2022/10/21/u9I3ebAlKmcf2On.png" width=80% /></p><p>知识盲区了属于是。<br>于是接下来每四个为一组取第一个，用到分行脚本，结合上面的“收集每行第一个字符”的脚本，可以实现每四个取一个。<br>分行脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    file1 = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    string = file1.read()</span><br><span class="line">    file1.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件路径：\n&quot;</span>)</span><br><span class="line">    file1 = <span class="built_in">open</span>(path)</span><br><span class="line">    string = file1.read()</span><br><span class="line">    file1.close()</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入每行字符个数：\n&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)//n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(string[j+i*n],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(string)%n!=<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)%n):</span><br><span class="line">        <span class="built_in">print</span>(string[j+(i+<span class="number">1</span>)*n],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然这里完全没必要分行，因为后面也要用到这个脚本，懒得写一个新的罢了。</p><p>四取一后得字符串：<codecode><br>675个字符。<br>675=3*3*3*5*5<br>逐个尝试分行得675=15行*45列<br>分行如下：<br><img src="https://s2.loli.net/2022/10/22/QPiFzsbVWX3e9T2.png" width=40% /></p><p>可见有三个迷宫，3为起点，4为终点，1可走，0不可走，寻找最短路径得<code>ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss</code><br>md5加密得Flag。</p><hr><p>主要被坑的点就是不知道dword类型的特性。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rever$e </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩具</title>
      <link href="/2022/10/18/py4/"/>
      <url>/2022/10/18/py4/</url>
      
        <content type="html"><![CDATA[<p><font size=4><strong>Cabelis Warning</strong></font><br>以下脚本仅作练习之用，测试之中没有任何人类受到伤害。<br>现实生活中请谨慎使用此脚本，尤其是在群聊里，因为它会让您看上去像个晚餐。<br>珍爱生命，远离刷屏。</p><hr><p>事情是这样的，最近莫名又其妙流行起了朋友圈默契挑战。我整了10道题，答对6道即可获得“夸夸券”<br><img src="https://s2.loli.net/2022/10/18/EsAgn5cUVIBqK1T.jpg" width=30% /></p><center>↑长这dinner玩意</center><br>然后意料之中，有人答出来了。打字夸吧，有点费腱鞘；用嘴夸吧，怕口水溅出来。于是整了个玩具：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">dic = [<span class="string">&#x27;出水芙蓉&#x27;</span>,<span class="string">&#x27;明眸皓齿&#x27;</span>,<span class="string">&#x27;国色天香&#x27;</span>,<span class="string">&#x27;鹤发童颜&#x27;</span>,<span class="string">&#x27;雍容华贵&#x27;</span>,<span class="string">&#x27;眉清目秀&#x27;</span>,<span class="string">&#x27;威风凛凛&#x27;</span>,<span class="string">&#x27;神采奕奕&#x27;</span>,<span class="string">&#x27;温文尔雅&#x27;</span>,<span class="string">&#x27;眉飞色舞&#x27;</span>,<span class="string">&#x27;眉开眼笑&#x27;</span>,<span class="string">&#x27;笑逐颜开&#x27;</span>,<span class="string">&#x27;忍俊不禁&#x27;</span>,<span class="string">&#x27;正襟危坐&#x27;</span>,<span class="string">&#x27;从容自若&#x27;</span>,<span class="string">&#x27;如痴如醉&#x27;</span>,<span class="string">&#x27;舒眉展眼&#x27;</span>,<span class="string">&#x27;神清气爽&#x27;</span>,<span class="string">&#x27;悠然自得&#x27;</span>,<span class="string">&#x27;口若悬河&#x27;</span>,<span class="string">&#x27;对答如流&#x27;</span>,<span class="string">&#x27;滔滔不绝&#x27;</span>,<span class="string">&#x27;谈笑风生&#x27;</span>,<span class="string">&#x27;高谈阔论&#x27;</span>,<span class="string">&#x27;夸夸其谈&#x27;</span>,<span class="string">&#x27;表里如一&#x27;</span>,<span class="string">&#x27;开诚相见&#x27;</span>,<span class="string">&#x27;言行一致&#x27;</span>,<span class="string">&#x27;实心实意&#x27;</span>,<span class="string">&#x27;心口如一&#x27;</span>,<span class="string">&#x27;胸无城府&#x27;</span>,<span class="string">&#x27;出生入死&#x27;</span>,<span class="string">&#x27;奋不顾身&#x27;</span>,<span class="string">&#x27;赴汤蹈火&#x27;</span>,<span class="string">&#x27;临危不惧&#x27;</span>,<span class="string">&#x27;挺身而出&#x27;</span>,<span class="string">&#x27;视死如归&#x27;</span>,<span class="string">&#x27;一往无前&#x27;</span>,<span class="string">&#x27;义无反顾&#x27;</span>,<span class="string">&#x27;勇往直前&#x27;</span>,<span class="string">&#x27;粗衣淡饭&#x27;</span>,<span class="string">&#x27;克勤克俭&#x27;</span>,<span class="string">&#x27;轻车简从&#x27;</span>,<span class="string">&#x27;节衣缩食&#x27;</span>,<span class="string">&#x27;精打细算&#x27;</span>,<span class="string">&#x27;开源节流&#x27;</span>,<span class="string">&#x27;勤俭持家&#x27;</span>,<span class="string">&#x27;省吃俭用&#x27;</span>,<span class="string">&#x27;细水长流&#x27;</span>,<span class="string">&#x27;高义薄云&#x27;</span>,<span class="string">&#x27;慷慨解囊&#x27;</span>,<span class="string">&#x27;乐善好施&#x27;</span>,<span class="string">&#x27;设身处地&#x27;</span>,<span class="string">&#x27;尊老爱幼&#x27;</span>,<span class="string">&#x27;以德报怨&#x27;</span>,<span class="string">&#x27;仁至义尽&#x27;</span>,<span class="string">&#x27;仁民爱物&#x27;</span>,<span class="string">&#x27;仁人君子&#x27;</span>,<span class="string">&#x27;宅心仁厚&#x27;</span>,<span class="string">&#x27;温柔敦厚&#x27;</span>,<span class="string">&#x27;仁良恭俭让&#x27;</span>,<span class="string">&#x27;超然物外&#x27;</span>,<span class="string">&#x27;超尘拔俗&#x27;</span>,<span class="string">&#x27;宠辱不惊&#x27;</span>,<span class="string">&#x27;孤芳自赏&#x27;</span>,<span class="string">&#x27;洁身自好&#x27;</span>,<span class="string">&#x27;狷介之士&#x27;</span>,<span class="string">&#x27;冰清玉洁&#x27;</span>,<span class="string">&#x27;岁寒松柏&#x27;</span>,<span class="string">&#x27;高风亮节&#x27;</span>,<span class="string">&#x27;高节迈俗&#x27;</span>,<span class="string">&#x27;守身如玉&#x27;</span>,<span class="string">&#x27;明德惟馨&#x27;</span>,<span class="string">&#x27;高山景行&#x27;</span>,<span class="string">&#x27;年高德劭&#x27;</span>,<span class="string">&#x27;光明磊落&#x27;</span>,<span class="string">&#x27;鸿鹄之志&#x27;</span>,<span class="string">&#x27;老骥伏枥&#x27;</span>,<span class="string">&#x27;壮志凌云&#x27;</span>,<span class="string">&#x27;胸怀大志&#x27;</span>,<span class="string">&#x27;雄心壮志&#x27;</span>,<span class="string">&#x27;志在四方&#x27;</span>,<span class="string">&#x27;不耻下问&#x27;</span>,<span class="string">&#x27;不矜不伐&#x27;</span>,<span class="string">&#x27;功成不居&#x27;</span>,<span class="string">&#x27;好问则裕&#x27;</span>,<span class="string">&#x27;戒骄戒躁&#x27;</span>,<span class="string">&#x27;虚怀若谷&#x27;</span>,<span class="string">&#x27;闻过则喜&#x27;</span>,<span class="string">&#x27;抛砖引玉&#x27;</span>,<span class="string">&#x27;深藏若虚&#x27;</span>,<span class="string">&#x27;引咎自责&#x27;</span>,<span class="string">&#x27;知过必改&#x27;</span>,<span class="string">&#x27;自愧弗如&#x27;</span>,<span class="string">&#x27;爱憎分明&#x27;</span>,<span class="string">&#x27;褒善贬恶&#x27;</span>,<span class="string">&#x27;火眼金睛&#x27;</span>,<span class="string">&#x27;两袖清风&#x27;</span>,<span class="string">&#x27;先公后私&#x27;</span>,<span class="string">&#x27;一尘不染&#x27;</span>,<span class="string">&#x27;浩然之气&#x27;</span>,<span class="string">&#x27;直言正论&#x27;</span>,<span class="string">&#x27;刚正不阿&#x27;</span>,<span class="string">&#x27;心无旁骛&#x27;</span>,<span class="string">&#x27;屏气敛息&#x27;</span>,<span class="string">&#x27;目不窥园&#x27;</span>,<span class="string">&#x27;屏气凝神&#x27;</span>,<span class="string">&#x27;全神贯注&#x27;</span>,<span class="string">&#x27;专心致志&#x27;</span>,<span class="string">&#x27;沉鱼落雁&#x27;</span>,<span class="string">&#x27;闭月羞花&#x27;</span>,<span class="string">&#x27;端庄优雅&#x27;</span>,<span class="string">&#x27;大家闺秀&#x27;</span>,<span class="string">&#x27;妩媚动人&#x27;</span>,<span class="string">&#x27;优雅大方&#x27;</span>,<span class="string">&#x27;婀娜多姿&#x27;</span>,<span class="string">&#x27;矜持佳丽&#x27;</span>,<span class="string">&#x27;秀外慧中&#x27;</span>,<span class="string">&#x27;慧质兰心&#x27;</span>,<span class="string">&#x27;柔美婉丽&#x27;</span>,<span class="string">&#x27;清新单纯&#x27;</span>,<span class="string">&#x27;面若桃花&#x27;</span>,<span class="string">&#x27;天生丽质&#x27;</span>,<span class="string">&#x27;娇柔可爱&#x27;</span>,<span class="string">&#x27;宛如天仙&#x27;</span>,<span class="string">&#x27;仙女下凡&#x27;</span>,<span class="string">&#x27;温柔体贴&#x27;</span>,<span class="string">&#x27;气质非凡&#x27;</span>,<span class="string">&#x27;身付异秉&#x27;</span>,<span class="string">&#x27;才思敏捷&#x27;</span>,<span class="string">&#x27;过目不忘&#x27;</span>,<span class="string">&#x27;博学多才&#x27;</span>,<span class="string">&#x27;见多识广&#x27;</span>,<span class="string">&#x27;才高八斗&#x27;</span>,<span class="string">&#x27;学富五车&#x27;</span>,<span class="string">&#x27;文武双全&#x27;</span>,<span class="string">&#x27;雄韬伟略&#x27;</span>,<span class="string">&#x27;谈吐不凡&#x27;</span>,<span class="string">&#x27;谈笑风声&#x27;</span>,<span class="string">&#x27;高谈阔论&#x27;</span>,<span class="string">&#x27;眉飞色舞&#x27;</span>,<span class="string">&#x27;运筹帷幄&#x27;</span>,<span class="string">&#x27;言简意赅&#x27;</span>,<span class="string">&#x27;完美无缺&#x27;</span>,<span class="string">&#x27;一针见血&#x27;</span>,<span class="string">&#x27;远见卓识&#x27;</span>,<span class="string">&#x27;义正词严&#x27;</span>,<span class="string">&#x27;一气呵成&#x27;</span>,<span class="string">&#x27;大显神通&#x27;</span>,<span class="string">&#x27;出口成章&#x27;</span>,<span class="string">&#x27;出类拔萃&#x27;</span>,<span class="string">&#x27;出神入化&#x27;</span>,<span class="string">&#x27;万古流芳&#x27;</span>,<span class="string">&#x27;一箭双雕&#x27;</span>,<span class="string">&#x27;功德无量&#x27;</span>,<span class="string">&#x27;力排众议&#x27;</span>,<span class="string">&#x27;力挽狂澜&#x27;</span>,<span class="string">&#x27;气贯长虹&#x27;</span>,<span class="string">&#x27;气势磅礴&#x27;</span>,<span class="string">&#x27;气吞山河&#x27;</span>,<span class="string">&#x27;坚韧不拔&#x27;</span>,<span class="string">&#x27;空前绝后&#x27;</span>,<span class="string">&#x27;视死如归&#x27;</span>,<span class="string">&#x27;英姿焕发&#x27;</span>,<span class="string">&#x27;奉公守法&#x27;</span>,<span class="string">&#x27;艰苦奋斗&#x27;</span>,<span class="string">&#x27;忠贞不渝&#x27;</span>,<span class="string">&#x27;舍己为人&#x27;</span>,<span class="string">&#x27;大公无私&#x27;</span>,<span class="string">&#x27;一尘不染&#x27;</span>,<span class="string">&#x27;一鸣惊人&#x27;</span>,<span class="string">&#x27;叱诧风云&#x27;</span>,<span class="string">&#x27;惊涛骇浪&#x27;</span>,<span class="string">&#x27;雷霆万钧&#x27;</span>,<span class="string">&#x27;惊心动魄&#x27;</span>,<span class="string">&#x27;横扫千军&#x27;</span>,<span class="string">&#x27;惊天动地&#x27;</span>,<span class="string">&#x27;千篇一律&#x27;</span>,<span class="string">&#x27;口诛笔伐&#x27;</span>,<span class="string">&#x27;文从字顺&#x27;</span>,<span class="string">&#x27;十全十美&#x27;</span>,<span class="string">&#x27;无懈可击&#x27;</span>,<span class="string">&#x27;无与伦比&#x27;</span>,<span class="string">&#x27;励精图治&#x27;</span>,<span class="string">&#x27;壮志凌云&#x27;</span>,<span class="string">&#x27;高瞻远瞩&#x27;</span>,<span class="string">&#x27;忍辱负重&#x27;</span>,<span class="string">&#x27;盖世无双&#x27;</span>,<span class="string">&#x27;龙飞凤舞&#x27;</span>,<span class="string">&#x27;一丝不苟&#x27;</span>,<span class="string">&#x27;身兼数职&#x27;</span>,<span class="string">&#x27;日理万机&#x27;</span>,<span class="string">&#x27;明察秋毫&#x27;</span>,<span class="string">&#x27;英明果断&#x27;</span>,<span class="string">&#x27;分身有术&#x27;</span>,<span class="string">&#x27;孜孜不倦&#x27;</span>,<span class="string">&#x27;回眸一笑百媚生&#x27;</span>]</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    pyperclip.copy(<span class="string">&#x27;&#x27;</span>+dic[i]) <span class="comment"># 可以加上具体姓名</span></span><br><span class="line">    pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>) <span class="comment"># 注意要focus聊天窗口</span></span><br><span class="line">    pyautogui.press(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure>效果不错<img src="https://s2.loli.net/2022/10/18/FV9wmX5CaAu2nqL.png" width=30% /><p>当然还有没有循环出口的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    pyperclip.copy(<span class="string">&#x27;彻底疯狂！&#x27;</span>) <span class="comment"># 可以加上具体姓名</span></span><br><span class="line">    pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/10/18/rlkZyR2IiSacp4G.gif" width=10% /><p>美其名曰 <strong>轰炸机</strong></p><hr><p>脚本有更好的实现方案，欢迎在评论区补充！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TSCTF-J2022 WP</title>
      <link href="/2022/10/17/tsctf-j2022wp/"/>
      <url>/2022/10/17/tsctf-j2022wp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>互联网本来是安全的,自从有了研究安全的人之后,互联网就变得不安全了。</p><p align="right">——《白帽子讲Web安全》</p></blockquote><h2 id="官方WP"><a href="https://md.byr.moe/s/b5cZWnhDa">官方WP</a></h2><h2 id="Reverse">Reverse</h2><p>零基础真的零基础，就这么稀里糊涂地做了几道题。</p><h3 id="baby-xor">baby_xor</h3><p>下载文件拖入IDA看一眼主函数，鉴定为<strong>纯纯的异或</strong>。（数组具体数据不放了）<br><img src="https://s2.loli.net/2022/10/17/eq3vbjDiJPgCMw5.png" width=80% /><br>程序的本质是我们输入的字符串s中的每个字符与其下标进行按位异或运算，再与0x46进行按位异或运算，与data中对应的元素比较。<br>异或可逆，<code>data[i] = i ^ s[i] ^ 0x46</code> 等价于 <code>s[i] = data[i] ^ i ^ 0x46</code><br>破解程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]</span><br><span class="line">ans = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]</span><br><span class="line">data[<span class="number">0</span>] = <span class="number">18</span></span><br><span class="line">data[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">data[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">data[<span class="number">39</span>] = <span class="number">83</span></span><br><span class="line">data[<span class="number">40</span>] = <span class="number">19</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">    ans[i]=<span class="built_in">chr</span>(i ^ data[i] ^ <span class="number">0x46</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">    <span class="built_in">print</span>(ans[i],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行得Flag：<br><img src="https://s2.loli.net/2022/10/17/b1IDdna8qZcPm5h.png" width=80% /></p><h3 id="byte-code">byte_code</h3><p>查看文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> 1           0 LOAD_CONST               0 (114)</span><br><span class="line">             2 LOAD_CONST               1 (101)</span><br><span class="line">             4 LOAD_CONST               2 (118)</span><br><span class="line">             6 LOAD_CONST               1 (101)</span><br><span class="line">             8 LOAD_CONST               0 (114)</span><br><span class="line">             # ...                      ...</span><br><span class="line"></span><br><span class="line">19         466 LOAD_NAME                9 (print)</span><br><span class="line">           468 LOAD_NAME               10 (chr)</span><br><span class="line">           470 LOAD_NAME                6 (c)</span><br><span class="line">           472 LOAD_NAME                8 (i)</span><br><span class="line">           474 BINARY_SUBSCR</span><br><span class="line">           476 CALL_FUNCTION            1</span><br><span class="line">           478 LOAD_CONST              94 (&#x27;&#x27;)</span><br><span class="line">           480 LOAD_CONST              95 ((&#x27;end&#x27;,))</span><br><span class="line">           482 CALL_FUNCTION_KW         2</span><br><span class="line">           484 POP_TOP</span><br><span class="line">           486 EXTENDED_ARG             1</span><br><span class="line">           488 JUMP_ABSOLUTE          418</span><br><span class="line">       &gt;&gt;  490 LOAD_CONST              99 (None)</span><br><span class="line">           492 RETURN_VALUE</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pyc字节码。</p><blockquote><p>pyc是一种二进制文件，是由py文件经过编译后，生成的文件，是一种byte code，py文件变成pyc文件后，加载的速度有所提高，而且pyc是一种跨平台的字节码，是由python的虚拟机来执行的。</p></blockquote><p>去网上搜了一个小时的pyc反编译工具，无果，最后通过<a href="https://bbs.pediy.com/thread-246683.htm">一些博客</a>的帮助~手撸撸出来了~。<br>具体过程不细嗦，谁做谁知道，给出反编译后的py程序如下（不足之处欢迎指出）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a = [<span class="number">114</span>,<span class="number">101</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">98</span>,<span class="number">121</span>,<span class="number">116</span>,<span class="number">101</span>]</span><br><span class="line">    b = [<span class="number">99</span>,<span class="number">111</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">95</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>]</span><br><span class="line">    e = [<span class="number">80</span>,<span class="number">115</span>,<span class="number">193</span>,<span class="number">24</span>,<span class="number">226</span>,<span class="number">237</span>,<span class="number">202</span>,<span class="number">212</span>,<span class="number">126</span>,<span class="number">46</span>,<span class="number">205</span>,<span class="number">208</span>,<span class="number">215</span>,<span class="number">135</span>,<span class="number">228</span>,<span class="number">199</span>,<span class="number">63</span>,<span class="number">159</span>,<span class="number">117</span>,<span class="number">52</span>,<span class="number">254</span>,<span class="number">247</span>,<span class="number">0</span>,<span class="number">133</span>,<span class="number">163</span>,<span class="number">248</span>,<span class="number">47</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">248</span>,<span class="number">236</span>,<span class="number">68</span>]</span><br><span class="line">    pos = [<span class="number">9</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">13</span>]</span><br><span class="line">    d = [<span class="number">335833164</span>,<span class="number">1155265242</span>,<span class="number">627920619</span>,<span class="number">1951749419</span>,<span class="number">1931742276</span>,<span class="number">856821608</span>,<span class="number">489891514</span>,<span class="number">366025591</span>,<span class="number">1256805508</span>,<span class="number">1106091325</span>,<span class="number">128288025</span>,<span class="number">234430359</span>,<span class="number">314915121</span>,<span class="number">249627427</span>,<span class="number">207058976</span>,<span class="number">1573143998</span>,<span class="number">1443233295</span>,<span class="number">245654538</span>,<span class="number">1628003955</span>,<span class="number">220633541</span>,<span class="number">1412601456</span>,<span class="number">1029130440</span>,<span class="number">1556565611</span>,<span class="number">1644777223</span>,<span class="number">853364248</span>,<span class="number">58316711</span>,<span class="number">734735924</span>,<span class="number">1745226113</span>,<span class="number">1441619500</span>,<span class="number">1426836945</span>,<span class="number">500084794</span>,<span class="number">1534413607</span>]</span><br><span class="line">    c = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c[<span class="number">31</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        a[i]=(a[i]+d[i]) ^ b[pos[i]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        b[i] = b[i] ^ a[pos[i]]</span><br><span class="line">    c = a+b</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        c[i] = c[i]*d[i]%<span class="number">256</span></span><br><span class="line">        c[i] ^= e[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    func()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行得Flag：<br><img src="https://s2.loli.net/2022/10/17/3QsLeP8oCatOq54.png" width=80% /></p><h3 id="ez-maze">ez_maze</h3><p>拖入IDA，shift+F12查字符串，观察到Flag编码信息和不明长字符串：<br><img src="https://s2.loli.net/2022/10/17/FasjRcLw6tEzKTV.png" width=80% /><br>结合maze题的信息，复制长字符串至记事本，~数字符个数~拖入家中常备的统计字符个数的脚本，得字符个数为5551=91x61，分隔字符后迷宫如下（ps.必须使用等宽字体，这里使用了幼圆）：<br><img src="https://s2.loli.net/2022/10/17/8FpMwfCev6ql7Z5.png" width=80% /><br>没看到起点和终点啊。于是回去读IDA，无果，利用hint“如果不能反混淆就大胆猜测这个题在干什么吧”，我大胆猜了一把：<strong>从左上走到右下</strong>。<br>结合之前IDA里看到的&quot;WASD&quot;可知迷宫移动使用WASD键。<br>结合之前IDA里看到的&quot;Wrong Path, Maybe it’s not the best solution.&quot;可知需要寻找最短路径。<br>最短路径算法不会，同寝的ACM👴不肯帮我，遂大胆猜了另一把。得路径如下：<br><code>DSDWDDSDWDDDSASSSSDDSSDSSDWDWAWWWWASAAWDWDWDDSDSDDWWDDSASSSDDDWAWWWDWDDSSDSSDSDSDSSAAAAAWWASASASDSDWDDSDDDWDDSASDSSDWDWWDSSSSSSSAWAAWAAAAASAAASASDDDDWDWDSSSDDWWDSSSDSASSAAWAWWAASSDSDSSDSDDSDDSASDD</code><br><a href="http://www.jsons.cn/md5/l/">MD532位大写加密</a>一下包上大括号抱着试一试的心态上交，居然对了。<br>猜想之前进行了抽象的操作，现在看来真是痛定思痛痛何如哉，这样的抽象文化对🐭🐭这个新手来说还是为时尚早了。<br><img src="https://s2.loli.net/2022/10/17/kX4zpgQMDvhr16e.jpg" width=80% /></p><h2 id="Crypto">Crypto</h2><p>半个月前刚在网安导论课上学了RSA就来实践力！</p><h3 id="T0ni’s-RSA">T0ni’s_RSA</h3><p>下载文件IDLE打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">48</span></span><br><span class="line">flag1=flag[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">flag2=flag[<span class="number">12</span>:<span class="number">24</span>]</span><br><span class="line">flag3=flag[<span class="number">24</span>:<span class="number">36</span>]</span><br><span class="line">flag4=flag[<span class="number">36</span>:<span class="number">48</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可知长度为48的Flag被等分成了四部分，每一部分使用了不同的<a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&amp;fromid=210678&amp;fr=aladdin">RSA算法</a>加密。<br>具体如下（省略具体数据）：</p><h4 id="Flag1">Flag1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================================flag1&quot;</span>)</span><br><span class="line">m=bytes_to_long(flag1)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">c=powmod(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常规的RSA加密，知道p、q可以求<code>phi = (p-1)(q-1)</code>，得到私钥<code>d = gmpy2.invert(e, phi)</code>，进而求得<code>m = pow(c,d,n)</code>，即Flag1。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># Flag1 = b&#x27;TSCTF-J&#123;T0ni&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Flag2">Flag2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================================flag2&quot;</span>)</span><br><span class="line">m=bytes_to_long(flag2)</span><br><span class="line">p=getPrime(<span class="number">64</span>)</span><br><span class="line">q=getPrime(<span class="number">64</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">c=powmod(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>n不太大，可以尝试<a href="http://www.factordb.com">因式分解</a>，分解得<code>p = 10044079891992334031</code> <code>q = 11695298459661145481</code>。<br>余下做法同Flag1，得<code>Flag2 = b'ii_is_the_mo'</code></p><h4 id="Flag3">Flag3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================================flag3&quot;</span>)</span><br><span class="line">m=bytes_to_long(flag3)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=next_prime(p)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">c=powmod(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不会，面向搜索引擎编程，得到<a href="https://zhuanlan.zhihu.com/p/473448399">信息</a>如下：<br><img src="https://s2.loli.net/2022/10/17/8rF3JyM4Ul5Ck2Y.png" width=80% /><br>摘录代码如下（部分测试代码略去）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_RSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_n1</span>(<span class="params">BITS</span>):</span><br><span class="line">        <span class="comment"># 生成很接近的p、q，具体代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m,n,e</span>):</span><br><span class="line">        <span class="comment"># 对明文m进行编码，具体代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p,q,e,n,c</span>): </span><br><span class="line">        phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e,phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        pt = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">return</span> pt.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># 对密文n进行解码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fermat_method</span>(<span class="params">nn</span>):</span><br><span class="line">        a = gmpy2.isqrt(nn) + <span class="number">1</span></span><br><span class="line">        k = a**<span class="number">2</span> - nn</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_square(k):</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">            k = a**<span class="number">2</span>-nn</span><br><span class="line">        <span class="keyword">return</span> (gmpy2.isqrt(k) + a),(a - gmpy2.isqrt(k))</span><br><span class="line">        <span class="comment"># 核心程序，获取p、q</span></span><br><span class="line"></span><br><span class="line">p , q = my_RSA.fermat_method(n)</span><br><span class="line"><span class="built_in">print</span>(my_RSA.decrypt(p, q, e, n1, c))</span><br><span class="line"><span class="comment"># Flag3 = st_handsome_</span></span><br></pre></td></tr></table></figure><p><strong>费马分解</strong>什么的完全不懂捏，就这样作为脚本小子搞到了Flag3（笑）。<br>写完WP学一下罢。</p><h4 id="Flag4">Flag4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================================flag4&quot;</span>)</span><br><span class="line">m=bytes_to_long(flag4)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">7</span></span><br><span class="line">n=p*q</span><br><span class="line">c=powmod(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/qq_46145027/article/details/125047313">资料</a>得知可以通过低指数爆破得出明文。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m = c + n*k</span><br><span class="line">        result, flag = gmpy2.iroot(m, e)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m=de(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># Flag4 = b&#x27;boy_in_BUPT&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Flag">Flag</h4><p>综上，Flag为TSCTF-J{T0niii_is_the_most_handsome_boy_in_BUPT}<br>如题面所述，不愧是至理名言（V我50</p><h3 id="Nonograms">Nonograms</h3><img src="https://s2.loli.net/2022/10/17/DEfL9bJ2qFrS5VU.png" width=80% /><p><a href="https://cn.puzzle-nonograms.com"><strong>数织</strong></a><br>TSC出来基本就是TSCTF-J{}了，需要考虑的是中间五个全角的玩意。<br><strong>旗</strong>字出来第一想法<strong>旗开得胜</strong>，然后去做了第五个，一眼鉴定为感叹号。<br>于是开始输Flag：</p><blockquote><p>TSCTF-J{旗开得胜！}（全角感叹号）不对<br>TSCTF-J{旗开得胜!}（半角感叹号）不对<br>TSCTF-J{旗开得胜! }（半角感叹号+半角空格）不对</p></blockquote><p>Dinner是我了。老老实实回去做。最后一个字做到一半发现另有玄只因，重新输Flag <strong>TSCTF-J{旗开得勝！}</strong> 过了。</p><h3 id="锟斤拷烫烫烫"><a href="https://baike.baidu.com/item/%E9%94%9F%E6%96%A4%E6%8B%B7/8263356?fr=aladdin">锟斤拷烫烫烫</a></h3><p>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">烫烫烫锟斤拷/烫烫烫锟斤拷锟斤拷锟斤拷/烫烫烫锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷烫烫烫/烫烫烫烫烫烫锟斤拷锟斤拷/烫烫烫锟斤拷锟斤拷/锟斤拷锟斤拷烫烫烫锟斤拷/烫烫烫烫烫烫/锟斤拷烫烫烫烫烫烫烫烫烫/烫烫烫锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷烫烫烫/烫烫烫烫烫烫锟斤拷烫烫烫/锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷/锟斤拷烫烫烫锟斤拷锟斤拷/锟斤拷锟斤拷烫烫烫锟斤拷/烫烫烫锟斤拷/锟斤拷烫烫烫烫烫烫烫烫烫/锟斤拷锟斤拷烫烫烫/锟斤拷烫烫烫烫烫烫/锟斤拷锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫烫烫烫锟斤拷锟斤拷/锟斤拷锟斤拷锟斤拷烫烫烫烫烫烫/烫烫烫烫烫烫锟斤拷锟斤拷/烫烫烫烫烫烫/锟斤拷锟斤拷锟斤拷烫烫烫/锟斤拷烫烫烫烫烫烫/烫烫烫烫烫烫锟斤拷/烫烫烫锟斤拷烫烫烫/锟斤拷锟斤拷锟斤拷锟斤拷烫烫烫/锟斤拷烫烫烫锟斤拷锟斤拷/锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷/烫烫烫锟斤拷烫烫烫烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫/烫烫烫锟斤拷锟斤拷锟斤拷烫烫烫</span><br></pre></td></tr></table></figure><p>第一想法是转码问题，但是单纯的转码不会单纯出现这么整齐的“锟斤拷烫烫烫”，可能掺杂部分破碎的“锟届瀿锟斤拷雮傡锟”等，遂另辟蹊径。<br>结合hint“永不消逝的电波”，通过观察猜想是摩斯电码，多次尝试后得<code>烫烫烫 = -</code> <code>锟斤拷 = .</code><br>于是编码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-. -... -..- -..- -.- --.. -.. ..-. -- .--- -..- -..- --.- ..... .-.. ..-. -. .--- ..- .-- ....- --.. ...-- --.. -- ...- .-- --. -.- ....- .-.. ...- -. -.-- -...- -...- -...- -...- -...- -...-</span><br></pre></td></tr></table></figure><p>这个手工编码的过程着实让我体验了一把电报员的感觉。<br>解码如下：<br><code>nbxxkzdfmjxxq5lfnjuw4z3zmvwgk4lvny======</code><br>观察后面的六个等号猜测是Base32，字母转大写后放入赛博厨房爆炒后得到<code>houdeboxuejingyeleqvn</code>，包上大括号后提交。</p><h3 id="Mathematics">Mathematics</h3><p>脚本小子提供链接：<a href="https://www.cnblogs.com/nLesxw/p/learn_math_rsa.html">点我！</a><br>摘录代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">f1 = <span class="built_in">pow</span>(<span class="number">5</span>, e1*e2, N) * <span class="built_in">pow</span>(c1, e2, N)</span><br><span class="line">f2 = <span class="built_in">pow</span>(<span class="number">2</span>, e1*e2, N) * <span class="built_in">pow</span>(c2, e1, N)</span><br><span class="line">q = <span class="built_in">abs</span>(gmpy2.gcd(N, f1-f2))</span><br><span class="line">p = N//q</span><br><span class="line"><span class="built_in">print</span>(N, p, q, N-p*q, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得p、q，后续步骤略。</p><h2 id="Misc-Abstract">Misc&amp;Abstract</h2><p>赛博理塘之巅！可以感受到各种抽象人出的抽象题，用抽象的方法在抽象的时间抽象的地点进行一个抽象的做（要变成抽象的形状了😇</p><h3 id="北邮人之声">北邮人之声</h3><p>拿了个简单题目的抽象一血。<br>拖入Au反向一下进行英语幺零贰肆级听力测试，通过单词首字母得<code>Flag = TSCTF-J&#123;WELCOMETOBUPT&#125;</code></p><h3 id="Just-Play">Just_Play</h3><p>忍不了，一拳地把打球爆!妈的，忍不了，一把拳地球打爆!妈的，忍不了，一拳地把球打爆!妈的，忍不了，一拳把球地打爆!妈的不忍了，一拳地把球打爆!妈的，忍不了，一把拳地球打爆!妈的，忍不了，一拳把球地打爆!妈的，忍不了，一拳地把球打爆!妈的，忍不了，一拳把球地打爆!妈的，忍不了，一-拳把球地打爆!妈的，忍不了，一把拳地球打爆!妈的，忍不了，一把拳地球打爆!妈的，忍不了，一把拳地球打爆!妈的，忍不了，一拳地把球打爆!妈的，忍不了，一拳把球地打爆!妈的，忍不了，一拳把球地打爆!妈的，忍不了，一拳把球地打爆!妈的，忍不了，一把拳地球打爆!杀 杀杀! !好可怕杀杀杀杀杀杀勾上拳!下勾拳!左勾拳!右勾拳!扫堂腿!回旋踢!这是蜘吃蛛耳屎，这是龙卷风毁摧停车场!这羚是羊蹬，这是山羊跳!乌鸦坐~飞机!老走鼠迷宫!大象踢腿!愤怒章的鱼!巨砍斧大树!彻疯底狂!彻底疯狂!彻底疯狂!彻底疯狂!彻底疯狂!彻底疯狂!彻疯底狂!彻底疯狂!彻疯底狂!（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）</p><img src="https://s2.loli.net/2022/10/17/tOE8a9FvwZIAXCc.jpg" width=80% /><img src="https://s2.loli.net/2022/10/17/wYNArGcHuXORvaC.jpg" width=80% /><img src="https://s2.loli.net/2022/10/17/ALR8oT6Uq7J42m5.jpg" width=80% /><img src="https://s2.loli.net/2022/10/17/aCKXiFJnOvSe13q.jpg" width=80% /><img src="https://s2.loli.net/2022/10/17/Sr9AxOoZ7DnHBle.jpg" width=80% /><p>还有个鼠鼠的听力不放了。</p><h3 id="EasterEgg">EasterEgg</h3><img src="https://s2.loli.net/2022/10/17/E3uqLXQo2IlfceW.jpg" width=80% /><center>前来朝拜<p><a href="https://github.com/kifuan/helang"><font size=6>来自理塘的下一代<strong>赛博</strong>编程语言</font></a></p></center><img src="https://s2.loli.net/2022/10/17/uQ7IULjDR4GxkP5.png" width=60% /><h3 id="Abstract-culture-revenge">Abstract_culture_revenge</h3><p>抽象得无法呼吸。<br><img src="https://s2.loli.net/2022/10/17/AHkeBLUwNQDbIty.png" width=80% /><br>莫（莫言写了《蛙》）愁（丑牛）前（K代表千）路（录制按钮）无（五点）知（知识）己（鸡尾酒）<br>天（八卦乾代表天）下（下弦月）谁（水瓶座）人（不知道）不（占卜）识（矢）君（菌）</p><h2 id="写在最后">写在最后</h2><p>未知攻，焉能防。<br>通过这次TSCTF-J真的学到很多，结识了各路大牛，领略了赛博理塘的抽象文化，也认识到了自己的不足（尤其是web和pwn一道都做不出）<br>最终成绩Reverse*3+Crypto*4+Misc*3+Abstract*4=2440分，排名13位。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rever$e </tag>
            
            <tag> Crypt0 </tag>
            
            <tag> M1sc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pyautogui库查看光标位置</title>
      <link href="/2022/09/27/py3/"/>
      <url>/2022/09/27/py3/</url>
      
        <content type="html"><![CDATA[<p>使用前需安装以下两个库：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p>主要代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取鼠标位置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_mouse_position</span>():</span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 准备时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始获取鼠标位置&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># Get and print the mouse coordinates.</span></span><br><span class="line">            x, y = pyautogui.position()</span><br><span class="line">            positionStr = <span class="string">&#x27;鼠标坐标点（X,Y）为：&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(x).rjust(<span class="number">4</span>), <span class="built_in">str</span>(y).rjust(<span class="number">4</span>))</span><br><span class="line">            pix = pyautogui.screenshot().getpixel((x, y))  <span class="comment"># 获取鼠标所在屏幕点的RGB颜色</span></span><br><span class="line">            positionStr += <span class="string">&#x27; RGB:(&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">0</span>]).rjust(<span class="number">3</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">1</span>]).rjust(<span class="number">3</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">2</span>]).rjust(</span><br><span class="line">                <span class="number">3</span>) + <span class="string">&#x27;) &#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(positionStr)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)  <span class="comment"># 停顿时间</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取鼠标位置失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_mouse_position()</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;\n按Enter键退出...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个脚本其实属于一个辅助脚本。那么有什么用呢？知道了光标位置，我们可以写脚本移动光标模拟点击。而且，我比较喜欢的一个功能是它可以把光标位置所在像素点的RGB颜色读出来，好处就是方便定位判定点。通俗来讲就是如果哪个点或哪几个点变成啥颜色了则执行啥操作。<br>比如刚整的一个自动刷某安全教育视频脚本中的一段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    matchColor1 = pyautogui.pixelMatchesColor(<span class="number">1303</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    matchColor2 = pyautogui.pixelMatchesColor(<span class="number">787</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    matchColor3 = pyautogui.pixelMatchesColor(<span class="number">286</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> matchColor1 <span class="keyword">and</span> matchColor2 <span class="keyword">and</span> matchColor3:</span><br><span class="line">        <span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>作用是判断白色进度条是不是满了，满了的话执行if里的操作。<br>比如可以点下一个视频：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.moveTo(x, y, duration=<span class="number">0.25</span>)</span><br><span class="line">pyautogui.click()</span><br></pre></td></tr></table></figure><p>当然具体操作过程还有很多细节，这里不细嗦。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pillow库批量获取缩略图</title>
      <link href="/2022/09/11/py2/"/>
      <url>/2022/09/11/py2/</url>
      
        <content type="html"><![CDATA[<p>最近我校封楼，不能出去活动，正好有时间赶<a href="https://jhyzalbum.github.io">1588号信箱</a>的进程。</p><p>因为这个项目最开始被定义为图片资源类网站项目，所以相册的搭建是必不可少的。为了方便照片的显示与查看，缩略图是必不可少的。</p><p>我们使用Python的Pillow(PIL)库进行图片处理。</p><h2 id="Pillow库简介">Pillow库简介</h2><h3 id="安装">安装</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>在日常应用过程中，使用最多的是 Pillow 提供的 Image 模块，其提供了包括图像存储、变换以及一系列的相关处理功能。Pillow 使用 Image 对象来表示图像对象并基于其定义图像的属性信息以及可针对其进行的操作，后续即主要介绍通过 Image 对象可进行的图像操作。在 Python 中使用时，用户首先需从 PIL 中导入对应的 Image 模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><h3 id="基本操作">基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.打开图片</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;image1.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 2.显示图片</span></span><br><span class="line">img.show()</span><br><span class="line"><span class="comment"># 3.保存图片</span></span><br><span class="line">img.save(<span class="string">&quot;image2.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="图片变换">图片变换</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>img.transpose(Image.FLIP_LEFT_RIGHT)</td><td>水平翻转</td></tr><tr><td>img.transpose(Image.FLIP_TOP_BOTTOM)</td><td>垂直翻转</td></tr><tr><td>img.rotate(n)</td><td>逆时针旋转n度</td></tr><tr><td>img.resize( ( width, height ) )</td><td>图片缩放</td></tr><tr><td>img.crop( ( x1 , y1 , x2 , y2 ) )</td><td>图片裁剪</td></tr></tbody></table><ul><li>图片裁剪时的坐标是以左上角为原点，向右为x轴，向下为y轴的坐标系表示的。<br>e.g. <code>part = img.crop( ( 0 , 0 , 400 , 300 ) ) # 截取获得图像 img 左上角大小为 400 × 300 像素的矩形图像</code></li></ul><h3 id="图像类型转换">图像类型转换</h3><p>不同的图像数据具有不同的图像格式，进而拥有不同的组织数据的方式。对于 RGB 图像而言，图像拥有 R、G、B 三个通道，像素数据由三个对应三通道的 8 bit 数据组成；对于黑白图像而言，其每个像素由一个 8 bit 字节表示等等。在打开图像时，open 方法会自动解析图像的格式，用户可通过 Image 对象的 mode 属性获得图像的状态。</p><p>Image 对象可通过 convert 方法进行图像类型间的转换，其使用转换的目标类型的字符串为参数，返回转换后的 Image 对象，常见的类型包括 RGB(真彩)、L(黑白)、YCbCr(视频图像)、HSV(色调饱和度亮度彩色空间)。</p><p>我在尝试的过程中发现，PNG格式的图片保存为JPG会报错。经过查阅资料发现错误原因主要是因为PNG格式和JPG格式图片的通道数不同。</p><ul><li>PNG是四通道：RGBA意思是红色，绿色，蓝色，Alpha的色彩空间，Alpha指透明度</li><li>JPG是三通道：RGB意思是红色，绿色，蓝色</li></ul><p>所以，PNG格式图片要保存成JPG格式就要丢弃A通道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;image1.png&quot;</span>)</span><br><span class="line">img = img.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">img.save(<span class="string">&quot;image/image2.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="滤镜功能">滤镜功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = img.<span class="built_in">filter</span>(滤镜名称)</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/09/11/PfiCMbjA7zGsdKL.jpg" width=80% /><p>（这玩意我也没试过，但我估摸着它能解决的Ps都能解决，可能在批量处理脚本中有奇效）<s>(psyyds)</s></p><h2 id="图片处理脚本">图片处理脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 批量获取缩略图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件夹路径：&quot;</span> + sys.argv[<span class="number">1</span>] + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件夹路径：\n&quot;</span>)</span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path + os.sep + <span class="string">&quot;缩略图&quot;</span>):</span><br><span class="line">    os.mkdir(path + os.sep + <span class="string">&quot;缩略图&quot;</span>)</span><br><span class="line"><span class="comment"># 获取日期</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">date = <span class="string">&quot;_&quot;</span> + now.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">    fileList = os.listdir(path)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> fileList:</span><br><span class="line">        oldname = path + os.sep + fileList[n]</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(oldname):</span><br><span class="line">            img_path = Image.<span class="built_in">open</span>(oldname)</span><br><span class="line">            img_path = img_path.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">            <span class="comment"># 缩放及裁剪图片</span></span><br><span class="line">            width, height = img_path.size</span><br><span class="line">            <span class="keyword">if</span> width &gt; height:</span><br><span class="line">                width = width*<span class="number">300</span>//height</span><br><span class="line">                height = <span class="number">300</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                height = height*<span class="number">300</span>//width</span><br><span class="line">                width = <span class="number">300</span></span><br><span class="line">            img_size = img_path.resize((width, height))</span><br><span class="line">            <span class="keyword">if</span> width &gt; height:</span><br><span class="line">                crop = (width // <span class="number">2</span> - <span class="number">150</span>, <span class="number">0</span>, width // <span class="number">2</span> + <span class="number">150</span>, <span class="number">300</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crop = (<span class="number">0</span>, height // <span class="number">2</span> - <span class="number">150</span>, <span class="number">300</span>, height // <span class="number">2</span> + <span class="number">150</span>)</span><br><span class="line">            img_crop = img_size.crop(crop)</span><br><span class="line">            <span class="comment"># 处理图片后存储路径，以及存储格式</span></span><br><span class="line">            newname = path + os.sep + <span class="string">&#x27;缩略图&#x27;</span> + os.sep + <span class="string">&#x27;s&#x27;</span> + <span class="built_in">str</span>(n + <span class="number">1</span>) + date + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            img_crop.save(newname, <span class="string">&#x27;JPEG&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(oldname, <span class="string">&#x27;==&gt;&#x27;</span>, newname)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;路径不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n按Enter键退出...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入待处理的文件夹路径，最终会在该路径输出“缩略图”文件夹，里面是所有处理完的300*300缩略图（默认输出JPG）。缩放图片时按原图片的长宽比进行等比缩放，长宽中最小值为300，以方便裁剪。裁剪图片时默认居中裁剪，可能损失重要细节，可自行更改。</p><p>在缩略图名称中添加了日期以便按时间查找图片。</p><blockquote><p>参考文章：<br><a href="https://www.jb51.net/article/225452.htm">https://www.jb51.net/article/225452.htm</a><br><a href="https://www.jb51.net/article/169875.htm">https://www.jb51.net/article/169875.htm</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】 使用Python对文件进行批量改名</title>
      <link href="/2022/09/11/py1/"/>
      <url>/2022/09/11/py1/</url>
      
        <content type="html"><![CDATA[<p>Python在Windows系统下的路径表示回顾：反斜杠“\”是转义符，如果继续用windows习惯使用“\”表示文件路径，就会产生歧义。</p><p>所以，Windows下的原始路径：C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction</p><p>在Python中有以下三种方法表示：</p><blockquote><p>path=“C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\”<br>path=r’C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction’<br>path=‘C:/Users/LUO/Documents/GitHub/CalculatorT3000/introduction/’</p></blockquote><ul><li>使用斜杠“/”: ‘C:/Users/LUO/Documents/GitHub/CalculatorT3000/introduction/’</li><li>将反斜杠符号转义: “C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\”<br>因为反斜杠是转义符，所以两个&quot;\\&quot;就表示一个反斜杠符号</li><li>使用Python的raw string:r’C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction’<br>python下在字符串前面加上字母r，表示后面是一个原始字符串raw string，不过raw string主要是为正则表达式而不是windows路径设计的，所以这种做法尽量少用，可能会出问题</li></ul><h3 id="使用-os-模块来处理文件和目录">使用 os 模块来处理文件和目录</h3><ul><li>python 对文件进行批量改名用到的是 os 模块中的 listdir 方法和 rename 方法。</li><li>os.listdir(dir) : 获取指定目录下的所有子目录和文件名。</li><li>os.rename(原文件名，新文件名） :os.rename(src, dst) 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</li><li>os.renames() 方法用于递归重命名目录或文件，类似rename()。</li></ul><blockquote><p><code>os.renames(old, new)</code></p><p><strong>old</strong> – 要重命名的目录<br><strong>new</strong> – 文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树</p></blockquote><ul><li>os.getcwd() 返回当前工作目录</li><li>os.path 模块主要用于获取文件的属性</li></ul><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>os.path.basename(path)</td><td>返回文件名</td></tr><tr><td>os.path.dirname(path)</td><td>返回文件路径</td></tr><tr><td>os.path.exists(path)</td><td>如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False</td></tr><tr><td>os.path.getmtime(path)</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime(path)</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize(path)</td><td>返回文件大小，如果文件不存在就返回错误</td></tr><tr><td>os.path.isfile(path)</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir(path)</td><td>判断路径是否为目录</td></tr><tr><td>os.path.samefile(path1, path2)</td><td>判断目录或文件是否相同</td></tr><tr><td>os.path.sameopenfile(fp1, fp2)</td><td>判断fp1和fp2是否指向同一文件</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#三种路径表示方法</span></span><br><span class="line"><span class="comment">#path=&quot;C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\&quot;</span></span><br><span class="line"><span class="comment">#转义符的方式不能在此使用</span></span><br><span class="line"><span class="comment">#path=r&#x27;C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction\&#x27;</span></span><br><span class="line"><span class="comment">#path=&#x27;C:/Users/LUO/Documents/GitHub/CalculatorT3000/introduction/&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#从控制台输入</span></span><br><span class="line">path=<span class="built_in">input</span>(<span class="string">&quot;请输入需要改名的路径：&quot;</span>)</span><br><span class="line"><span class="comment">#判断路径是否存在</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取该目录下所有文件，存入列表中</span></span><br><span class="line">    fileList=os.listdir(path)</span><br><span class="line"> </span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置旧文件名（就是路径+文件名）</span></span><br><span class="line">        oldname=path+ os.sep + fileList[n]   <span class="comment"># os.sep添加系统分隔符</span></span><br><span class="line">        <span class="comment">#判断当前是否是文件</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(oldname):</span><br><span class="line">        </span><br><span class="line">            <span class="comment">#设置新文件名</span></span><br><span class="line">            newname=path + os.sep +<span class="string">&#x27;calc_&#x27;</span>+<span class="built_in">str</span>(n+<span class="number">1</span>)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                </span><br><span class="line">            os.rename(oldname,newname)   <span class="comment">#用os模块中的rename方法对文件改名</span></span><br><span class="line">            <span class="built_in">print</span>(oldname,<span class="string">&#x27;======&gt;&#x27;</span>,newname)</span><br><span class="line">                </span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;路径不存在&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/luolaihua2018/article/details/115413052">CSDN《使用Python对文件进行批量改名》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF初体验——MoeCTF2022</title>
      <link href="/2022/08/26/moectf2022/"/>
      <url>/2022/08/26/moectf2022/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://baike.baidu.com/item/CTF/9548546?fr=aladdin">CTF</a>（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。已经成为全球范围网络安全圈流行的竞赛形式。——百度百科</p></blockquote><p>如主办方所言，本次<a href="https://ctf.xidian.edu.cn">MoeCTF2022</a>面向全国全体准大学生举办，题目难度不高且坡度平缓，0基础新生可以通过本次比赛对<strong>信息安全夺旗赛</strong>有一个基础且全面的认识。但由于我水平有限，仅对本次比赛的一小部分题目做部分赏析。</p><h2 id="计算机技术基础">计算机技术基础</h2><h3 id="run-me-25’">run me (25’)</h3><p>下载得runme.exe文件，双击打开闪退。将文件拖入cmd回车运行得Flag。<br><img src="https://s2.loli.net/2022/08/31/LbtoWpMjxCUDTPg.png" width=80% /></p><h3 id="CCCCC-25’">CCCCC (25’)</h3><p>下载得CCCCC.c文件，配置C语言环境运行得Flag。</p><h3 id="Python-25’">Python (25’)</h3><p>同上，配置Python环境运行得Flag。</p><h3 id="run-me-2-25’">run me 2 (25’)</h3><p>配置虚拟机安装Linux系统运行文件，我选择了VMware Station。<br>安装虚拟机费了我老大劲儿，参考了一下CSDN上的<a href="https://blog.csdn.net/qq_41689437/article/details/125367151">野生安装文档</a>。<br>联网运行程序得Flag。</p><h2 id="古典密码">古典密码</h2><h3 id="ABCDEFG-25’">ABCDEFG~ (25’)</h3><p>题目描述：字母儿歌你会倒着唱吗？（大写）<br>下载解压得密文：<br>moectf{18 24 26 13 08 18 13 20 26 15 11 19 26 25 22 07 08 12 13 20}<br>对照倒序字母表数数or写脚本破解得Flag。</p><h3 id="小小凯撒-50’">小小凯撒 (50’)</h3><p>密文：kqEftuEUEftqOADDqoFRxmsOAzsDmFGxmFuAzE<br>写脚本枚举得Flag。<br>值得注意的是它的hint2：*每个单词首字母大写，其余小写，无分隔。*结合脚本与Flag可知，此处的凯撒密码如果由Z-&gt;A，则大小写改变。</p><h3 id="凯撒变异了-50’">凯撒变异了 (50’)</h3><p>题目描述：神秘的变异人凯撒来自track曾经的出发地：114514市。<br>密文：ZpyLfxGmelDeftewJwFbwDGssZszbliileadaa<br>移位为1、1、4、5、1、4……循环。<br>大小写改变同上。</p><h3 id="Vigenere-100’"><a href="https://baike.baidu.com/item/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/4905472">Vigenere</a> (100’)</h3><p>凑了半天结果网上有破解这类密码的脚本。<br>请面向搜索引擎。<br>附：<a href="https://ctf-wiki.org/crypto/classical/polyalphabetic/#vigenere">维吉尼亚密码——CTF Wiki</a></p><h2 id="现代密码学">现代密码学</h2><h3 id="密码学之入门指北-25’">密码学之入门指北 (25’)</h3><p>运行程序得Flag。</p><h2 id="隐写等杂项">隐写等杂项</h2><h3 id="Hide-and-seek-25’">Hide-and-seek (25’)</h3><img src="https://s2.loli.net/2022/09/12/Ve4DJ52pL63xQAm.webp" width=80% /><p>（笑）</p><h3 id="Misc杂项之入门指北-25’">Misc杂项之入门指北 (25’)</h3><p>密文：.-- . .-… …— — – . …–.- …- — …–.- – … …-- -.-. …–.- .---- …- -.-. -.- -.-- -.-.–<br>摩斯密码解码得Flag。</p><h3 id="Rabbit-50’">Rabbit (50’)</h3><img src="https://s2.loli.net/2022/09/09/CYm7pkNUO8RW9dP.png" width=25% /><p><s>小兔子能有什么坏心思呢？</s><br>查看十六进制编码，得到加在文件末尾的神秘字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">########(=^-^=)###U2FsdGVkX1+EPlLmNvaJK4Pe06nW0eLquWsUpdyv3fjXM2PcDBDKlXeKupnnWlFH</span><br><span class="line">ewFEGmqpGyC1VdX8</span><br></pre></td></tr></table></figure><p>Base64破解，无果，得到有意义的前缀 Salted__。放入搜索引擎，得到AES加密等花里胡哨的加密方法，其中有Rabbit加密。使用Rabbit加密解码后得Flag。<br>为什么会固定出现Salted__前缀，具体原因未知。</p><h3 id="想听点啥？-200’">想听点啥？ (200’)</h3><p>文件内容：<br>whatdoyouliketohear.zip<br>|--whatdoyouliketohear.mp3<br>|--whatdoyouliketohear.mscz<br>|-- mister.7z<br>　　　　|-- flag.txt<br>　　　　|-- <a href="http://qaq.py">qaq.py</a><br>这是本次CTF为数不多的一道音频隐写题。我本以为这题和图片隐写差不多，因为音频也可以采取LSB等隐写方式，甚至可以把信息藏入频谱图。然而我还是小了，在一遍又一遍地欣赏了MP3文件里的美妙阴乐后，方才意识到附带的.mscz文件可能有玄机。面向搜索引擎发现这是个乐谱文件，使用<a href="https://musescore.org/zh-hans">MuseScore</a>打开后，我不得不佩服出题人的艺术创作能力。</p><img src="https://s2.loli.net/2022/09/12/tEgO9jZRIe6GXxV.webp" width=80% /><p>抽象的艺术。<br>在经历了几十遍尝试后，我放弃了。因为我不理解这个圈是大写字母O还是数字0，这条线是大写字母I还是小写字母l（最后友人试出密码证明它是数字1）。<br>抽象，太抽象了。<br>更抽象的是这个名为Flag实际又不是Flag的文本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">,6+,C]:2Al2BR\B</span><br></pre></td></tr></table></figure><p>打开py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this is not flag, but real flag will be encrypted in same algorithm.</span></span><br><span class="line">flag = <span class="string">&#x27;moectf&#123;xxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">src: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([<span class="built_in">ord</span>(src[i]) ^ <span class="built_in">ord</span>(src[i-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(src))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    out.write(encrypt(flag))</span><br></pre></td></tr></table></figure><p>仔细阅读代码，发现是“已知加密算法与密文求明文”的套路。研究加密算法，encrypt函数输入string类型src形参，输出bytes类型。return后跟的括号有点多，外层是bytes([])，即将一个列表转化为字节串。内层是字符串遍历，从第二位开始，src的每一位字符的ASCII码与其前一位字符的ASCII码做按位异或运算。最后调用函数，传入实参flag，将密文写入flag.txt。<br>异或运算可逆，可以采取a^b^b=a的方式得出答案（貌似）。但是本题计算量不大<s>懒得研究逻辑</s>，我决定采用爆破的方式。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">target = <span class="built_in">bytes</span>(f1.read(), encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">testflag = <span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">28</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        testflag[i] = <span class="built_in">chr</span>(k)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ord</span>(testflag[i]) ^ <span class="built_in">ord</span>(testflag[i-<span class="number">1</span>])) == target[i-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(testflag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>易得flag.txt文本内容长度为28，与上文flag字符串的长度差一，刚好是两两按位异或后的结果长度.除去前面的&quot;moectf{“和末尾的”}&quot;，得出爆破范围为7~28。采用ASCII可显示字符逐位尝试，与前一位进行加密运算后和target对应位的值进行比较，如此反复后得出Flag。<br>需要注意的是字符串与字节串的转换。</p><h2 id="写在最后">写在最后</h2><p>截至2022/8/26/19:00，笔者共在本次比赛中获得1050分，排名73位。<br>由于时间有限，仅写出以上几道题的writeup。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypt0 </tag>
            
            <tag> M1sc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comment_tips</title>
      <link href="/2022/08/11/Comment-tips/"/>
      <url>/2022/08/11/Comment-tips/</url>
      
        <content type="html"><![CDATA[<p><font size=6><strong>评论者必读事项！</strong></font></p><p>首先感谢你到<a href="https://ch3cooh12138.github.io">Cabelis’s lab</a>参观。这是一个<s>做着玩的</s>个人博客，用于记录一些学习经验及感想等。</p><h2 id="评论前奏">评论前奏</h2><p>本网站评论系统采用<a href="https://github.com/gitalk/gitalk">Gitalk</a>插件以及<a href="https://waline.js.org">Waline</a>插件。你可以使用评论框右上角的转换按钮进行转换。<br>两个评论插件的评论彼此独立。他们都支持Markdown语法。<br>以下是关于两个评论插件的介绍，请仔细阅读。</p><h3 id="Gitalk">Gitalk</h3><p>要使用Gitalk进行评论，首先你得先有一个<a href="https://github.com">Github</a>账号。由于Gitalk的某些 <s>Bug</s> <strong>神奇特性</strong>，你需要找到一个<em>标题</em>为<strong>无空格的纯英文</strong>的post（比如本post标题为Comment_tips）下的Gitalk进行登录，否则你可能会跳转回<a href="https://ch3cooh12138.github.io">首页</a>。<br>如此，你就可以成功登录Github并使用Gitalk插件进行评论。</p><blockquote><p>Q.为什么Github登不上/Gitalk加载很慢？<br>A.建议挂个梯子。</p></blockquote><h3 id="Waline">Waline</h3><p>使用此插件进行评论不需要登录任何社交账号（当然也可以登录，我支持你这么做），但是需要填写评论时的昵称与邮箱（你当然可以乱填，匿名评论是你的权利）。Waline会通过邮箱地址自动获取你的头像作为评论头像。<br>无论你是否匿名评论，Waline都会自动获取你的IP地址、浏览器版本等信息。每个IP每分钟只能评论一次。<br>Waline的GIF功能（表情包功能）在国内不可用。如果你要插入表情包的话，请使用Markdown语法。</p><h3 id="关于Markdown">关于Markdown</h3><p>虽然你可以使用纯文本进行评论编辑，但是我还是建议你使用<a href="http://markdown.p2hp.com">Markdown</a>。这是一个易学且易读的标记语言。通过使用Markdown，你可以写出<strong>粗体</strong>，<em>斜体</em>，<s>删除线</s>等特殊文字，对文字加上<a href="https://ch3cooh12138.github.io">链接</a>。<br><code># you can even use it to code!</code><br>如果你要使用Markdown插入图片的话，建议你使用图床（e.g.<a href="https://sm.ms">SM.MS</a>)。将图片上传至图床后复制链接，然后用特定格式插入图片。</p><p>Markdown快速入门：<a href="https://www.markdowntutorial.com">点我！</a></p><h2 id="评论守则">评论守则</h2><blockquote><p>互联网不是法外之地。</p></blockquote><ul><li>请不要进行恶意评论，包括但不限于诅咒、人肉等。</li><li>请不要发布瑟琴、爆利等内容。</li><li>想到再加…</li></ul><h2 id="作者的话">作者的话</h2><p>本人是第一次做这类项目，如果做得不好敬请见谅。<br>如果你有任何建议，欢迎你<a href="mailto:1225610429@qq.com">发邮件给我</a>！<br>Cabelis祝你网上冲浪愉快。😉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/08/11/Hello%20World!/"/>
      <url>/2022/08/11/Hello%20World!/</url>
      
        <content type="html"><![CDATA[<center><font size=6>开发者日志</font></center><h2 id="第一天">第一天</h2><p>2022.8.10<br>属于是把一些基本内容搞好了。特别累今天。睡觉明天再写。</p><h2 id="第二天">第二天</h2><p>2022.8.11<br>加入了评论系统，具体参照Comment_tips。<br>还加了一些乱七八糟的东西。<br>*（哈欠）*已经熬了两个大夜了，离左嘴角15mm的地方长了颗痘。<br>敷个面膜早点睡罢。</p><h2 id="第三天">第三天</h2><p>2022.8.12<br>今天在做丽泽八方的推文，没有碰这个网站。<br>又是很累的一天呢。</p><h2 id="第四天">第四天</h2><p>2022.8.13<br><s>新增levere评论系统，由于太慢&amp;太丑被弃用</s><br>新增waline评论系统，可匿名评论，目前后端未配置完成，明天再说。</p><h2 id="第N天">第N天</h2><p>2022.8.?<br>评论系统已基本部署完成。</p><h2 id="第N-1天">第N+1天</h2><p>2022.8.?<br>准备“1588号信箱”项目的开发。</p><h2 id="第不知道多少天">第不知道多少天</h2><p>2022.11.-1<br>waline评论系统的数据库因为太久没有操作被归档了（惨）<br>积极评论罢。</p><h2 id="第不知道多少-8天">第不知道多少+8天</h2><p>2022.11.08<br>添加域名<code>cabelis.ink</code>。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
