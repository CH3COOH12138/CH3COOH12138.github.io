<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tsctf-j_wp</title>
      <link href="/2022/10/17/tsctf-j-wp/"/>
      <url>/2022/10/17/tsctf-j-wp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言scanf()和printf()函数学习总结</title>
      <link href="/2022/10/11/c1/"/>
      <url>/2022/10/11/c1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pyautogui库查看光标位置</title>
      <link href="/2022/09/27/py3/"/>
      <url>/2022/09/27/py3/</url>
      
        <content type="html"><![CDATA[<p>使用前需安装以下两个库：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p>主要代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取鼠标位置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_mouse_position</span>():</span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 准备时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始获取鼠标位置&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># Get and print the mouse coordinates.</span></span><br><span class="line">            x, y = pyautogui.position()</span><br><span class="line">            positionStr = <span class="string">&#x27;鼠标坐标点（X,Y）为：&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(x).rjust(<span class="number">4</span>), <span class="built_in">str</span>(y).rjust(<span class="number">4</span>))</span><br><span class="line">            pix = pyautogui.screenshot().getpixel((x, y))  <span class="comment"># 获取鼠标所在屏幕点的RGB颜色</span></span><br><span class="line">            positionStr += <span class="string">&#x27; RGB:(&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">0</span>]).rjust(<span class="number">3</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">1</span>]).rjust(<span class="number">3</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(pix[<span class="number">2</span>]).rjust(</span><br><span class="line">                <span class="number">3</span>) + <span class="string">&#x27;) &#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(positionStr)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)  <span class="comment"># 停顿时间</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取鼠标位置失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_mouse_position()</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;\n按Enter键退出...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个脚本其实属于一个辅助脚本。那么有什么用呢？知道了光标位置，我们可以写脚本移动光标模拟点击。而且，我比较喜欢的一个功能是它可以把光标位置所在像素点的RGB颜色读出来，好处就是方便定位判定点。通俗来讲就是如果哪个点或哪几个点变成啥颜色了则执行啥操作。<br>比如刚整的一个自动刷某安全教育视频脚本中的一段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    matchColor1 = pyautogui.pixelMatchesColor(<span class="number">1303</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    matchColor2 = pyautogui.pixelMatchesColor(<span class="number">787</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    matchColor3 = pyautogui.pixelMatchesColor(<span class="number">286</span>, <span class="number">976</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), tolerance=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> matchColor1 <span class="keyword">and</span> matchColor2 <span class="keyword">and</span> matchColor3:</span><br><span class="line">        <span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>作用是判断白色进度条是不是满了，满了的话执行if里的操作。<br>比如可以点下一个视频：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.moveTo(x, y, duration=<span class="number">0.25</span>)</span><br><span class="line">pyautogui.click()</span><br></pre></td></tr></table></figure><p>当然具体操作过程还有很多细节，这里不细嗦。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pillow库批量获取缩略图</title>
      <link href="/2022/09/11/py2/"/>
      <url>/2022/09/11/py2/</url>
      
        <content type="html"><![CDATA[<p>最近我校封楼，不能出去活动，正好有时间赶<a href="https://jhyzalbum.github.io/">1588号信箱</a>的进程。  </p><p>因为这个项目最开始被定义为图片资源类网站项目，所以相册的搭建是必不可少的。为了方便照片的显示与查看，缩略图是必不可少的。</p><p>我们使用Python的Pillow(PIL)库进行图片处理。</p><h2 id="Pillow库简介"><a href="#Pillow库简介" class="headerlink" title="Pillow库简介"></a>Pillow库简介</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在日常应用过程中，使用最多的是 Pillow 提供的 Image 模块，其提供了包括图像存储、变换以及一系列的相关处理功能。Pillow 使用 Image 对象来表示图像对象并基于其定义图像的属性信息以及可针对其进行的操作，后续即主要介绍通过 Image 对象可进行的图像操作。在 Python 中使用时，用户首先需从 PIL 中导入对应的 Image 模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.打开图片</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;image1.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 2.显示图片</span></span><br><span class="line">img.show()</span><br><span class="line"><span class="comment"># 3.保存图片</span></span><br><span class="line">img.save(<span class="string">&quot;image2.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="图片变换"><a href="#图片变换" class="headerlink" title="图片变换"></a>图片变换</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>img.transpose(Image.FLIP_LEFT_RIGHT)</td><td>水平翻转</td></tr><tr><td>img.transpose(Image.FLIP_TOP_BOTTOM)</td><td>垂直翻转</td></tr><tr><td>img.rotate(n)</td><td>逆时针旋转n度</td></tr><tr><td>img.resize( ( width, height ) )</td><td>图片缩放</td></tr><tr><td>img.crop( ( x1 , y1 , x2 , y2 ) )</td><td>图片裁剪</td></tr></tbody></table><ul><li>图片裁剪时的坐标是以左上角为原点，向右为x轴，向下为y轴的坐标系表示的。<br>e.g. <code>part = img.crop( ( 0 , 0 , 400 , 300 ) ) # 截取获得图像 img 左上角大小为 400 × 300 像素的矩形图像</code></li></ul><h3 id="图像类型转换"><a href="#图像类型转换" class="headerlink" title="图像类型转换"></a>图像类型转换</h3><p>不同的图像数据具有不同的图像格式，进而拥有不同的组织数据的方式。对于 RGB 图像而言，图像拥有 R、G、B 三个通道，像素数据由三个对应三通道的 8 bit 数据组成；对于黑白图像而言，其每个像素由一个 8 bit 字节表示等等。在打开图像时，open 方法会自动解析图像的格式，用户可通过 Image 对象的 mode 属性获得图像的状态。</p><p>Image 对象可通过 convert 方法进行图像类型间的转换，其使用转换的目标类型的字符串为参数，返回转换后的 Image 对象，常见的类型包括 RGB(真彩)、L(黑白)、YCbCr(视频图像)、HSV(色调饱和度亮度彩色空间)。</p><p>我在尝试的过程中发现，PNG格式的图片保存为JPG会报错。经过查阅资料发现错误原因主要是因为PNG格式和JPG格式图片的通道数不同。</p><ul><li>PNG是四通道：RGBA意思是红色，绿色，蓝色，Alpha的色彩空间，Alpha指透明度</li><li>JPG是三通道：RGB意思是红色，绿色，蓝色</li></ul><p>所以，PNG格式图片要保存成JPG格式就要丢弃A通道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;image1.png&quot;</span>)</span><br><span class="line">img = img.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">img.save(<span class="string">&quot;image/image2.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="滤镜功能"><a href="#滤镜功能" class="headerlink" title="滤镜功能"></a>滤镜功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = img.<span class="built_in">filter</span>(滤镜名称)</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/09/11/PfiCMbjA7zGsdKL.jpg" width=80% /><p>（这玩意我也没试过，但我估摸着它能解决的Ps都能解决，可能在批量处理脚本中有奇效）<del>(psyyds)</del></p><h2 id="图片处理脚本"><a href="#图片处理脚本" class="headerlink" title="图片处理脚本"></a>图片处理脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 批量获取缩略图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件夹路径：&quot;</span> + sys.argv[<span class="number">1</span>] + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件夹路径：\n&quot;</span>)</span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path + os.sep + <span class="string">&quot;缩略图&quot;</span>):</span><br><span class="line">    os.mkdir(path + os.sep + <span class="string">&quot;缩略图&quot;</span>)</span><br><span class="line"><span class="comment"># 获取日期</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">date = <span class="string">&quot;_&quot;</span> + now.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">    fileList = os.listdir(path)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> fileList:</span><br><span class="line">        oldname = path + os.sep + fileList[n]</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(oldname):</span><br><span class="line">            img_path = Image.<span class="built_in">open</span>(oldname)</span><br><span class="line">            img_path = img_path.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">            <span class="comment"># 缩放及裁剪图片</span></span><br><span class="line">            width, height = img_path.size</span><br><span class="line">            <span class="keyword">if</span> width &gt; height:</span><br><span class="line">                width = width*<span class="number">300</span>//height</span><br><span class="line">                height = <span class="number">300</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                height = height*<span class="number">300</span>//width</span><br><span class="line">                width = <span class="number">300</span></span><br><span class="line">            img_size = img_path.resize((width, height))</span><br><span class="line">            <span class="keyword">if</span> width &gt; height:</span><br><span class="line">                crop = (width // <span class="number">2</span> - <span class="number">150</span>, <span class="number">0</span>, width // <span class="number">2</span> + <span class="number">150</span>, <span class="number">300</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crop = (<span class="number">0</span>, height // <span class="number">2</span> - <span class="number">150</span>, <span class="number">300</span>, height // <span class="number">2</span> + <span class="number">150</span>)</span><br><span class="line">            img_crop = img_size.crop(crop)</span><br><span class="line">            <span class="comment"># 处理图片后存储路径，以及存储格式</span></span><br><span class="line">            newname = path + os.sep + <span class="string">&#x27;缩略图&#x27;</span> + os.sep + <span class="string">&#x27;s&#x27;</span> + <span class="built_in">str</span>(n + <span class="number">1</span>) + date + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            img_crop.save(newname, <span class="string">&#x27;JPEG&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(oldname, <span class="string">&#x27;==&gt;&#x27;</span>, newname)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;路径不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n按Enter键退出...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入待处理的文件夹路径，最终会在该路径输出“缩略图”文件夹，里面是所有处理完的300*300缩略图（默认输出JPG）。缩放图片时按原图片的长宽比进行等比缩放，长宽中最小值为300，以方便裁剪。裁剪图片时默认居中裁剪，可能损失重要细节，可自行更改。</p><p>在缩略图名称中添加了日期以便按时间查找图片。</p><blockquote><p>参考文章：<br><a href="https://www.jb51.net/article/225452.htm">https://www.jb51.net/article/225452.htm</a><br><a href="https://www.jb51.net/article/169875.htm">https://www.jb51.net/article/169875.htm</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】 使用Python对文件进行批量改名</title>
      <link href="/2022/09/11/py1/"/>
      <url>/2022/09/11/py1/</url>
      
        <content type="html"><![CDATA[<p>Python在Windows系统下的路径表示回顾：反斜杠“\”是转义符，如果继续用windows习惯使用“\”表示文件路径，就会产生歧义。</p><p>所以，Windows下的原始路径：C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction</p><p>在Python中有以下三种方法表示：</p><blockquote><p>path&#x3D;”C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\“<br>path&#x3D;r’C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction&#39;<br>path&#x3D;’C:&#x2F;Users&#x2F;LUO&#x2F;Documents&#x2F;GitHub&#x2F;CalculatorT3000&#x2F;introduction&#x2F;‘</p></blockquote><ul><li>使用斜杠“&#x2F;”: ‘C:&#x2F;Users&#x2F;LUO&#x2F;Documents&#x2F;GitHub&#x2F;CalculatorT3000&#x2F;introduction&#x2F;‘  </li><li>将反斜杠符号转义: “C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\“<br>因为反斜杠是转义符，所以两个”\\“就表示一个反斜杠符号  </li><li>使用Python的raw string:r’C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction&#39;<br>python下在字符串前面加上字母r，表示后面是一个原始字符串raw string，不过raw string主要是为正则表达式而不是windows路径设计的，所以这种做法尽量少用，可能会出问题</li></ul><h3 id="使用-os-模块来处理文件和目录"><a href="#使用-os-模块来处理文件和目录" class="headerlink" title="使用 os 模块来处理文件和目录"></a>使用 os 模块来处理文件和目录</h3><ul><li>python 对文件进行批量改名用到的是 os 模块中的 listdir 方法和 rename 方法。</li><li>os.listdir(dir) : 获取指定目录下的所有子目录和文件名。</li><li>os.rename(原文件名，新文件名） :os.rename(src, dst) 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</li><li>os.renames() 方法用于递归重命名目录或文件，类似rename()。</li></ul><blockquote><p><code>os.renames(old, new)</code></p><p><strong>old</strong> – 要重命名的目录<br><strong>new</strong> – 文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树</p></blockquote><ul><li>os.getcwd() 返回当前工作目录</li><li>os.path 模块主要用于获取文件的属性</li></ul><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>os.path.basename(path)</td><td>返回文件名</td></tr><tr><td>os.path.dirname(path)</td><td>返回文件路径</td></tr><tr><td>os.path.exists(path)</td><td>如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False</td></tr><tr><td>os.path.getmtime(path)</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime(path)</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize(path)</td><td>返回文件大小，如果文件不存在就返回错误</td></tr><tr><td>os.path.isfile(path)</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir(path)</td><td>判断路径是否为目录</td></tr><tr><td>os.path.samefile(path1, path2)</td><td>判断目录或文件是否相同</td></tr><tr><td>os.path.sameopenfile(fp1, fp2)</td><td>判断fp1和fp2是否指向同一文件</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#三种路径表示方法</span></span><br><span class="line"><span class="comment">#path=&quot;C:\\Users\\LUO\\Documents\\GitHub\\CalculatorT3000\\introduction\\&quot;</span></span><br><span class="line"><span class="comment">#转义符的方式不能在此使用</span></span><br><span class="line"><span class="comment">#path=r&#x27;C:\Users\LUO\Documents\GitHub\CalculatorT3000\introduction\&#x27;</span></span><br><span class="line"><span class="comment">#path=&#x27;C:/Users/LUO/Documents/GitHub/CalculatorT3000/introduction/&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#从控制台输入</span></span><br><span class="line">path=<span class="built_in">input</span>(<span class="string">&quot;请输入需要改名的路径：&quot;</span>)</span><br><span class="line"><span class="comment">#判断路径是否存在</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取该目录下所有文件，存入列表中</span></span><br><span class="line">    fileList=os.listdir(path)</span><br><span class="line"> </span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置旧文件名（就是路径+文件名）</span></span><br><span class="line">        oldname=path+ os.sep + fileList[n]   <span class="comment"># os.sep添加系统分隔符</span></span><br><span class="line">        <span class="comment">#判断当前是否是文件</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(oldname):</span><br><span class="line">        </span><br><span class="line">            <span class="comment">#设置新文件名</span></span><br><span class="line">            newname=path + os.sep +<span class="string">&#x27;calc_&#x27;</span>+<span class="built_in">str</span>(n+<span class="number">1</span>)+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                </span><br><span class="line">            os.rename(oldname,newname)   <span class="comment">#用os模块中的rename方法对文件改名</span></span><br><span class="line">            <span class="built_in">print</span>(oldname,<span class="string">&#x27;======&gt;&#x27;</span>,newname)</span><br><span class="line">                </span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;路径不存在&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/luolaihua2018/article/details/115413052">CSDN《使用Python对文件进行批量改名》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF初体验——MoeCTF2022</title>
      <link href="/2022/08/26/moectf2022/"/>
      <url>/2022/08/26/moectf2022/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://baike.baidu.com/item/CTF/9548546?fr=aladdin">CTF</a>（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。已经成为全球范围网络安全圈流行的竞赛形式。——百度百科  </p></blockquote><p>如主办方所言，本次<a href="https://ctf.xidian.edu.cn/">MoeCTF2022</a>面向全国全体准大学生举办，题目难度不高且坡度平缓，0基础新生可以通过本次比赛对<strong>信息安全夺旗赛</strong>有一个基础且全面的认识。但由于我水平有限，仅对本次比赛的一小部分题目做部分赏析。  </p><h2 id="计算机技术基础"><a href="#计算机技术基础" class="headerlink" title="计算机技术基础"></a>计算机技术基础</h2><h3 id="run-me-25’"><a href="#run-me-25’" class="headerlink" title="run me (25’)"></a>run me (25’)</h3><p>下载得runme.exe文件，双击打开闪退。将文件拖入cmd回车运行得Flag。<br><img src="https://s2.loli.net/2022/08/31/LbtoWpMjxCUDTPg.png" width=80% /></p><h3 id="CCCCC-25’"><a href="#CCCCC-25’" class="headerlink" title="CCCCC (25’)"></a>CCCCC (25’)</h3><p>下载得CCCCC.c文件，配置C语言环境运行得Flag。  </p><h3 id="Python-25’"><a href="#Python-25’" class="headerlink" title="Python (25’)"></a>Python (25’)</h3><p>同上，配置Python环境运行得Flag。  </p><h3 id="run-me-2-25’"><a href="#run-me-2-25’" class="headerlink" title="run me 2 (25’)"></a>run me 2 (25’)</h3><p>配置虚拟机安装Linux系统运行文件，我选择了VMware Station。<br>安装虚拟机费了我老大劲儿，参考了一下CSDN上的<a href="https://blog.csdn.net/qq_41689437/article/details/125367151">野生安装文档</a>。<br>联网运行程序得Flag。</p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h3 id="ABCDEFG-25’"><a href="#ABCDEFG-25’" class="headerlink" title="ABCDEFG~ (25’)"></a>ABCDEFG~ (25’)</h3><p>题目描述：字母儿歌你会倒着唱吗？（大写）<br>下载解压得密文：<br>moectf{18 24 26 13 08 18 13 20 26 15 11 19 26 25 22 07 08 12 13 20}<br>对照倒序字母表数数or写脚本破解得Flag。</p><h3 id="小小凯撒-50’"><a href="#小小凯撒-50’" class="headerlink" title="小小凯撒 (50’)"></a>小小凯撒 (50’)</h3><p>密文：kqEftuEUEftqOADDqoFRxmsOAzsDmFGxmFuAzE<br>写脚本枚举得Flag。<br>值得注意的是它的hint2：<em>每个单词首字母大写，其余小写，无分隔。</em>结合脚本与Flag可知，此处的凯撒密码如果由Z-&gt;A，则大小写改变。</p><h3 id="凯撒变异了-50’"><a href="#凯撒变异了-50’" class="headerlink" title="凯撒变异了 (50’)"></a>凯撒变异了 (50’)</h3><p>题目描述：神秘的变异人凯撒来自track曾经的出发地：114514市。<br>密文：ZpyLfxGmelDeftewJwFbwDGssZszbliileadaa<br>移位为1、1、4、5、1、4……循环。<br>大小写改变同上。</p><h3 id="Vigenere-100’"><a href="#Vigenere-100’" class="headerlink" title="Vigenere (100’)"></a><a href="https://baike.baidu.com/item/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/4905472">Vigenere</a> (100’)</h3><p>凑了半天结果网上有破解这类密码的脚本。<br>请面向搜索引擎。<br>附：<a href="https://ctf-wiki.org/crypto/classical/polyalphabetic/#vigenere">维吉尼亚密码——CTF Wiki</a></p><h2 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h2><h3 id="密码学之入门指北-25’"><a href="#密码学之入门指北-25’" class="headerlink" title="密码学之入门指北 (25’)"></a>密码学之入门指北 (25’)</h3><p>运行程序得Flag。</p><h2 id="隐写等杂项"><a href="#隐写等杂项" class="headerlink" title="隐写等杂项"></a>隐写等杂项</h2><h3 id="Hide-and-seek-25’"><a href="#Hide-and-seek-25’" class="headerlink" title="Hide-and-seek (25’)"></a>Hide-and-seek (25’)</h3><img src="https://s2.loli.net/2022/09/12/Ve4DJ52pL63xQAm.webp" width=80% /><p>（笑）</p><h3 id="Misc杂项之入门指北-25’"><a href="#Misc杂项之入门指北-25’" class="headerlink" title="Misc杂项之入门指北 (25’)"></a>Misc杂项之入门指北 (25’)</h3><p>密文：.– . .-.. ..— — – . ..–.- ….- — ..–.- – .. …– -.-. ..–.- .—- ..- -.-. -.- -.– -.-.–<br>摩斯密码解码得Flag。</p><h3 id="Rabbit-50’"><a href="#Rabbit-50’" class="headerlink" title="Rabbit (50’)"></a>Rabbit (50’)</h3><img src="https://s2.loli.net/2022/09/09/CYm7pkNUO8RW9dP.png" width=25% /><p><del>小兔子能有什么坏心思呢？</del><br>查看十六进制编码，得到加在文件末尾的神秘字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">########(=^-^=)###U2FsdGVkX1+EPlLmNvaJK4Pe06nW0eLquWsUpdyv3fjXM2PcDBDKlXeKupnnWlFH</span><br><span class="line">ewFEGmqpGyC1VdX8</span><br></pre></td></tr></table></figure><p>Base64破解，无果，得到有意义的前缀 Salted__。放入搜索引擎，得到AES加密等花里胡哨的加密方法，其中有Rabbit加密。使用Rabbit加密解码后得Flag。<br>为什么会固定出现Salted__前缀，具体原因未知。</p><h3 id="想听点啥？-200’"><a href="#想听点啥？-200’" class="headerlink" title="想听点啥？ (200’)"></a>想听点啥？ (200’)</h3><p>文件内容：<br>whatdoyouliketohear.zip<br>|–whatdoyouliketohear.mp3<br>|–whatdoyouliketohear.mscz<br>|– mister.7z<br>　　　　|– flag.txt<br>　　　　|– qaq.py<br>这是本次CTF为数不多的一道音频隐写题。我本以为这题和图片隐写差不多，因为音频也可以采取LSB等隐写方式，甚至可以把信息藏入频谱图。然而我还是小了，在一遍又一遍地欣赏了MP3文件里的美妙阴乐后，方才意识到附带的.mscz文件可能有玄机。面向搜索引擎发现这是个乐谱文件，使用<a href="https://musescore.org/zh-hans">MuseScore</a>打开后，我不得不佩服出题人的艺术创作能力。<br><font size=6><strong>未成年人请在大人陪同下观看</strong></font></p><img src="https://s2.loli.net/2022/09/12/tEgO9jZRIe6GXxV.webp" width=80% /><p>抽象的艺术。<br>原谅我不懂欣赏，但至少拿到压缩包密码了不是吗？<br>然而，在经历了几十遍尝试后，我放弃了。因为我不理解这个圈是大写字母O还是数字0，这条线是大写字母I还是小写字母l（最后友人试出密码证明它是数字1）。<br>抽象，太抽象了。<br>更抽象的是这个名为Flag实际又不是Flag的文本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">,6+,C]:2Al2BR\B</span><br></pre></td></tr></table></figure><p>打开py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this is not flag, but real flag will be encrypted in same algorithm.</span></span><br><span class="line">flag = <span class="string">&#x27;moectf&#123;xxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">src: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([<span class="built_in">ord</span>(src[i]) ^ <span class="built_in">ord</span>(src[i-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(src))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    out.write(encrypt(flag))</span><br></pre></td></tr></table></figure><p>仔细阅读代码，发现是“已知加密算法与密文求明文”的套路。研究加密算法，encrypt函数输入string类型src形参，输出bytes类型。return后跟的括号有点多，外层是bytes([])，即将一个列表转化为字节串。内层是字符串遍历，从第二位开始，src的每一位字符的ASCII码与其前一位字符的ASCII码做按位异或运算。最后调用函数，传入实参flag，将密文写入flag.txt。<br>异或运算可逆，可以采取a^b^b&#x3D;a的方式得出答案（貌似）。但是本题计算量不大<del>懒得研究逻辑</del>，我决定采用爆破的方式。<br>代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">target = <span class="built_in">bytes</span>(f1.read(), encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">testflag = <span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">28</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        testflag[i] = <span class="built_in">chr</span>(k)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ord</span>(testflag[i]) ^ <span class="built_in">ord</span>(testflag[i-<span class="number">1</span>])) == target[i-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(testflag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>易得flag.txt文本内容长度为28，与上文flag字符串的长度差一，刚好是两两按位异或后的结果长度.除去前面的”moectf{“和末尾的”}”，得出爆破范围为7~28。采用ASCII可显示字符逐位尝试，与前一位进行加密运算后和target对应位的值进行比较，如此反复后得出Flag。<br>需要注意的是字符串与字节串的转换。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>截至2022&#x2F;8&#x2F;26&#x2F;19:00，笔者共在本次比赛中获得1050分，排名73位。<br>由于时间有限，仅写出以上几道题的writeup。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comment_tips</title>
      <link href="/2022/08/11/Comment-tips/"/>
      <url>/2022/08/11/Comment-tips/</url>
      
        <content type="html"><![CDATA[<p><font size=6><strong>评论者必读事项！</strong></font></p><p>首先感谢你到<a href="https://ch3cooh12138.github.io/">Cabelis’s lab</a>参观。这是一个<del>做着玩的</del>个人博客，用于记录一些学习经验及感想等。  </p><h2 id="评论前奏"><a href="#评论前奏" class="headerlink" title="评论前奏"></a>评论前奏</h2><p>本网站评论系统采用<a href="https://github.com/gitalk/gitalk">Gitalk</a>插件以及<a href="https://waline.js.org/">Waline</a>插件。你可以使用评论框右上角的转换按钮进行转换。<br>两个评论插件的评论彼此独立。他们都支持Markdown语法。<br>以下是关于两个评论插件的介绍，请仔细阅读。</p><h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h3><p>要使用Gitalk进行评论，首先你得先有一个<a href="https://github.com/">Github</a>账号。由于Gitalk的某些 <del>Bug</del> <strong>神奇特性</strong>，你需要找到一个<em>标题</em>为<strong>无空格的纯英文</strong>的post（比如本post标题为Comment_tips）下的Gitalk进行登录，否则你可能会跳转回<a href="https://ch3cooh12138.github.io/">首页</a>。<br>如此，你就可以成功登录Github并使用Gitalk插件进行评论。 </p><blockquote><p>Q.为什么Github登不上&#x2F;Gitalk加载很慢？<br>A.建议挂个梯子。</p></blockquote><h3 id="Waline"><a href="#Waline" class="headerlink" title="Waline"></a>Waline</h3><p>使用此插件进行评论不需要登录任何社交账号（当然也可以登录，我支持你这么做），但是需要填写评论时的昵称与邮箱（你当然可以乱填，匿名评论是你的权利）。Waline会通过邮箱地址自动获取你的头像作为评论头像。<br>无论你是否匿名评论，Waline都会自动获取你的IP地址、浏览器版本等信息。每个IP每分钟只能评论一次。<br>Waline的GIF功能（表情包功能）在国内不可用。如果你要插入表情包的话，请使用Markdown语法。  </p><h3 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h3><p>虽然你可以使用纯文本进行评论编辑，但是我还是建议你使用<a href="http://markdown.p2hp.com/">Markdown</a>。这是一个易学且易读的标记语言。通过使用Markdown，你可以写出<strong>粗体</strong>，<em>斜体</em>，<del>删除线</del>等特殊文字，对文字加上<a href="https://ch3cooh12138.github.io/">链接</a>。<br><code># you can even use it to code!</code><br>如果你要使用Markdown插入图片的话，建议你使用图床（e.g.<a href="https://sm.ms/">SM.MS</a>)。将图片上传至图床后复制链接，然后用特定格式插入图片。  </p><p>Markdown快速入门：<a href="https://www.markdowntutorial.com/">点我！</a>  </p><h2 id="评论守则"><a href="#评论守则" class="headerlink" title="评论守则"></a>评论守则</h2><blockquote><p>互联网不是法外之地。</p></blockquote><ul><li>请不要进行恶意评论，包括但不限于诅咒、人肉等。</li><li>请不要发布瑟琴、爆利等内容。</li><li>想到再加…</li></ul><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>本人是第一次做这类项目，如果做得不好敬请见谅。<br>如果你有任何建议，欢迎你<a href="mailto:1225610429@qq.com">发邮件给我</a>！<br>Cabelis祝你网上冲浪愉快。😉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/08/11/Hello%20World!/"/>
      <url>/2022/08/11/Hello%20World!/</url>
      
        <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>2022.8.10<br>属于是把一些基本内容搞好了。特别累今天。睡觉明天再写。  </p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>2022.8.11<br>加入了评论系统，具体参照Comment_tips。<br>还加了一些乱七八糟的东西。<br><em>（哈欠）</em>已经熬了两个大夜了，离左嘴角15mm的地方长了颗痘。<br>敷个面膜早点睡罢。  </p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>2022.8.12<br>今天在做丽泽八方的推文，没有碰这个网站。<br>又是很累的一天呢。</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>2022.8.13<br><del>新增levere评论系统，由于太慢&amp;太丑被弃用</del><br>新增waline评论系统，可匿名评论，目前后端未配置完成，明天再说。</p><h2 id="第N天"><a href="#第N天" class="headerlink" title="第N天"></a>第N天</h2><p>2022.8.?<br>评论系统已基本部署完成。  </p><h2 id="第N-1天"><a href="#第N-1天" class="headerlink" title="第N+1天"></a>第N+1天</h2><p>2022.8.?<br>准备“金中相册”项目的开发。</p><h2 id="此帖已停更。"><a href="#此帖已停更。" class="headerlink" title="此帖已停更。"></a>此帖已停更。</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
