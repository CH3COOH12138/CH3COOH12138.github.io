<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cabelis&#39;s lab</title>
    <link>http://CH3COOH12138.github.io/</link>
    
    <atom:link href="http://ch3cooh12138.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 04 Jul 2023 12:51:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>如来来没来？</title>
      <link>http://ch3cooh12138.github.io/2023/07/04/novel-rulai/</link>
      <guid>http://ch3cooh12138.github.io/2023/07/04/novel-rulai/</guid>
      <pubDate>Tue, 04 Jul 2023 12:43:33 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;中国人认为宇宙万法的那个源头，它是什么？或许，是循环，是轮回，是无穷无尽的起起伏伏，起源于微妙莫测的宇宙意识。在这个漩涡之中，一切事物皆陷入沉睡，唯有大道悠然自在，却又无言以对。&lt;/p&gt;
&lt;p&gt;那个源头，称之为如来，无始无终，犹如宇宙中的黑洞，吸纳一切光明，深邃莫测。虚无且</description>
        
      
      
      
      <content:encoded><![CDATA[<p>中国人认为宇宙万法的那个源头，它是什么？或许，是循环，是轮回，是无穷无尽的起起伏伏，起源于微妙莫测的宇宙意识。在这个漩涡之中，一切事物皆陷入沉睡，唯有大道悠然自在，却又无言以对。</p><p>那个源头，称之为如来，无始无终，犹如宇宙中的黑洞，吸纳一切光明，深邃莫测。虚无且虚空，无处不在，无形无影，却在每个人心中萌生。世人们在朝拜，在祈祷，在想象，却无法明确他是否真正来过。</p><p>岁月流转，如同磨轮，一次次剥离万物之上的皮囊，抵达其最深处，寻求那难以捉摸的实质。在这场探寻中，人们时而疑惑，时而恍惚，仿佛如来曾经降临，却又似乎一切都只是虚幻的泡影。</p><p>曾经人们如此深信如来来过，每一缕善念、每一丝善行都是他的证据。如来就在大地、天空、河流、微风，甚至在每一个生命的呼吸中。可是，如来，祂又真的来过吗？</p><p>人们开始对诸多事物产生疑惑：祂虚无缥缈的存在，祂无比强大的力量，祂无穷无尽的智慧。然而，就在这最深的困境之中，一种似乎来自如来的力量悄然涌现。</p><p>绝望和失望之中，人们开始明白，如来并不是某个形象、某个实体，而是一种无形的力量，一种无可言喻的悟性。他既存在于外在世界，又存在于内心深处。他是每个人心中的寄托，是普世的信仰。</p><p>人们再次陷入沉思和疑惑之中。直到一天，一个声音打破了沉默。“如来来没来？”</p><p>“如来。”</p><p><em>Generated by ChatGPT-4</em></p>]]></content:encoded>
      
      
      
      
      <comments>http://ch3cooh12138.github.io/2023/07/04/novel-rulai/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unicorn引擎初探</title>
      <link>http://ch3cooh12138.github.io/2023/06/19/unicorn/</link>
      <guid>http://ch3cooh12138.github.io/2023/06/19/unicorn/</guid>
      <pubDate>Mon, 19 Jun 2023 09:46:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Unicorn简介&quot;&gt;Unicorn简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.unicorn-engine.org&quot;&gt;Unicorn&lt;/a&gt;是一个轻量级，多平台，多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，就比</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Unicorn简介">Unicorn简介</h2><p><a href="https://www.unicorn-engine.org">Unicorn</a>是一个轻量级，多平台，多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，就比如说我们需要调试某个程序，常见的调试器需要配置可执行文件需要的环境并且还需要考虑一些恶意代码导致的安全问题，但是通过Unicorn我们就可以单纯的模拟代码的执行（甚至可以指定从某个地址开始执行）而不需要考虑这些问题。<br>它的亮点有：</p><ul><li>支持多种架构: Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64).</li><li>对Windows和nix系统(已确认包含Mac OSX, Linux, BSD &amp; Solaris)的原生支持</li><li>具有平台独立且简洁易于使用的API</li><li>使用JIT编译技术, 性能表现优异</li></ul><h2 id="技术原理">技术原理</h2><h3 id="虚拟内存">虚拟内存</h3><p>Unicorn采用虚拟内存机制，使得虚拟CPU的内存与真实CPU的内存隔离。使用时，需要手动映射内存并写入数据，随后才能从指定地址开始模拟。</p><p>Unicorn 使用如下API来操作内存:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uc_mem_map</span><br><span class="line">uc_mem_read</span><br><span class="line">uc_mem_write</span><br></pre></td></tr></table></figure><p>使用uc_mem_map映射内存的时候，address 与 size 都需要与0x1000对齐，也就是0x1000的整数倍，否则会报UC_ERR_ARG 异常。</p><h3 id="Hook机制">Hook机制</h3><p>Unicorn的Hook机制为编程控制虚拟CPU提供了便利。</p><p>Unicorn 支持多种不同类型的Hook，大致可以分为指令执行类、内存访问类和异常处理类。</p><p>调用hook_add函数可添加一个Hook。Unicorn的Hook是链式的，而不是传统Hook的覆盖式，也就是说，可以同时添加多个同类型的Hook，Unicorn会依次调用每一个handler。</p><h2 id="实战演示">实战演示</h2><p>我们将以hxp CTF 2017上的逆向工程题目<a href="http://eternal.red/assets/files/2017/UE/fibonacci">Fibonacci</a>（译注：斐波那契）为例，基于Python上的Unicorn引擎开发相关调试程序，通过反汇编、动态调试等技术，逐步模拟程序运行，并通过Hook函数来优化程序，最终得到Flag。</p><h3 id="反汇编二进制文件">反汇编二进制文件</h3><p>打开虚拟机，运行二进制文件，可以注意到这个程序计算和输出Flag非常的慢。Flag的下一个字节计算的越来越慢。</p><img src="https://s2.loli.net/2023/07/04/w8iZvbdtjHaWL27.png" width=80% /><p>这就意味着有必要优化程序来获取Flag（在合理的时间内）。<br>在IDA Pro的帮助下，我们得到了像C语言一样的伪代码（如下）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v5; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// r9</span></span><br><span class="line">  __int64 v7; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">7</span>]; <span class="comment">// [rsp+Ch] [rbp-1Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;dword_4007E1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The flag is: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v5) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      fibonacci(v4 + v5, v10);</span><br><span class="line">      v8 = v7;</span><br><span class="line">      v5 = v7 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 != <span class="number">8</span> );                         </span><br><span class="line">    v4 += <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v10[<span class="number">0</span>] &lt;&lt; v8) == v6 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = (<span class="type">int</span> *)((<span class="type">char</span> *)v3 + <span class="number">1</span>);</span><br><span class="line">    _IO_putc(v6 ^ (<span class="type">unsigned</span> __int8)(LOBYTE(v10[<span class="number">0</span>]) &lt;&lt; v8), <span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  _IO_putc(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> a1, _DWORD *v10)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// er12</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fibonacci(<span class="number">0</span>, v10);</span><br><span class="line">      v6 = v8 - ((v8 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      fibonacci(a1 - <span class="number">2</span>, v10);</span><br><span class="line">      v4 = v3;</span><br><span class="line">      fibonacci(a1 - <span class="number">1</span>, v10);</span><br><span class="line">      v6 = v4 + v5 - (((<span class="type">unsigned</span> <span class="type">int</span>)(v4 + v5) &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = ((v6 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) + (v6 &amp; <span class="number">0x33333333</span>) + ((((v6 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) + (v6 &amp; <span class="number">0x33333333</span>)) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    *v10 ^= ((BYTE1(v7) &amp; <span class="number">0xF</span>) + (v7 &amp; <span class="number">0xF</span>) + (<span class="type">unsigned</span> __int8)((((v7 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xF0F0F</span>) + (v7 &amp; <span class="number">0xF0F0F0F</span>)) &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *v10 ^= <span class="number">1u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察反编译代码，我们可以看到main函数调用了fibonacci函数若干次，并且fibonacci函数是个递归函数。当所求项数越来越大，那么程序运行必然也越来越慢，且时间呈指数级上升。</p><h3 id="用Unicorn模拟执行">用Unicorn模拟执行</h3><p>在开始优化之前，我们先用Unicorn引擎模拟一个正常的程序，不进行优化，成功之后，再开始优化。</p><ol><li>创建一个Python的脚本，然后将二进制文件放到同一目录下。</li><li>调用相关模块。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> * <span class="comment"># 加载主要的二进制模块和一些Unicorn中的一些基本常量</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> * <span class="comment"># 加载一些特定的x86和x64的常量</span></span><br></pre></td></tr></table></figure><ol start="3"><li>为x86-64架构初始化Unicorn引擎。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu = Uc (UC_ARCH_X86, UC_MODE_64)</span><br></pre></td></tr></table></figure><p>Uc函数需要以下参数：<br>第一个参数：架构类型。这些常量以UC_ATCH_为前缀；<br>第二个参数：架构细节说明。这些常量以UC_MODE_为前缀。</p><ol start="4"><li>初始化内存。针对这个二进制文件来说，我们需要将代码写入到某个地方，并且分配一些栈空间。<br>二进制文件的基址是0x400000。栈的话不妨从地址0x0开始，大小为1024*1024字节（即1M）。<br>可以使用mem_map函数来映射内存。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BASE = <span class="number">0x400000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br></pre></td></tr></table></figure><ol start="5"><li>加载二进制文件到基址，并将RSP寄存器指向申请的栈空间底部。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mu.mem_write(BASE, read(<span class="string">&quot;./fibonacci&quot;</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，内存中栈通常由高地址向低地址增长。栈的底部位于较高的地址，而栈的顶部位于较低的地址。RSP寄存器初始化时应指向高地址。</p><ol start="6"><li>模拟执行代码。</li></ol><img src="https://s2.loli.net/2023/07/04/aWOL82h1BoSTvuc.png" width=80% /><img src="https://s2.loli.net/2023/07/04/ZcugnMOVqNRsEIf.png" width=80% /><p>观察main函数地址，其开始于0x00000000004004E0，结尾于0x0000000000400582。实际上我们不需要retn这个函数，所以我们可以在0x0000000000400575处结尾。保留retn的另一个原因是为接下来优化Hook函数做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.emu_start(<span class="number">0x00000000004004E0</span>, <span class="number">0x0000000000400575</span>)</span><br></pre></td></tr></table></figure><p><strong>目前为止的脚本（<a href="http://solve1.py">solve1.py</a>）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *  <span class="comment"># 加载主要的二进制模块和一些Unicorn中的一些基本常量</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *  <span class="comment"># 加载一些特定的x86和x64的常量</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  <span class="comment"># 这里主要用到 read 函数来读取文件</span></span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)  <span class="comment"># 第一个参数：架构类型，第二个参数：架构细节说明，为x86-64架构初始化一下Unicorn引擎</span></span><br><span class="line"></span><br><span class="line">BASE_ADDR = <span class="number">0x400000</span>  <span class="comment"># 基址</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span>  <span class="comment"># 栈地址</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 栈空间</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(BASE_ADDR, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)  <span class="comment"># mem_map函数来映射内存</span></span><br><span class="line"></span><br><span class="line">mu.mem_write(BASE_ADDR, read(<span class="string">&quot;./fibonacci&quot;</span>))  <span class="comment"># read仅仅返回文件中的内容，加载二进制文件到基址上</span></span><br><span class="line"></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - <span class="number">1</span>)  <span class="comment"># 初始化RSP寄存器指向栈底（倒着的）</span></span><br><span class="line"></span><br><span class="line">mu.emu_start(<span class="number">0x4004E0</span>, <span class="number">0x400575</span>)  <span class="comment"># 启动模拟执行，起始从main函数开始，遇到while循坏外面的IO_putc结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>执行脚本。这个时候会发现报错：</li></ol><img src="https://s2.loli.net/2023/07/04/6bR812h7XWsITLD.png" width=80% /><p>从错误信息“Invalid memory read”我们可以知道脚本进行了一个无效的内存读取。为了探究是哪条指令执行过程中出现了这样的错误，我们可以在mu.emu_start之前加入一个Hook。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27;</span>%(address, size))</span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br></pre></td></tr></table></figure><p>我们自定的函数hook_code在执行每一条代码模拟的时候都将被调用。参数如下：</p><ul><li>Uc实例句柄</li><li>指令的地址</li><li>执行的长度</li><li>用户自定义数据（我们可以在hook_add的可选参数中传递这个值）</li></ul><ol start="8"><li>再次运行脚本。脚本报错：</li></ol><img src="https://s2.loli.net/2023/07/04/tPfTqdBxQnvNRh8.png" width=80% /><p>这表明，脚本执行以下的指令的时候发生了错误：</p><img src="https://s2.loli.net/2023/07/04/ogaiey4RbDvCh3M.png" width=80% /><p>通过IDA我们可以发现，这条指令从地址0x601038处读取内存（如下图）。</p><img src="https://s2.loli.net/2023/07/04/iNmFCU8Bp9arEvh.png" width=80% /><p>这是.bss区段所在，然而我们并没有来分配这个区段，解决方案是跳过所有出现问题的指令。<br>可以通过修改RIP寄存器的方式来跳过这些指令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>添加指令黑名单，修改Hook函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27;</span>%(address, size))</span><br><span class="line"><span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><p>所有的指令黑名单如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list = [<span class="number">0x00000000004004EF</span>, <span class="number">0x00000000004004F6</span>, <span class="number">0x0000000000400502</span>, <span class="number">0x000000000040054F</span>]</span><br></pre></td></tr></table></figure><p>当找出所有需要跳过的指令之后，为了方便查看Flag的输出，我们可以注释print跟踪语句。</p><ol start="9"><li>再次运行脚本，脚本正常运行，但未输出原有Flag。</li></ol><p>通过对原二进制文件的Linux远程动态调试可知，Unicorn模拟运行时其原有的call __IO_putc指令无法正常运行（跳转至未分配区段）。</p><img src="https://s2.loli.net/2023/07/04/74S9dMrXC82TUAp.png" width=80% /><p>然而，在执行这条指令之前程序已经将需要输出的字符存入RDI寄存器。于是这里我们就可以直接读取RDI寄存器，然后输出，跳过模拟执行这部分代码。进一步修改Hook函数如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">instructions_skip_list = [<span class="number">0x00000000004004EF</span>, <span class="number">0x00000000004004F6</span>, <span class="number">0x0000000000400502</span>, <span class="number">0x000000000040054F</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>): </span><br><span class="line"><span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; %(address, size))</span></span><br><span class="line"><span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br><span class="line"><span class="keyword">elif</span> address == <span class="number">0x400560</span>:</span><br><span class="line">C = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(c))</span><br><span class="line">mu.reg_write(UC_X86_REG_RIP, address+size)</span><br></pre></td></tr></table></figure><ol start="10"><li>再次运行脚本，脚本正常运行，输出原有Flag，但速度依然很慢。</li></ol><img src="https://s2.loli.net/2023/07/04/2IY459lBaoWGebQ.png" width=80% /><p><strong>目前为止的脚本（<a href="http://solve2.py">solve2.py</a>）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *  <span class="comment"># 加载主要的二进制模块和一些Unicorn中的一些基本常量</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *  <span class="comment"># 加载一些特定的x86和x64的常量</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  <span class="comment"># 这里主要用到 read 函数来读取文件</span></span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)  <span class="comment"># 第一个参数：架构类型，第二个参数：架构细节说明，为x86-64架构初始化一下Unicorn引擎</span></span><br><span class="line">BASE_ADDR = <span class="number">0x400000</span>  <span class="comment"># 基址</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span>  <span class="comment"># 栈地址</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 栈空间</span></span><br><span class="line">mu.mem_map(BASE_ADDR, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)  <span class="comment"># mem_map函数来映射内存</span></span><br><span class="line">mu.mem_write(BASE_ADDR, read(<span class="string">&quot;./fibonacci&quot;</span>))  <span class="comment"># read仅仅返回文件中的内容，加载二进制文件到基址上</span></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - <span class="number">1</span>)  <span class="comment"># 初始化RSP寄存器指向栈底（倒着的）</span></span><br><span class="line"></span><br><span class="line">Inst_skip_list = [<span class="number">0x4004EF</span>, <span class="number">0x4004F6</span>, <span class="number">0x400502</span>, <span class="number">0x40054F</span>]  <span class="comment"># 需要跳过的黑名单</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):  <span class="comment"># 在启动之前写一个hook函数来输出我们需要的信息</span></span><br><span class="line">    <span class="comment"># print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; % (address, size))</span></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> Inst_skip_list:  <span class="comment"># 遇到了就跳过避免报错</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address + size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:  <span class="comment"># 如果遇到了输出函数就打印输出的内容</span></span><br><span class="line">        flag = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>((<span class="built_in">chr</span>(flag)), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address + size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)  <span class="comment"># 添加hook</span></span><br><span class="line">mu.emu_start(<span class="number">0x4004E0</span>, <span class="number">0x400575</span>)  <span class="comment"># 启动模拟执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化Hook函数">优化Hook函数</h3><p>根据之前的分析，fibonacci函数是一个递归函数，而且在该程序中反复调用，当所求项数越来越大，那么程序运行必然也越来越慢，且时间呈指数级上升。</p><p>在ACM编程中，如果一个问题具有多数重叠子问题，为减少重复计算，我们只需对每一个子问题求解一次，然后将其不同阶段的不同状态保存在一个二维数组中即可，这便是<strong>动态规划</strong>（Dynamic Programming，DP）。如果我们对fibonacci函数采用动态规划的思想，那么就可以大大提升数列的求解效率。</p><p>我们可以看到fibonacci这个函数有两个参数。</p><img src="https://s2.loli.net/2023/07/04/pcV3xSyzd7JaUZt.png" width=80% /><p>第一个参数在进入的时候存在EDI寄存器中，第二个参数是一个指针，用RSI寄存器储存，同时返回值也有两个，第一个存在RAX寄存器中，第二个就是指针存在RSI寄存器中。</p><p>我们考虑用一个dp字典来存储这两个参数。在fibonacci入口时，检查参数对应的值是否已经被dp记录。</p><ul><li>如果是，直接返回这个key-value就行，只需将返回值写入到RAX中，同时设置RIP为RET指令的值，退出这个函数。这里需要注意，不能在fibonacci函数内直接跳转到retn，因为这条指令已经被Hook了，所以我们跳转到main中的retn。否则会报错如下。</li></ul><img src="https://s2.loli.net/2023/07/04/pflRL2hrOtduHnA.png" width=80% /><ul><li>如果dp中没有出现参数和对应的值，将参数添加到dp中。</li></ul><p>当退出函数的时候，保存返回值。可以从我们的栈结构中读取参数和返回值。</p><p><strong>最终脚本（<a href="http://solve3.py">solve3.py</a>）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *  <span class="comment"># 加载主要的二进制模块和一些Unicorn中的一些基本常量</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *  <span class="comment"># 加载一些特定的x86和x64的常量</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  <span class="comment"># 这里主要用到 read 函数来读取文件，同时用到 u32 和 p32 两个函数，u32将4字节的string转换为integer，以小端序表示这个数据，p32与u32相反</span></span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_64)  <span class="comment"># 第一个参数：架构类型，第二个参数：架构细节说明，为x86-64架构初始化一下Unicorn引擎</span></span><br><span class="line">BASE_ADDR = <span class="number">0x400000</span>  <span class="comment"># 基址</span></span><br><span class="line">STACK_ADDR = <span class="number">0x0</span>  <span class="comment"># 栈地址</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 栈空间</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(BASE_ADDR, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)  <span class="comment"># mem_map函数来映射内存</span></span><br><span class="line">mu.mem_write(BASE_ADDR, read(<span class="string">&quot;./fibonacci&quot;</span>))  <span class="comment"># read仅仅返回文件中的内容，加载二进制文件到基址上</span></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE - <span class="number">1</span>)  <span class="comment"># 初始化RSP寄存器指向栈底（倒着的）</span></span><br><span class="line"></span><br><span class="line">Inst_skip_list = [<span class="number">0x4004EF</span>, <span class="number">0x4004F6</span>, <span class="number">0x400502</span>, <span class="number">0x40054F</span>]</span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line">dp = &#123;&#125;</span><br><span class="line">FIBONACCI_ENTRY = <span class="number">0x400670</span></span><br><span class="line">FIBONACCI_END = [<span class="number">0x4006F1</span>, <span class="number">0x400709</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">mu, address, size, user_data</span>):  <span class="comment"># 在启动之前写一个hook函数来输出我们需要的信息</span></span><br><span class="line">    <span class="comment"># print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; % (address, size))</span></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> Inst_skip_list:  <span class="comment"># 遇到了就跳过避免报错</span></span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address + size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:  <span class="comment"># 如果遇到了输出函数就打印输出的内容</span></span><br><span class="line">        flag = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>((<span class="built_in">chr</span>(flag)), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address + size)</span><br><span class="line">    <span class="keyword">elif</span> address == FIBONACCI_ENTRY:  <span class="comment"># 遇到fibonacci函数的入口</span></span><br><span class="line">        <span class="comment"># 把参数存储下来</span></span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        rsi = mu.reg_read(UC_X86_REG_RSI)  <span class="comment"># 用rsi存储地址，这里是间接寻址，（rsi）是数据</span></span><br><span class="line">        arg1 = u32(mu.mem_read(rsi, <span class="number">4</span>))</span><br><span class="line">        <span class="comment"># 判断参数是否被访问过，如果被访问过就把dp数组中的第一个参数赋给RAX寄存器，第二个参数的数据写入rsi指向的地址中</span></span><br><span class="line">        <span class="keyword">if</span> (arg0, arg1) <span class="keyword">in</span> dp:</span><br><span class="line">            (ret_rax, ret_ref) = dp[(arg0, arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX, ret_rax)</span><br><span class="line">            mu.mem_write(rsi, p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP, <span class="number">0x400582</span>)  <span class="comment"># 由于此时fibonacci这个函数还在被hook中，所以不能跳转到该函数本身的ret指令</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0, arg1, rsi))  <span class="comment"># 不在dp数组中就入栈</span></span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> FIBONACCI_END:  <span class="comment"># 遇到fibonacci函数的出口，从栈顶拿出数据建立dp数组的映射</span></span><br><span class="line">        (arg0, arg1, rsi) = stack.pop()</span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(rsi, <span class="number">4</span>))</span><br><span class="line">        dp[(arg0, arg1)] = (ret_rax, ret_ref)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)  <span class="comment"># 添加hook</span></span><br><span class="line">mu.emu_start(<span class="number">0x4004E0</span>, <span class="number">0x400575</span>)  <span class="comment"># 启动模拟执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行如下：</p><img src="https://s2.loli.net/2023/07/04/xpWGTyfAan9zuIR.png" width=80% /><h2 id="写在最后">写在最后</h2><p>在学校的天璇战队搞逆向也有大半年了，是时候进行反思，我在这个领域究竟学到了些什么。</p><p>在我看来，逆向工程是一门怀疑的艺术。虽然各个程序都只由最基本的汇编指令构成，每条指令都只执行最基本的功能，但量变促成质变，逻辑升华成算法，而算法的逆向不仅需要丰富的逆向经验，还需要极强的耐心。</p><p>“三分逆向七分猜”，这句话表达了逆向工程的本质。在逆向过程中，我们经常需要根据有限的线索进行推断和猜测。尽管有时这种推测是不确定的，但它们可以引导我们朝着正确的方向前进（虽然有时候要走的弯路一步都不会少）。</p><p>幸好前人为我们试了错，发明了Unicorn引擎——一个功能强大的二进制分析工具。结果表明，Unicorn引擎在逆向工程中具有很高的准确性和可靠性。它能够准确地模拟各种处理器指令的执行，包括复杂的控制流和数据流操作。同时，Unicorn引擎还提供了丰富的API和工具，使我们能够对二进制代码进行深入的分析和修改，帮助我们理解程序的内部结构和逻辑。</p><p>对于上面的fibonacci函数，我们本可以通过某种语言重构代码。然而，重构代码的过程并不容易，可能会引入一些BUG和错误。盯着代码找错误可并不好玩。通过Unicorn引擎来解决这个任务可以跳过重构代码的过程，避免上面提到的问题。</p><p>逆向工程真正的价值在于通过观察、分析和推测，逐渐揭示出程序的内部工作原理。在调试的过程中，你会感受到怀疑与猜测带给你的驱动力以及不确定性变为确定性所带来的成就感。对于程序本身而言，逆向工程更像是一场解剖手术，从细微处入手，于变化点破局。到最后你会感觉，程序本身也是有生命的。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/rever-e/">rever$e</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/06/19/unicorn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从OTF到矢量图</title>
      <link>http://ch3cooh12138.github.io/2023/06/19/font-path/</link>
      <guid>http://ch3cooh12138.github.io/2023/06/19/font-path/</guid>
      <pubDate>Mon, 19 Jun 2023 09:43:07 GMT</pubDate>
      
      
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Design/">Design</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/W3b/">W3b</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/06/19/font-path/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【链接】Reverse中的加密算法</title>
      <link>http://ch3cooh12138.github.io/2023/06/18/cryptoverse/</link>
      <guid>http://ch3cooh12138.github.io/2023/06/18/cryptoverse/</guid>
      <pubDate>Sun, 18 Jun 2023 09:46:27 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;哈哈 懒得整理所以贴点大爹的链接↓&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/Here-is-SG/p/15760247.html&quot;&gt;Base64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnbl</description>
        
      
      
      
      <content:encoded><![CDATA[<p>哈哈 懒得整理所以贴点大爹的链接↓</p><ul><li><a href="https://www.cnblogs.com/Here-is-SG/p/15760247.html">Base64</a></li><li><a href="https://www.cnblogs.com/Here-is-SG/p/15621082.html">TEA</a></li><li><a href="https://www.cnblogs.com/Here-is-SG/p/15723754.html">RC4</a></li><li><a href="https://www.cnblogs.com/Here-is-SG/p/16454132.html">DES</a></li></ul><p>感觉再不发博客👶要被开喽</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/rever-e/">rever$e</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/06/18/cryptoverse/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【转载】Python实现tea/xtea/xxtea加密算法</title>
      <link>http://ch3cooh12138.github.io/2023/03/03/tea-encryption/</link>
      <guid>http://ch3cooh12138.github.io/2023/03/03/tea-encryption/</guid>
      <pubDate>Fri, 03 Mar 2023 01:52:46 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;tea&quot;&gt;tea&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="tea">tea</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span> </span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        total.value += delta </span><br><span class="line">        v0.value += ((v1.value&lt;&lt;<span class="number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="number">5</span>) + k1)  </span><br><span class="line">        v1.value += ((v0.value&lt;&lt;<span class="number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="number">5</span>) + k3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span> </span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):                       </span><br><span class="line">        v1.value -= ((v0.value&lt;&lt;<span class="number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="number">5</span>) + k3) </span><br><span class="line">        v0.value -= ((v1.value&lt;&lt;<span class="number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="number">5</span>) + k1)  </span><br><span class="line">        total.value -= delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value   </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span></span><br><span class="line">    value = [<span class="number">0x12345678</span>, <span class="number">0x78563412</span>]</span><br><span class="line">    <span class="comment"># 四个key，每个是32bit，即密钥长度为128bit</span></span><br><span class="line">    key = [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Data is : &quot;</span>, <span class="built_in">hex</span>(value[<span class="number">0</span>]), <span class="built_in">hex</span>(value[<span class="number">1</span>]))  </span><br><span class="line">    res = encrypt(value, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line">    res = decrypt(res, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0x9a65a69a 0x67ed00f6</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xtea">xtea</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, key</span>):   </span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):  </span><br><span class="line">        v0.value += (((v1.value &lt;&lt; <span class="number">4</span>) ^ (v1.value &gt;&gt; <span class="number">5</span>)) + v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>])</span><br><span class="line">        total.value += delta </span><br><span class="line">        v1.value += (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) + v0.value) ^ (total.value + key[(total.value&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, key</span>):</span><br><span class="line">    v0, v1  = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    </span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) + v0.value) ^ (total.value + key[(total.value&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        total.value -= delta </span><br><span class="line">        v0.value -= (((v1.value &lt;&lt; <span class="number">4</span>) ^ (v1.value &gt;&gt; <span class="number">5</span>)) + v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span></span><br><span class="line">    value = [<span class="number">0x12345678</span>, <span class="number">0x78563412</span>]</span><br><span class="line">    <span class="comment"># 四个key，每个是32bit，即密钥长度为128bit</span></span><br><span class="line">    key = [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Data is : &quot;</span>, <span class="built_in">hex</span>(value[<span class="number">0</span>]), <span class="built_in">hex</span>(value[<span class="number">1</span>]))</span><br><span class="line">    res = encrypt(value, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line">    res = decrypt(res, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0xae685ec7 0x59af4238</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xxtea">xxtea</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value&gt;&gt;<span class="number">5</span> ^ y.value&lt;&lt;<span class="number">2</span>) + (y.value&gt;&gt;<span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p&amp;<span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span> </span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span>//n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    z = c_uint32(v[n-<span class="number">1</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        total.value += delta  </span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">            y = c_uint32(v[p+<span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32(v[p] + MX(z,y,total,key,p,e).value).value</span><br><span class="line">            z.value = v[p]</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">        v[n-<span class="number">1</span>] = c_uint32(v[n-<span class="number">1</span>] + MX(z,y,total,key,n-<span class="number">1</span>,e).value).value</span><br><span class="line">        z.value = v[n-<span class="number">1</span>]</span><br><span class="line">        rounds -= <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span>//n </span><br><span class="line">    </span><br><span class="line">    total = c_uint32(rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = c_uint32(v[p-<span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32((v[p] - MX(z,y,total,key,p,e).value)).value</span><br><span class="line">            y.value = v[p]</span><br><span class="line">        z = c_uint32(v[n-<span class="number">1</span>])  </span><br><span class="line">        v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z,y,total,key,<span class="number">0</span>,e).value).value</span><br><span class="line">        y.value = v[<span class="number">0</span>]  </span><br><span class="line">        total.value -= delta</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  test  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># 该算法中每次可加密不只64bit的数据，并且加密的轮数由加密数据长度决定</span></span><br><span class="line">    v = [<span class="number">0x12345678</span>, <span class="number">0x78563412</span>]</span><br><span class="line">    k = [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>]</span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Data is : &quot;</span>, <span class="built_in">hex</span>(v[<span class="number">0</span>]), <span class="built_in">hex</span>(v[<span class="number">1</span>]))</span><br><span class="line">    res = encrypt(n, v, k)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line">    res = decrypt(n, res, k)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0xef86c2bb 0x25f31b5e</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/A951860555/article/details/120120400">CSDN《python实现tea/xtea/xxtea加密算法》</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/rever-e/">rever$e</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/03/03/tea-encryption/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HGAME2023 WP</title>
      <link>http://ch3cooh12138.github.io/2023/02/06/hgame2023wp/</link>
      <guid>http://ch3cooh12138.github.io/2023/02/06/hgame2023wp/</guid>
      <pubDate>Mon, 06 Feb 2023 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Week1&quot;&gt;Week1&lt;/h2&gt;
&lt;h3 id=&quot;Web&quot;&gt;Web&lt;/h3&gt;
&lt;h4 id=&quot;Classic-Childhood-Game&quot;&gt;Classic Childhood Game&lt;/h4&gt;
&lt;p&gt;纯前端实现 -&amp;gt; 代码审计&lt;br&gt;
发现Events</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Week1">Week1</h2><h3 id="Web">Web</h3><h4 id="Classic-Childhood-Game">Classic Childhood Game</h4><p>纯前端实现 -&gt; 代码审计<br>发现Events.js里有mota()加密函数，输入控制台得Flag<code>hgame&#123;fUnnyJavascript&amp;FunnyM0taG4me&#125;</code>。</p><h4 id="Guess-Who-I-Am">Guess Who I Am</h4><p>手撸。</p><h3 id="Reverse">Reverse</h3><h4 id="test-your-IDA">test your IDA</h4><p>签到题。</p><h4 id="easyasm">easyasm</h4><p>汇编白学，我估计后面的Week会有hardasm之类的题目。</p><p>题面：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; void __cdecl enc(char *p)</span><br><span class="line">.text:00401160 _enc            proc near               ; CODE XREF: _main+1B↑p</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160 i               = dword ptr -4</span><br><span class="line">.text:00401160 Str             = dword ptr  8</span><br><span class="line">.text:00401160</span><br><span class="line">.text:00401160                 push    ebp</span><br><span class="line">.text:00401161                 mov     ebp, esp</span><br><span class="line">.text:00401163                 push    ecx</span><br><span class="line">.text:00401164                 mov     [ebp+i], 0</span><br><span class="line">.text:0040116B                 jmp     short loc_401176</span><br><span class="line">.text:0040116D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040116D</span><br><span class="line">.text:0040116D loc_40116D:                             ; CODE XREF: _enc+3B↓j</span><br><span class="line">.text:0040116D                 mov     eax, [ebp+i]</span><br><span class="line">.text:00401170                 add     eax, 1</span><br><span class="line">.text:00401173                 mov     [ebp+i], eax</span><br><span class="line">.text:00401176</span><br><span class="line">.text:00401176 loc_401176:                             ; CODE XREF: _enc+B↑j</span><br><span class="line">.text:00401176                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401179                 push    ecx             ; Str</span><br><span class="line">.text:0040117A                 call    _strlen</span><br><span class="line">.text:0040117F                 add     esp, 4</span><br><span class="line">.text:00401182                 cmp     [ebp+i], eax</span><br><span class="line">.text:00401185                 jge     short loc_40119D</span><br><span class="line">.text:00401187                 mov     edx, [ebp+Str]</span><br><span class="line">.text:0040118A                 add     edx, [ebp+i]</span><br><span class="line">.text:0040118D                 movsx   eax, byte ptr [edx]</span><br><span class="line">.text:00401190                 xor     eax, 33h</span><br><span class="line">.text:00401193                 mov     ecx, [ebp+Str]</span><br><span class="line">.text:00401196                 add     ecx, [ebp+i]</span><br><span class="line">.text:00401199                 mov     [ecx], al</span><br><span class="line">.text:0040119B                 jmp     short loc_40116D</span><br><span class="line">.text:0040119D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040119D</span><br><span class="line">.text:0040119D loc_40119D:                             ; CODE XREF: _enc+25↑j</span><br><span class="line">.text:0040119D                 mov     esp, ebp</span><br><span class="line">.text:0040119F                 pop     ebp</span><br><span class="line">.text:004011A0                 retn</span><br><span class="line">.text:004011A0 _enc            endp</span><br><span class="line">Input: your flag</span><br><span class="line">Encrypted result: 0x5b,0x54,0x52,0x5e,0x56,0x48,0x44,0x56,0x5f,0x50,0x3,0x5e,0x56,0x6c,0x47,0x3,0x6c,0x41,0x56,0x6c,0x44,0x5c,0x41,0x2,0x57,0x12,0x4e</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x5b</span>,<span class="number">0x54</span>,<span class="number">0x52</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x56</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x3</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x47</span>,<span class="number">0x3</span>,<span class="number">0x6c</span>,<span class="number">0x41</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x2</span>,<span class="number">0x57</span>,<span class="number">0x12</span>,<span class="number">0x4e</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x33</span>),end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;welc0me_t0_re_wor1d!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="easyenc">easyenc</h4><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x04</span>,<span class="number">0xFF</span>,<span class="number">0xFD</span>,<span class="number">0x9</span>,<span class="number">0x01</span>,<span class="number">0xF3</span>,<span class="number">0xb0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x05</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0x07</span>,<span class="number">0x06</span>,<span class="number">0x17</span>,<span class="number">0x5</span>,<span class="number">0xeb</span>,<span class="number">0x17</span>,<span class="number">0xfd</span>,<span class="number">0x17</span>,<span class="number">0xea</span>,<span class="number">0x01</span>,<span class="number">0xee</span>,<span class="number">0x1</span>,<span class="number">0xea</span>,<span class="number">0xb1</span>,<span class="number">0x05</span>,<span class="number">0xfa</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0x17</span>,<span class="number">0xac</span>,<span class="number">0xec</span>,<span class="number">0x01</span>,<span class="number">0xea</span>,<span class="number">0xfd</span>,<span class="number">0xf0</span>,<span class="number">0x05</span>,<span class="number">0x07</span>,<span class="number">0x6</span>]</span><br><span class="line">ans = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">len1 = <span class="number">41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    ans[i] = ((a[i]+<span class="number">86</span>)&amp;<span class="number">0xff</span>) ^ <span class="number">0x32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(ans[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;</span></span><br></pre></td></tr></table></figure><h4 id="encode">encode</h4><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)//<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[<span class="number">2</span>*i+<span class="number">1</span>]*<span class="number">16</span>+enc[<span class="number">2</span>*i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span></span><br></pre></td></tr></table></figure><h4 id="a-cup-of-tea">a_cup_of_tea</h4><p>TEA算法的逆向。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">k = [<span class="number">0x12345678</span>,<span class="number">0x23456789</span>,<span class="number">0x34567890</span>,<span class="number">0x45678901</span>]</span><br><span class="line">enc = [<span class="number">0x2E63829D</span>,<span class="number">0xC14E400F</span>,<span class="number">0x9B39BFB9</span>,<span class="number">0x5A1F8B14</span>,<span class="number">0x61886DDE</span>,<span class="number">0x6565C6CF</span>,<span class="number">0x9F064F64</span>,<span class="number">0x236A43F6</span>]</span><br><span class="line">v = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v,k</span>):</span><br><span class="line">v0=c_uint32(v[<span class="number">0</span>])</span><br><span class="line">v1=c_uint32(v[<span class="number">1</span>])</span><br><span class="line">delta= -<span class="number">0x543210dd</span></span><br><span class="line">sum1=c_uint32(delta*<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">v1.value-=((v0.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">2</span>])^(v0.value+sum1.value)^((v0.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">3</span>])</span><br><span class="line">v0.value-=((v1.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">0</span>])^(v1.value+sum1.value)^((v1.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">1</span>])</span><br><span class="line">sum1.value-=delta</span><br><span class="line"><span class="keyword">return</span> v0.value,v1.value</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    v[<span class="number">0</span>] = enc[i*<span class="number">2</span>]</span><br><span class="line">    v[<span class="number">1</span>] = enc[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">    m,n=decrypt(v,k)</span><br><span class="line">    flag.append(m)</span><br><span class="line">    flag.append(n)</span><br><span class="line"></span><br><span class="line">f = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    ftmp = long_to_bytes(i).decode()</span><br><span class="line">    f1 = <span class="built_in">list</span>(ftmp)</span><br><span class="line">    f1.reverse()</span><br><span class="line">    f += <span class="string">&#x27;&#x27;</span>.join(f1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># hgame&#123;Tea_15_4_v3ry_h3a1thy_drlnk&#125;</span></span><br></pre></td></tr></table></figure><p>还是搞不清大小端序。</p><h3 id="Misc">Misc</h3><h4 id="e99p1ant-want-girlfriend">e99p1ant_want_girlfriend</h4><p>改长宽。</p><h4 id="神秘的海报">神秘的海报</h4><p>LSB+音频隐写。<br>谷歌云盘文件的下载可以参考<a href="https://blog.csdn.net/sinat_33155679/article/details/123326088">这篇文章</a>。<br>音频隐写考点是弱密码123456（我一开始尝试114514的）。</p><h2 id="Week2">Week2</h2><h3 id="Reverse-2">Reverse</h3><h4 id="before-main">before_main</h4><p>变表base64，有啥东西在main函数前面？</p><p>在init里面注册了一个地址数组，点进去发现了sub_1228这个函数。</p><img src="https://s2.loli.net/2023/02/06/6YXjyfEPJbTMec4.png" width=80% /><p>可以确定是变表了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">origin=<span class="string">&#x27;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&#x27;</span></span><br><span class="line">base64_table=<span class="built_in">str</span>.maketrans(<span class="string">&#x27;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&#x27;</span>,<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(origin.translate(base64_table)))</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;s0meth1ng_run_befOre_m@in&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>不仔细看/不动调的话会以为是原base64加密用的那个表（也是变表），主动防御了属于是。</p><h4 id="stream">stream</h4><blockquote><p>题面：兔兔假期前学习了编程，你能看出来他学的是什么语言吗</p></blockquote><p>一眼Python。</p><img src="https://s2.loli.net/2023/02/06/jBWEu7OsqXzDytp.png" width=80% /><p>使用pyinstxtractor工具解包，再<a href="https://tool.lu/pyc/">反编译.pyc文件</a>即可。</p><p>反编译后的.py代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        data.append(s[(s[i] + s[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(text, gen(key)):</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ k)</span><br><span class="line">    result = base64.b64encode(result.encode()).decode()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">text = <span class="built_in">input</span>(<span class="string">&#x27;Flag: &#x27;</span>)</span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">enc = encrypt(text, key)</span><br><span class="line"><span class="keyword">if</span> enc == <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="literal">None</span>(<span class="string">&#x27;try again...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        data.append(s[(s[i] + s[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">genkey = gen(key)</span><br><span class="line">enc = <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span></span><br><span class="line"></span><br><span class="line">dec = base64.b64decode(enc.encode()).decode()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dec)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(dec[i]) ^ genkey[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;python_reverse_is_easy_with_internet&#125;</span></span><br></pre></td></tr></table></figure><h4 id="math">math</h4><img src="https://s2.loli.net/2023/02/06/7NDCpzK9sxFqUr1.png" width=80% /><p>五阶矩阵乘法逆运算，回忆起了被线性代数支配的恐惧。</p><p>还好我有Python。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">126</span>,<span class="number">225</span>,<span class="number">62</span>,<span class="number">40</span>,<span class="number">216</span>],[<span class="number">253</span>,<span class="number">20</span>,<span class="number">124</span>,<span class="number">232</span>,<span class="number">122</span>],[<span class="number">62</span>,<span class="number">23</span>,<span class="number">100</span>,<span class="number">161</span>,<span class="number">36</span>],[<span class="number">118</span>,<span class="number">21</span>,<span class="number">184</span>,<span class="number">26</span>,<span class="number">142</span>],[<span class="number">59</span>,<span class="number">31</span>,<span class="number">186</span>,<span class="number">82</span>,<span class="number">79</span>]])</span><br><span class="line">y = np.array([[<span class="number">63998</span>,<span class="number">33111</span>,<span class="number">67762</span>,<span class="number">54789</span>,<span class="number">61979</span>],[<span class="number">69619</span>,<span class="number">37190</span>,<span class="number">70162</span>,<span class="number">53110</span>,<span class="number">68678</span>],[<span class="number">63339</span>,<span class="number">30687</span>,<span class="number">66494</span>,<span class="number">50936</span>,<span class="number">60810</span>],[<span class="number">48784</span>,<span class="number">30188</span>,<span class="number">60104</span>,<span class="number">44599</span>,<span class="number">52265</span>],[<span class="number">43048</span>,<span class="number">23660</span>,<span class="number">43850</span>,<span class="number">33646</span>,<span class="number">44270</span>]])</span><br><span class="line"></span><br><span class="line">z = np.linalg.inv(x)</span><br><span class="line"></span><br><span class="line">f = np.dot(y,z)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(f):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i+<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;y0ur_m@th_1s_gO0d&#125;</span></span><br></pre></td></tr></table></figure><h4 id="VidarCamera">VidarCamera</h4><p>安卓逆向，jadx打开，CameraActivity里发现伪Tea加密。</p><img src="https://s2.loli.net/2023/02/06/OPs7c84qWRSjpvI.png" width=80% /><p>出题人保留Tea的大部分特征，但是也去除了一部分。</p><blockquote><p>“是故意的还是不小心”<br>“是故意的”</p></blockquote><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, key</span>):</span><br><span class="line">    v0, v1  = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">878077251</span></span><br><span class="line">    </span><br><span class="line">    total = c_uint32(delta * <span class="number">33</span>) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>): <span class="comment"># 循环33次而非32次</span></span><br><span class="line">        total.value -= delta </span><br><span class="line">        v1.value -= (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) + v0.value) ^ (total.value + key[(total.value&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])   </span><br><span class="line">        v0.value -= (((v1.value &lt;&lt; <span class="number">4</span>) ^ (v1.value &gt;&gt; <span class="number">5</span>)) + v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>]) ^ total.value <span class="comment"># 这里多了一点东西</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value </span><br><span class="line"></span><br><span class="line">key1 = [<span class="number">2233</span>,<span class="number">4455</span>,<span class="number">6677</span>,<span class="number">8899</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">637666042</span>,<span class="number">457511012</span>,-<span class="number">2038734351</span>,<span class="number">578827205</span>,-<span class="number">245529892</span>,-<span class="number">1652281167</span>,<span class="number">435335655</span>,<span class="number">733644188</span>,<span class="number">705177885</span>,-<span class="number">596608744</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line"><span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">    k = [enc[i],enc[i+<span class="number">1</span>]]</span><br><span class="line">    enc[i],enc[i+<span class="number">1</span>] = decrypt(k,key1)</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    ftmp = long_to_bytes(i).decode()</span><br><span class="line">    f1 = <span class="built_in">list</span>(ftmp)</span><br><span class="line">    f1.reverse()</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(f1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;d8c1d7d34573434ea8dfe5db40fbb25c0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Crypto">Crypto</h3><h4 id="Rabin">Rabin</h4><p>Rabin加密，参考<a href="https://www.cnblogs.com/21r000/p/15542587.html#rabin%E5%8A%A0%E5%AF%86">这里</a>。</p><p>原理是中国剩余定理，可能有多解，选出适合的解即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">n = p * q</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"> </span><br><span class="line">p=<span class="number">65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line">q=<span class="number">98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line">c=<span class="number">0x4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line">m = rabin_decrypt(c,p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># hgame&#123;That&#x27;5_s0_3asy_to_s@lve_r@bin&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Misc-2">Misc</h3><h4 id="Tetris-Master">Tetris Master</h4><p>手打俄罗斯方块。</p><h4 id="crazy-qrcode">crazy_qrcode</h4><p>手算二维码（手挖比特币还会远吗）</p><p>题目给了一个压缩包和一个扫不了的二维码，尝试修改其纠错码和掩码，发现<strong>纠错码为H，掩码为4</strong>时可以扫描，得压缩包密码<code>QDjkXkpM0BHNXujs</code>。进压缩包一看好家伙，一个二维码被等分成25份，每一份随机进行0/90/180/270度旋转。按二维码特征（参照我写的<a href="https://cabelis.ink/2023/01/16/crash-qrcode-by-hand/">这篇文章</a>）可以恢复成下图。</p><img src="https://s2.loli.net/2023/02/06/olHpPV9XniYjFfW.png" width=50% /><p>然后根据“二维码数据从右下角开始向上填充”的原则勉勉强强一点点凑出下图。</p><img src="https://s2.loli.net/2023/02/06/gm9xwlykFj1RABN.png" width=50% /><p>可以用qrazybox扫出来了。Flag为<code>hgame&#123;Cr42y_qrc0de&#125;</code>。</p><p>纯真说，可以用Python的Pillow库拼一下然后几张图放屏幕上一扫就出来了，大概我的能力还难以望纯真项背吧。</p><h2 id="Week3">Week3</h2><h3 id="Reverse-3">Reverse</h3><p>坐牢局，一题10小时。Week4都没这么坐牢。<br>是我菜了。</p><h4 id="kunmusic">kunmusic</h4><p>题目给了kmusic.exe，kmusic.dll和kmusic.runtimeconfig.json。<br>exeinfope一下，知道了是.net框架的。<br>感谢纯真的提点，知道了.net框架的题目适合用dnSpy。</p><img src="https://s2.loli.net/2023/02/06/M2dgKZGj3vuetcl.png" width=80% /><p>在kmusic-kmusic.ddl-kmusic-Program-Main()里发现疑似加密代码，动调后观察文件头发现是PE程序，内存窗口里dump出来再次拖入dnSpy得到真正的加密程序。</p><img src="https://s2.loli.net/2023/02/06/hApHin7SJkK2XP4.png" width=80% /><p>为了显示方便采用了VB语言，大体思路是用z3解方程然后再逆向解密。需要注意的是方程可能有多解，需要语义分析来增加约束条件。</p><p>exp1(z3):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a,b,c,d,e,f,g,h,i,j,k,l,m = BitVecs(<span class="string">&#x27;a b c d e f g h i j k l m&#x27;</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">x = Solver()</span><br><span class="line">x.add(a + <span class="number">52296</span> + b - <span class="number">26211</span> + c - <span class="number">11754</span> + (d ^ <span class="number">41236</span>) + e * <span class="number">63747</span> + f - <span class="number">52714</span> + g - <span class="number">10512</span> + h * <span class="number">12972</span> + i + <span class="number">45505</span> + j - <span class="number">21713</span> + k - <span class="number">59122</span> + l - <span class="number">12840</span> + (m ^ <span class="number">21087</span>) == <span class="number">12702282</span>)</span><br><span class="line">x.add(a - <span class="number">25228</span> + (b ^ <span class="number">20699</span>) + (c ^ <span class="number">8158</span>) + d - <span class="number">65307</span> + e * <span class="number">30701</span> + f * <span class="number">47555</span> + g - <span class="number">2557</span> + (h ^ <span class="number">49055</span>) + i - <span class="number">7992</span> + (j ^ <span class="number">57465</span>) + (k ^ <span class="number">57426</span>) + l + <span class="number">13299</span> + m - <span class="number">50966</span> == <span class="number">9946829</span>)</span><br><span class="line">x.add(a - <span class="number">64801</span> + b - <span class="number">60698</span> + c - <span class="number">40853</span> + d - <span class="number">54907</span> + e + <span class="number">29882</span> + (f ^ <span class="number">13574</span>) + (g ^ <span class="number">21310</span>) + h + <span class="number">47366</span> + i + <span class="number">41784</span> + (j ^ <span class="number">53690</span>) + k * <span class="number">58436</span> + l * <span class="number">15590</span> + m + <span class="number">58225</span> == <span class="number">2372055</span>)</span><br><span class="line">x.add(a + <span class="number">61538</span> + b - <span class="number">17121</span> + c - <span class="number">58124</span> + d + <span class="number">8186</span> + e + <span class="number">21253</span> + f - <span class="number">38524</span> + g - <span class="number">48323</span> + h - <span class="number">20556</span> + i * <span class="number">56056</span> + j + <span class="number">18568</span> + k + <span class="number">12995</span> + (l ^ <span class="number">39260</span>) + m + <span class="number">25329</span> == <span class="number">6732474</span>)</span><br><span class="line">x.add(a - <span class="number">42567</span> + b - <span class="number">17743</span> + c * <span class="number">47827</span> + d - <span class="number">10246</span> + (e ^ <span class="number">16284</span>) + f + <span class="number">39390</span> + g * <span class="number">11803</span> + h * <span class="number">60332</span> + (i ^ <span class="number">18491</span>) + (j ^ <span class="number">4795</span>) + k - <span class="number">25636</span> + l - <span class="number">16780</span> + m - <span class="number">62345</span> == <span class="number">14020739</span>)</span><br><span class="line">x.add(a - <span class="number">10968</span> + b - <span class="number">31780</span> + (c ^ <span class="number">31857</span>) + d - <span class="number">61983</span> + e * <span class="number">31048</span> + f * <span class="number">20189</span> + g + <span class="number">12337</span> + h * <span class="number">25945</span> + (i ^ <span class="number">7064</span>) + j - <span class="number">25369</span> + k - <span class="number">54893</span> + l * <span class="number">59949</span> + (m ^ <span class="number">12441</span>) == <span class="number">14434062</span>)</span><br><span class="line">x.add(a + <span class="number">16689</span> + b - <span class="number">10279</span> + c - <span class="number">32918</span> + d - <span class="number">57155</span> + e * <span class="number">26571</span> + f * <span class="number">15086</span> + (g ^ <span class="number">22986</span>) + (h ^ <span class="number">23349</span>) + (i ^ <span class="number">16381</span>) + (j ^ <span class="number">23173</span>) + k - <span class="number">40224</span> + l + <span class="number">31751</span> + m * <span class="number">8421</span> == <span class="number">7433598</span>)</span><br><span class="line">x.add(a + <span class="number">28740</span> + b - <span class="number">64696</span> + c + <span class="number">60470</span> + d - <span class="number">14752</span> + (e ^ <span class="number">1287</span>) + (f ^ <span class="number">35272</span>) + g + <span class="number">49467</span> + h - <span class="number">33788</span> + i + <span class="number">20606</span> + (j ^ <span class="number">44874</span>) + k * <span class="number">19764</span> + l + <span class="number">48342</span> + m * <span class="number">56511</span> == <span class="number">7989404</span>)</span><br><span class="line">x.add(( a ^ <span class="number">28978</span>) + b + <span class="number">23120</span> + c + <span class="number">22802</span> + d * <span class="number">31533</span> + (e ^ <span class="number">39287</span>) + f - <span class="number">48576</span> + (g ^ <span class="number">28542</span>) + h - <span class="number">43265</span> + i + <span class="number">22365</span> + j + <span class="number">61108</span> + k * <span class="number">2823</span> + l - <span class="number">30343</span> + m + <span class="number">14780</span> == <span class="number">3504803</span>)</span><br><span class="line">x.add(a * <span class="number">22466</span> + (b ^ <span class="number">55999</span>) + c - <span class="number">53658</span> + (d ^ <span class="number">47160</span>) + (e ^ <span class="number">12511</span>) + f * <span class="number">59807</span> + g + <span class="number">46242</span> + h + <span class="number">3052</span> + (i ^ <span class="number">25279</span>) + j + <span class="number">30202</span> + k * <span class="number">22698</span> + l + <span class="number">33480</span> + (m ^ <span class="number">16757</span>) == <span class="number">11003580</span>)</span><br><span class="line">x.add(a * <span class="number">57492</span> + (b ^ <span class="number">13421</span>) + c - <span class="number">13941</span> + (d ^ <span class="number">48092</span>) + e * <span class="number">38310</span> + f + <span class="number">9884</span> + g - <span class="number">45500</span> + h - <span class="number">19233</span> + i + <span class="number">58274</span> + j + <span class="number">36175</span> + (k ^ <span class="number">18568</span>) + l * <span class="number">49694</span> + (m ^ <span class="number">9473</span>) == <span class="number">25546210</span>)</span><br><span class="line">x.add(a - <span class="number">23355</span> + b * <span class="number">50164</span> + (c ^ <span class="number">34618</span>) + d + <span class="number">52703</span> + e + <span class="number">36245</span> + f * <span class="number">46648</span> + (g ^ <span class="number">4858</span>) + (h ^ <span class="number">41846</span>) + i * <span class="number">27122</span> + (j ^ <span class="number">42058</span>) + k * <span class="number">15676</span> + l - <span class="number">31863</span> + m + <span class="number">62510</span> == <span class="number">11333836</span>)</span><br><span class="line">x.add(a * <span class="number">30523</span> + (b ^ <span class="number">7990</span>) + c + <span class="number">39058</span> + d * <span class="number">57549</span> + (e ^ <span class="number">53440</span>) + f * <span class="number">4275</span> + g - <span class="number">48863</span> + (h ^ <span class="number">55436</span>) + (i ^ <span class="number">2624</span>) + (j ^ <span class="number">13652</span>) + k + <span class="number">62231</span> + l + <span class="number">19456</span> + m - <span class="number">13195</span> == <span class="number">13863722</span>)</span><br><span class="line">x.add(a == <span class="number">236</span>)</span><br><span class="line">x.add(g ^ <span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>) == <span class="number">89</span>)</span><br><span class="line">x.add(m ^ <span class="built_in">ord</span>(<span class="string">&#x27;v&#x27;</span>) == <span class="number">243</span>)</span><br><span class="line"></span><br><span class="line">check = x.check()</span><br><span class="line"><span class="built_in">print</span>(check)</span><br><span class="line"></span><br><span class="line">model = x.model()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把上面的解再代入下面的加密代码即可。</p><p>exp2(decrypt):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">236</span>,<span class="number">72</span>,<span class="number">213</span>,<span class="number">106</span>,<span class="number">189</span>,<span class="number">86</span>,<span class="number">62</span>,<span class="number">53</span>,<span class="number">120</span>,<span class="number">199</span>,<span class="number">15</span>,<span class="number">93</span>,<span class="number">133</span>]</span><br><span class="line">a = [<span class="number">132</span>, <span class="number">47</span>, <span class="number">180</span>, <span class="number">7</span>, <span class="number">216</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">246</span>, <span class="number">124</span>, <span class="number">2</span>, <span class="number">243</span>, <span class="number">137</span>, <span class="number">58</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">200</span>, <span class="number">99</span>, <span class="number">91</span>, <span class="number">83</span>, <span class="number">13</span>, <span class="number">171</span>, <span class="number">80</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">179</span>, <span class="number">58</span>, <span class="number">176</span>, <span class="number">28</span>, <span class="number">216</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">80</span>, <span class="number">39</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">58</span>, <span class="number">236</span>, <span class="number">130</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">24</span>, <span class="number">212</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">72</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(( a[i] ^ num[i%<span class="number">13</span>] ))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;z3_1s_very_u5eful_1n_rever5e_engin3ering&#125;</span></span><br></pre></td></tr></table></figure><h4 id="patch">patch</h4><p>问题应该出在gets函数的栈溢出漏洞，需要换成更安全的fgets。patch不出来啊问题是，ChatGPT也没用，只能找判断函数动调了。</p><p>按照出题人给的hint：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测是否patch成功的部分代码：</span></span><br><span class="line"><span class="type">char</span> to_stdin[<span class="number">73</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">36</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    to_stdin[i*<span class="number">2</span>]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    to_stdin[i*<span class="number">2</span>+<span class="number">1</span>]=<span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">to_stdin[<span class="number">72</span>]=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">to_stdin[<span class="number">73</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">write(writefd[<span class="number">1</span>],to_stdin,<span class="number">74</span>);</span><br><span class="line"><span class="type">char</span> stdout_arr[<span class="number">300</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">read(readfd[<span class="number">0</span>],stdout_arr,<span class="number">300</span>);</span><br><span class="line">to_stdin[<span class="number">23</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(stdout_arr,to_stdin))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nthere are still bugs...\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后一路狂飙去找长相差不多的汇编代码，报错直接跳，关键点在<code>'%'</code>、<code>'n'</code>这几个地方，然后改标志位进正确分支就可以了。</p><p>需要注意的是在init函数里注册了一个反动调的函数，原理是检测TracerId是否为0，不为0就给你掐了。在<code>exit(0)</code>的分支前面断一下改一下标志位就好了。</p><img src="https://s2.loli.net/2023/02/06/NYhPdewq6vmAfkU.png" width=80% /><p>改标志位的位置在下面两个地方：</p><img src="https://s2.loli.net/2023/02/06/IPAoCRNQJsbFSmh.png" width=80% /><img src="https://s2.loli.net/2023/02/06/wGu8dPBZTcrR29l.png" width=80% /><p>最后的Flag：</p><img src="https://s2.loli.net/2023/02/06/jzPgd7eJSKaEuoD.png" width=80% /><h2 id="Week4">Week4</h2><h3 id="Reverse-4">Reverse</h3><h4 id="shellcode">shellcode</h4><p>go写的玩意，看不懂但能做。如果动调的话需要在文件夹下创建一个inputdir文件夹并写入文件，出来的结果在outputdir文件夹里。逆向的目的就是根据outputdir里已有的flag.enc去找flag。</p><img src="https://s2.loli.net/2023/02/06/Wr7VaJLZzO1RN3p.png" width=80% /><p>一个base64，解码完是视觉意义上的乱码。</p><p>喂给ChatGPT，它说是x86汇编，再多的它不会了。</p><img src="https://s2.loli.net/2023/02/06/EMqsv4dmAW9tJ5y.png" width=80% /><p>喂给艾达女神，发现是TEA加密。</p><img src="https://s2.loli.net/2023/02/06/I42QU5Xzk1b3AG9.png" width=80% /><p>三分逆向七分猜，试了几次出了Flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = -<span class="number">0x543210DD</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):                       </span><br><span class="line">        v1.value -= ((v0.value&lt;&lt;<span class="number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="number">5</span>) + k3) </span><br><span class="line">        v0.value -= ((v1.value&lt;&lt;<span class="number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="number">5</span>) + k1)  </span><br><span class="line">        total.value -= delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value  </span><br><span class="line"></span><br><span class="line">key = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line">value = [<span class="number">0x20</span>,<span class="number">0x69</span>,<span class="number">0xB3</span>,<span class="number">0xE4</span>,<span class="number">0xD0</span>,<span class="number">0x24</span>,<span class="number">0x69</span>,<span class="number">0x93</span>,<span class="number">0x44</span>,<span class="number">0xD1</span>,<span class="number">0x16</span>,<span class="number">0xA8</span>,<span class="number">0xF5</span>,<span class="number">0xD5</span>,<span class="number">0x82</span>,<span class="number">0xAA</span>,<span class="number">0xDA</span>,<span class="number">0xF0</span>,<span class="number">0x79</span>,<span class="number">0x36</span>,<span class="number">0x06</span>,<span class="number">0xFD</span>,<span class="number">0x32</span>,<span class="number">0x7F</span>,<span class="number">0xD3</span>,<span class="number">0xC0</span>,<span class="number">0x60</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x49</span>,<span class="number">0x21</span>,<span class="number">0xB7</span>,<span class="number">0xA2</span>,<span class="number">0x69</span>,<span class="number">0x72</span>,<span class="number">0xE5</span>,<span class="number">0xFA</span>,<span class="number">0x51</span>,<span class="number">0x6A</span>,<span class="number">0x83</span>]</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">enc = []</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(value)//<span class="number">4</span>):</span><br><span class="line">    v = value[i*<span class="number">4</span>+<span class="number">3</span>] * <span class="number">16</span> ** <span class="number">6</span> + value[i*<span class="number">4</span>+<span class="number">2</span>] * <span class="number">16</span> ** <span class="number">4</span> + value[i*<span class="number">4</span>+<span class="number">1</span>] * <span class="number">16</span> ** <span class="number">2</span> + value[i*<span class="number">4</span>]</span><br><span class="line">    enc.append(v)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        flag += decrypt(enc,key)</span><br><span class="line">        enc = []</span><br><span class="line"></span><br><span class="line">f = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    ftmp = long_to_bytes(i).decode()</span><br><span class="line">    f1 = <span class="built_in">list</span>(ftmp)</span><br><span class="line">    f1.reverse()</span><br><span class="line">    f += <span class="string">&#x27;&#x27;</span>.join(f1)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># hgame&#123;th1s_1s_th3_tutu&#x27;s_h0mew0rk&#125;</span></span><br></pre></td></tr></table></figure><h4 id="vm">vm</h4><p>很清楚的虚拟机逆向。</p><img src="https://s2.loli.net/2023/02/06/HOaiUWC49tukLgP.png" width=80% /><p>Flag40字节，用judge函数去模拟虚拟机运行。</p><p>然后根据code里面的数据去模拟汇编指令，以case 0为例：</p><img src="https://s2.loli.net/2023/02/06/kBFm8w1dMcotI4G.png" width=80% /><p>进入不同的分支则进行不同的操作，如<code>0 2 0 3</code>是将寄存器3的值mov到寄存器0中，而<code>0 3 0 3</code>则是将立即数3mov到寄存器0中。</p><p>由此，我们可以模拟出<code>mov</code>、<code>push</code>、<code>pop</code>、<code>add</code>、<code>sub</code>、<code>xor</code>、<code>shl</code>、<code>shr</code>、<code>cmp</code>、<code>jmp</code>、<code>jz/je</code>等指令，也可以模拟读取等操作。</p><p>重要的是搞清楚a1所模拟的寄存器类型：e0、e1、e2、e3、e4、e5、ip、sp、zf，每32位取低位作为16位寄存器。这点可以从模拟shl的代码看出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)(a1 + <span class="number">4</span>i64 * code[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) &lt;&lt;= *(_DWORD *)(a1 + <span class="number">4</span>i64 * code[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">3</span>]);<span class="comment">// vm_shl</span></span><br><span class="line">*(_DWORD *)(a1 + <span class="number">4</span>i64 * code[*(_DWORD *)(a1 + <span class="number">24</span>) + <span class="number">2</span>]) &amp;= <span class="number">0xFF00</span>u;</span><br></pre></td></tr></table></figure><p>在模拟<code>push</code>和<code>pop</code>的分支里我们可以找到模拟栈<code>stack</code>。</p><img src="https://s2.loli.net/2023/02/06/wpcYJPAg8qSQnx6.png" width=80% /><p>另外注意每条指令执行完ip的增量（即指令长度），然后我们就可以把code里的vm机器码翻译成vm汇编并解读了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">0,   3,   2,   0,   mov e2,0</span><br><span class="line">3,   0,   2,   3,   add e2,e3</span><br><span class="line">0,   0,   0,   0,   read e0,input[e2]</span><br><span class="line">0,   2,   1,   0,   mov e1,e0</span><br><span class="line">0,   3,   2,  50,   mov e2,50</span><br><span class="line">3,   0,   2,   3,   add e2,e3</span><br><span class="line">0,   0,   0,   0,   read e0,input[e2(50)]</span><br><span class="line">3,   0,   1,   0,   add e1,e0</span><br><span class="line">0,   3,   2, 100,   mov e2,100</span><br><span class="line">3,   0,   2,   3,   add e2,e3</span><br><span class="line">0,   0,   0,   0,   read e0,input[e2(100)]</span><br><span class="line">;前面部分为输入，以第0次读为例，执行完毕后e0=input[100],e1=input[0]+input[50],e2=100,e3=0(第0次读数)</span><br><span class="line">3,   3,   1,   0,   xor e1,e0</span><br><span class="line">0,   3,   0,   8,   mov e0,8</span><br><span class="line">0,   2,   2,   1,   mov e2,e1</span><br><span class="line">3,   4,   1,   0,   shl e1,e0(8)      ;e1 &amp;= 0x0000FF00</span><br><span class="line">3,   5,   2,   0,   shr e2,e0(8)</span><br><span class="line">3,   0,   1,   2,   add e1,e2</span><br><span class="line">0,   2,   0,   1,   mov e0,e1</span><br><span class="line">1,   0,             push e0</span><br><span class="line">;加密并压栈，压栈数据为((((input[0]+input[50])^input[100])&lt;&lt;8)&amp;ff00) + (((input[0]+input[50])^input[100])&gt;&gt;8)</span><br><span class="line">;接着读下一个，直到读完所有40个数据开始判断</span><br><span class="line">0,   3,   0,   1,   mov e0,1</span><br><span class="line">3,   0,   3,   0,   add e3,e0</span><br><span class="line">0,   2,   0,   3,   mov e0,e3</span><br><span class="line">0,   3,   1,  40,   mov e1,40</span><br><span class="line">4,                  cmp e0,e1         ;判断是否相等，相等为0，不等为1</span><br><span class="line">6,  95,             jz code[95]       ;将ip设置为95(即跳过下面的jmp)</span><br><span class="line">5,   0,             jmp code[0]       ;重头读</span><br><span class="line">0,   3,   3,   0,   mov e3,0          ;ip为95</span><br><span class="line">;之后的指令判断依次pop出来的玩意是不是和input[150]及之后的数据对应相等，如相等继续判断下一个，不相等直接break</span><br><span class="line">2,   1,             pop e1            ;ip为99</span><br><span class="line">0,   3,   2, 150,   mov e2,150</span><br><span class="line">3,   0,   2,   3,   add e2,e3</span><br><span class="line">0,   0,   0,   0,   read e0,input[e2(150)]</span><br><span class="line">4,                  cmp e0,e1         ;判断是否相等，相等为0，不等为1</span><br><span class="line">7, 136,             jnz code[136]     ;将ip设置为136(retn)</span><br><span class="line">0,   3,   0,   1,   mov e0,1</span><br><span class="line">3,   0,   3,   0,   add e3,e0</span><br><span class="line">0,   2,   0,   3,   mov e0,e3</span><br><span class="line">0,   3,   1,  40,   mov e1,40</span><br><span class="line">4,                  cmp e0,e1         ;判断是否相等，相等为0，不等为1</span><br><span class="line">7,  99,             jnz code[99]      ;将ip设置为99(pop)</span><br><span class="line">255, 255,           retn              ;返回最后一次判断的zf</span><br></pre></td></tr></table></figure><p>根据条件爆破Flag。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a1 = [<span class="number">155</span>,<span class="number">168</span>,<span class="number">2</span>,<span class="number">188</span>,<span class="number">172</span>,<span class="number">156</span>,<span class="number">206</span>,<span class="number">250</span>,<span class="number">2</span>,<span class="number">185</span>,<span class="number">255</span>,<span class="number">58</span>,<span class="number">116</span>,<span class="number">72</span>,<span class="number">25</span>,<span class="number">105</span>,<span class="number">232</span>,<span class="number">3</span>,<span class="number">203</span>,<span class="number">201</span>,<span class="number">255</span>,<span class="number">252</span>,<span class="number">128</span>,<span class="number">214</span>,<span class="number">141</span>,<span class="number">215</span>,<span class="number">114</span>,<span class="number">0</span>,<span class="number">167</span>,<span class="number">29</span>,<span class="number">61</span>,<span class="number">153</span>,<span class="number">136</span>,<span class="number">153</span>,<span class="number">191</span>,<span class="number">232</span>,<span class="number">150</span>,<span class="number">46</span>,<span class="number">93</span>,<span class="number">87</span>]</span><br><span class="line">a2 = [<span class="number">201</span>,<span class="number">169</span>,<span class="number">189</span>,<span class="number">139</span>,<span class="number">23</span>,<span class="number">194</span>,<span class="number">110</span>,<span class="number">248</span>,<span class="number">245</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">213</span>,<span class="number">70</span>,<span class="number">93</span>,<span class="number">22</span>,<span class="number">152</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">115</span>,<span class="number">56</span>,<span class="number">193</span>,<span class="number">94</span>,<span class="number">237</span>,<span class="number">176</span>,<span class="number">41</span>,<span class="number">90</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">167</span>,<span class="number">253</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">120</span>,<span class="number">139</span>,<span class="number">98</span>,<span class="number">219</span>,<span class="number">15</span>,<span class="number">143</span>,<span class="number">156</span>]</span><br><span class="line">enc = [<span class="number">18432</span>,<span class="number">61696</span>,<span class="number">16384</span>,<span class="number">8448</span>,<span class="number">13569</span>,<span class="number">25600</span>,<span class="number">30721</span>,<span class="number">63744</span>,<span class="number">6145</span>,<span class="number">20992</span>,<span class="number">9472</span>,<span class="number">23809</span>,<span class="number">18176</span>,<span class="number">64768</span>,<span class="number">26881</span>,<span class="number">23552</span>,<span class="number">44801</span>,<span class="number">45568</span>,<span class="number">60417</span>,<span class="number">20993</span>,<span class="number">20225</span>,<span class="number">6657</span>,<span class="number">20480</span>,<span class="number">34049</span>,<span class="number">52480</span>,<span class="number">8960</span>,<span class="number">63488</span>,<span class="number">3072</span>,<span class="number">52992</span>,<span class="number">15617</span>,<span class="number">17665</span>,<span class="number">33280</span>,<span class="number">53761</span>,<span class="number">10497</span>,<span class="number">54529</span>,<span class="number">1537</span>,<span class="number">41473</span>,<span class="number">56832</span>,<span class="number">42497</span>,<span class="number">51713</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> ((((ch+a1[i])^a2[i])&lt;&lt;<span class="number">8</span>)&amp;<span class="number">0xff00</span>) + (((ch+a1[i])^a2[i])&gt;&gt;<span class="number">8</span>) == enc[<span class="number">39</span>-i]: <span class="comment"># 压栈与弹栈的顺序相反</span></span><br><span class="line">            flag += <span class="built_in">chr</span>(ch)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="写在最后">写在最后</h2><p>学到的东西越多，越发觉得自己学的东西还不够。<br>希望新的一年也能和Merak的各位共同努力。</p><img src="https://s2.loli.net/2023/02/06/fBWLrSmlJ6PIRs4.jpg" width=80% />]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/M1sc/">M1sc</category>
      
      <category domain="http://CH3COOH12138.github.io/tags/Rever-e/">Rever$e</category>
      
      <category domain="http://CH3COOH12138.github.io/tags/Crypt0/">Crypt0</category>
      
      <category domain="http://CH3COOH12138.github.io/tags/W3b/">W3b</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/02/06/hgame2023wp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>肉眼扫描二维码的一种思路</title>
      <link>http://ch3cooh12138.github.io/2023/01/16/crash-qrcode-by-hand/</link>
      <guid>http://ch3cooh12138.github.io/2023/01/16/crash-qrcode-by-hand/</guid>
      <pubDate>Mon, 16 Jan 2023 11:06:57 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前情提要&quot;&gt;前情提要&lt;/h2&gt;
&lt;p&gt;早就听闻天枢&amp;amp;天璇战队里面个个都是人才，说话又好听，还会肉眼扫人脸发送微信好友请求。&lt;/p&gt;
&lt;p&gt;众所周知，大部分普通人都是通过微信扫二维码添加好友请求的，那“肉眼扫人脸发送微信好友请求”这一看似复杂的动作就可以简单</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前情提要">前情提要</h2><p>早就听闻天枢&amp;天璇战队里面个个都是人才，说话又好听，还会肉眼扫人脸发送微信好友请求。</p><p>众所周知，大部分普通人都是通过微信扫二维码添加好友请求的，那“肉眼扫人脸发送微信好友请求”这一看似复杂的动作就可以简单的分成以下两步：</p><ol><li>将人脸转化为微信好友二维码。</li><li>肉眼扫描转化后的二维码。</li></ol><p>下面简要讲讲第二步的思路。</p><h2 id="二维码基础知识">二维码基础知识</h2><p>二维码分为很多种，应用最广泛的一种二维码叫做“快速响应矩阵图码”(QR Code)。除了我们常见的QR码外，使用比较广泛的还有：PDF417、DM、汉信码等。下面所说的“二维码”都指QR码。</p><p>二维码格式示例如下：</p><img src="https://s2.loli.net/2023/01/16/Kghqa4Q9pntJyHO.webp" width=80% /><h3 id="定位图案">定位图案</h3><p>Position Detection Pattern（位置探测图形）是定位图案的一种，就是每个二维码都有的左上、左下和右上三个角的“回”字形的标志。用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个，因为三个就足以标识一个矩形了，用四个反而多余，且会使得能够表示的数据空间变小，扫描器在进行二维码扫描的时候会根据这三个定位标识符来更正二维码的坐标，方便进行扫描。这块区域的尺寸固定，无论是哪个版本的二维码，他的尺寸都是7*7的模块。</p><img src="https://s2.loli.net/2023/01/16/DCSZIsBjWR7Uwqo.webp" width=50% /><p>Alignment Patterns（校正图形） 只有在Version 2以上（包括Version2）的二维码中需要这个东西，同样是为了定位用的。它的尺寸也是固定的，为5*5的模块。</p><img src="https://s2.loli.net/2023/01/16/QXAG6iPDNVkehLt.webp" width=50% /><h3 id="格式信息">格式信息</h3><p>Format Information 存在于所有的版本中，用于存放一些格式化数据的，通过读取这部分的内容，可以知道当前二维码的纠错等级、掩码类别。主要内容为“纠错等级（2bit）+ 掩码类别（3bit）+ BCH code(10bit,用于纠错)”，然后这15个bits还要与101010000010010做XOR操作，主要是为了如果选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加扫描器的图像识别的困难。</p><p>为了增强二维码的容错能力，保证在一定的损坏范围内，不会影响数据的读取，共设计了两个区域来存放两条一模一样的格式信息。<br>这15个bit在format information区域内的分布以及顺序如下（下图中数字的顺序就是这15个bit的存放顺序，应当注意的是这些数字表示的是位的高低，也就是当获取到格式信息15个bit长度的二进制字符串时，左边为高位，右边为低位，所以最左侧的二进制数字应该在14的位置，最右侧的二进制数字应该在0的位置）：</p><img src="https://s2.loli.net/2023/01/16/H5Z7LGi1f8pmakU.webp" width=80% /><h3 id="版本信息">版本信息</h3><p>Version Information 在&gt;= Version 7的版本中，预留两块3*6的区域存放一些版本信息。</p><p><a href="https://www.thonky.com/qr-code-tutorial/format-version-tables#list-of-all-format-information-string">这里</a>可以查询所有版本、掩码及纠错码的格式信息及版本信息。</p><h3 id="数据码字和纠错码字">数据码字和纠错码字</h3><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码字 和 Error Correction Code 纠错码字。我们后面就简称数据码和纠错码，就是最前面两张图的深灰色区域，一般数据都是从右下角开始填充，先填充数据码，数据码填充完毕之后再填充纠错码，以version1为例，数据的填充顺序，是这样的：</p><img src="https://s2.loli.net/2023/01/16/xJ4UNGmBZX5s27K.webp" width=80% /><p>当然，随着版本的升高，会有越来越多的校正图形掺杂在其中，这样的话，数据填充可能就不是这么规矩的矩形了，但是总体的填充顺序不会大变化，都是先右后左的顺序。具体的可参考官方的文档。</p><h2 id="解码流程">解码流程</h2><p>有了上面这些前置信息，我们就可以开始手撕二维码了。</p><img src="https://s2.loli.net/2023/01/16/PQGroVNg5WuOZCM.png" width=50% /><p>以封面二维码（如上图）为例，首先我们先读取format information区域内的掩码信息。</p><img src="https://s2.loli.net/2023/01/16/kXfgpCZvDMQweK3.png" width=50% /><img src="https://s2.loli.net/2023/01/16/IlRcN2z38Snyusg.webp" width=50% /><img src="https://s2.loli.net/2023/01/16/PC8qxmctp3VLwzg.webp" width=50% /><p>对照上面第一张掩码表后（或异或101后对照第二张掩码表），得出异或的图案为<code>(i + j) % 2 = 0</code>。<br>之后再用掩模进行异或，这里推荐一个好用的工具<a href="https://github.com/Merricx/qrazybox">Qrazybox</a>。可以自动实现掩模异或功能。</p><p>异或后二维码如下图所示：</p><img src="https://s2.loli.net/2023/01/16/evyHVZI6795OYtT.png" width=80% /><p>从右下角按从右往左、从下往上的顺序依次读取。前四位代表模式编码（具体参照下图），接着八位代表数据长度，接下来就是数据码区域。</p><img src="https://s2.loli.net/2023/01/16/PDpH38b1T4waeXJ.webp" width=80% /><p>前四位（红色框内数据）0100表示UTF-8模式，接下来八位（黄色框内数据）00000110表示6字节的数据长度。那么我们只需要读接下来的6字节数据就可以了，具体如下。</p><table><thead><tr><th>序号</th><th>二进制字节</th><th>解码后数据</th></tr></thead><tbody><tr><td>1</td><td>01010110</td><td>唯</td></tr><tr><td>2</td><td>11100110</td><td>乌</td></tr><tr><td>3</td><td>10001000</td><td>偶</td></tr><tr><td>4</td><td>10010001</td><td>我</td></tr><tr><td>5</td><td>00110101</td><td>舞</td></tr><tr><td>6</td><td>00110000</td><td>狮</td></tr></tbody></table><p>可以看见这是一篇著名文章的结尾部分。</p><blockquote><p>我依稀记得那是一个夏天。<br>稚童的我和小伙伴正模仿庙会上翻飞的彩狮。<br>从未见过的人和从未见过的机器喧嚷着碾过村里的田坎。<br>现代化的浪潮就这样闯入了我的生活。<br>当时的我没有太多感触，只是觉得路变宽了，大人们都忙了起来。<br>我们是乡里远近闻名的少年舞狮队，田大爷说，我们将会是以后庙会上的主角。<br>但是再也没有庙会了。<br>机器的轰鸣碾碎了村口闲聊的碎语，碾碎了田垄上劳作的农歌，扬起满天尘埃，在阳光的反射中勾勒一副似乎是幸福的画卷。<br>它像是一条条线，将每个人细细的拆分开。<br>我考上了高中，然后是大学，我离开了大山。<br>从前幻想着在庙会上跃动的小伙伴们也四散而去。<br>城市，城市。<br>我初次踏上那里的土地，给我的是一种来自灵魂的震荡。<br>它像是一只猛兽，不停的吞噬四周，大山不能阻挡它，我也不能。<br>一切好像都会被裹挟其中，然后成为它的一部分。<br>但是村子最终并没有融入其中，阻挡它的不是大山，也不是任何人，而是枯竭的矿脉。<br>当我回到村子的时候，记忆里繁忙的路上只剩三两只白鸭阔步而行。<br>正是一个星期的中点，曾是村子里最喧闹的时节，但现在寂静无声。<br>再没有机器的轰鸣，也没有工人劳动的号子，更没有农妇们闲聊的细语。<br>浪潮曾经席卷而过，退潮也几乎带走了它曾带来的一切，还带走了所有的年轻人，只留下零散的历史遗留者。<br>李老师，现在的李大爷帮我打开了老屋的大门。<br>老屋还是老屋，只是布满了灰尘。意外的，我在长满了杂草了的杂物房中寻到了一个褪色的狮头，脆弱的它居然能在岁月的刻刀下幸存。<br>随手拿起它，眼前似乎又浮现当年壮志满怀的小伙伴，耳畔仿佛又响起庙会锣鼓的鼓点。<br>烈阳如火，依稀还是那个夏天。<br>“封———矿———啦———”<br>一声悠远的雷响不知从何而来，在山间回荡不绝，为曾路过小村的潮水刻上一个终点。<br>封矿星期四，唯我舞狮。</p></blockquote><h2 id="写在最后">写在最后</h2><p>为什么没有纠错码的部分？只要将第一步“将人脸转化为微信好友二维码”做好，就不存在数据丢失的问题，自然用不到纠错码。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/M1sc/">M1sc</category>
      
      
      <comments>http://ch3cooh12138.github.io/2023/01/16/crash-qrcode-by-hand/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>搞点颜色</title>
      <link>http://ch3cooh12138.github.io/2022/12/02/color1/</link>
      <guid>http://ch3cooh12138.github.io/2022/12/02/color1/</guid>
      <pubDate>Fri, 02 Dec 2022 02:48:42 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;色彩本质&quot;&gt;色彩本质&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;光色并存，有光才有色。色彩感觉是离不开光的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在小学二年级就学过，色彩视觉感受是由不同波长和振幅的可见光所引起的。不同人所能感受到的颜色波长范围略有差异，</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="色彩本质">色彩本质</h2><blockquote><p>光色并存，有光才有色。色彩感觉是离不开光的。</p></blockquote><p>我们在小学二年级就学过，色彩视觉感受是由不同波长和振幅的可见光所引起的。不同人所能感受到的颜色波长范围略有差异，但大致都落在380mm~780mm的区间内。可见光的波长决定了色相，而振幅决定了明暗。</p><p>物体表面色彩的形成主要取决于三个方面：光源的照射（光源色）、物体本身反射一定的色光（物体色）、环境与空间对物体色彩的影响（环境色）。</p><h2 id="色彩属性">色彩属性</h2><p>色彩初步可分为无彩色和有彩色两大类。</p><p>无彩色即黑白灰，具有明暗，但是无彩色调；有彩色即红橙黄绿青蓝紫等颜色，是有彩调的。</p><p>有彩色具有三种属性：明度、色相、艳度。它们被称为色彩的三大属性。</p><img src="https://s2.loli.net/2022/12/01/7S9PhjDRmyBclXi.png" width=80% /><h3 id="明度（Brightness）">明度（Brightness）</h3><p>顾名思义，明度指色彩的明暗程度。各种有色物体由于它们的反射光量的区别而产生颜色的明暗强弱。这里分两种情况讨论：</p><ol><li><strong>同一色相明度变化</strong>指的就是同一颜色加黑、白以后产生的不同的明度变化。</li><li><strong>不同色相明度变化</strong>指不同的纯色有其对应的明度，如黄色明度最高，蓝紫色明度最低，红绿色为中间明度。具体公式为：</li></ol><img src="https://s2.loli.net/2022/12/02/y8lYWu7eiwrUqS4.jpg" width=50% /> <p>L取值范围为0~1，RGB颜色值不能简单直接相加，必须用2.2次方换算成物理光功率。</p><p>无彩色也具有明度，即在黑白之间不同程度的灰。</p><h3 id="色相（Hue）">色相（Hue）</h3><p><s>色相指一个人的姿色容貌够不够涩，</s> 色相指色彩呈现出来的质地面貌，是有彩色的最大特征。</p><p>最初的基本色相为：红、橙、黄、绿、蓝、紫。在各色中间插入中间色，就得到了十二基本色相：红、橙红、黄橙、黄、黄绿、绿、绿蓝、蓝绿、蓝、蓝紫、紫、红紫。这十二色相的彩调变化，在光谱色感上是均匀的。如果进一步再找出其中间色，便可以得到二十四个色相。二十四色相环每一色相间距为15度，它们可根据PCCS体系标号，具体如下：</p><img src="https://s2.loli.net/2022/12/01/jFgJ31ITKkvAZ6Q.jpg" width=80% /><p>在图中可以看到几种特殊的颜色：心理四原色、色料三原色和色光三原色，具体如下：</p><ul><li>心理四原色：红、黄、蓝、绿；</li><li>色料三原色：红紫、黄、蓝绿；</li><li>色光三原色：泛黄的红、绿、泛紫的蓝。</li></ul><p>结合明度和下面要讲的艳度，PCCS可以把颜色分为若干色调（Tone)，具体如下：</p><img src="https://s2.loli.net/2022/12/01/hyerQ2iuUPmSb6l.webp" width=80% /><h3 id="艳度（Saturation）">艳度（Saturation）</h3><p>也叫做纯度或饱和度。它表示颜色中所含某一色彩的成分比例。比如红色，以无彩色为基轴，当其加入白色时，就变成了粉红色；当其加入黑色时，就变成了深红色；当其加入灰色时，其明度没有改变，而艳度降低了。从而我们可以知道，越靠近无彩色，则艳度越低，色越浊、越灰；越靠近色相环则艳度越高，色彩越鲜艳。</p><h2 id="色彩对比">色彩对比</h2><h3 id="明度对比">明度对比</h3><p>顾名思义，明度对比是因明度差别而形成的色彩对比。如果将明度分为十度，0度为明度最低，9度为明度最高。明度在0~2度的色彩称为低调色，3~6度的色彩称为中调色，7~9度的色彩称为高调色。</p><p><strong>色彩间明度差别的大小，决定明度对比的强弱。</strong> 当基调色与对比色间隔距离在6度及以上时，称为长（强）对比，3~5度时称为中对比，1~2度时称为短（弱）对比。据此可划分为十种明度对比基本类型：</p><img src="https://s2.loli.net/2022/12/01/wOmKbshndeNlXEt.jpg" width=80% /><table><thead><tr><th>类型名称</th><th>基调色</th><th>明度差别</th><th>情感表达</th></tr></thead><tbody><tr><td><strong>高长调</strong></td><td>高明度</td><td>长对比</td><td>积极的，刺激的，对比强烈的，快速明了的</td></tr><tr><td><strong>高中调</strong></td><td>高明度</td><td>中对比</td><td>明快的，响亮的，活泼的</td></tr><tr><td><strong>高短调</strong></td><td>高明度</td><td>短对比</td><td>优雅的，柔和的，女性化的，朦胧的</td></tr><tr><td><strong>中长调</strong></td><td>中明度</td><td>长对比</td><td>有力度的，男性化的</td></tr><tr><td><strong>中中调</strong></td><td>中明度</td><td>中对比</td><td>含蓄的，丰富的，薄暮感的</td></tr><tr><td><strong>中短调</strong></td><td>中明度</td><td>短对比</td><td>模糊的，平板的，朴素的</td></tr><tr><td><strong>低长调</strong></td><td>低明度</td><td>长对比</td><td>低沉的，爆发性的，晦暗的</td></tr><tr><td><strong>低中调</strong></td><td>低明度</td><td>中对比</td><td>苦恼的，苦闷感的，寂寞的</td></tr><tr><td><strong>低短调</strong></td><td>低明度</td><td>短对比</td><td>忧郁感的，死寂的，模糊不清的</td></tr><tr><td><strong>最长调</strong></td><td>黑白色</td><td>最长对比</td><td>醒目的，生硬的，明晰的，简单化的</td></tr></tbody></table><p>e.g.</p><img src="https://s2.loli.net/2022/12/01/I5ypARuKrDaGYWx.jpg" width=80% /><h3 id="色相对比">色相对比</h3><p>顾名思义，色相对比是因色相差别而形成的色彩对比。虽然色相的差别由光的波长所导致，但是我们不能完全根据波长的差别来确定色相的差别和对比程度，还需要借助色相环。 <strong>色相在色相环上的距离，决定色相对比的强弱。</strong> 据此可划分为六种色相对比基本类型：</p><table><thead><tr><th>类型名称</th><th>色相距离</th><th>情感表达</th><th>栗子</th></tr></thead><tbody><tr><td><strong>同类色相对比</strong></td><td>15度以内</td><td>单纯、柔和但可能单调、呆板</td><td>蓝与浅蓝</td></tr><tr><td><strong>邻接色相对比</strong></td><td>30度左右</td><td>同上</td><td>红橙与橙</td></tr><tr><td><strong>类似色相对比</strong></td><td>60度左右</td><td>丰富、活泼</td><td>红与黄橙</td></tr><tr><td><strong>中差色相对比</strong></td><td>90度左右</td><td>明快、饱满</td><td>黄与绿</td></tr><tr><td><strong>对比色相对比</strong></td><td>120度左右</td><td>对比鲜明、强烈，容易视觉疲劳</td><td>黄绿与红紫</td></tr><tr><td><strong>互补色相对比</strong></td><td>180度左右</td><td>对比完整、刺激但可能幼稚、粗俗</td><td>红与蓝绿</td></tr></tbody></table><p>e.g.</p><img src="https://s2.loli.net/2022/12/01/sMZmOfVqWwxSeCH.jpg" width=80% /><p>另外，在实际应用中，无彩色也经常加入到对比的行列之中，可大致分为以下两种：</p><ol><li><strong>无彩色对比</strong>：大方、庄重、素净、单调，如黑与白等；</li><li><strong>无彩色与有彩色对比</strong>：大方、活泼，如白与蓝等。</li></ol><h3 id="艳度对比">艳度对比</h3><p>和明度对比类似，将艳度分为十度，0度为艳度最低，9度为艳度最高。明度在0~2度的色彩称为低艳度，3~6度的色彩称为中艳度，7~9度的色彩称为高艳度。当基调色与对比色间隔距离在6度及以上时，称为强对比，3~5度时称为中对比，1~2度时称为弱对比。据此可划分为十种艳度对比基本类型。</p><table><thead><tr><th>类型名称</th><th>基调色</th><th>艳度差别</th><th>情感表达</th></tr></thead><tbody><tr><td><strong>鲜强调</strong></td><td>高艳度</td><td>强对比</td><td>鲜艳的，生动的，活泼的</td></tr><tr><td><strong>鲜中调</strong></td><td>高艳度</td><td>中对比</td><td>较刺激的，较生动的</td></tr><tr><td><strong>鲜弱调</strong></td><td>高艳度</td><td>弱对比</td><td>刺目的，俗气的，粗鲁的</td></tr><tr><td><strong>中强调</strong></td><td>中艳度</td><td>强对比</td><td>适当的，大众化的</td></tr><tr><td><strong>中中调</strong></td><td>中艳度</td><td>中对比</td><td>温和的，静态的，舒适的</td></tr><tr><td><strong>中弱调</strong></td><td>中艳度</td><td>弱对比</td><td>平板的，含混的，单调的</td></tr><tr><td><strong>灰强调</strong></td><td>低艳度</td><td>强对比</td><td>大方的，高雅的，活泼的</td></tr><tr><td><strong>灰中调</strong></td><td>低艳度</td><td>中对比</td><td>沉静的，较大方的</td></tr><tr><td><strong>灰弱调</strong></td><td>低艳度</td><td>弱对比</td><td>雅致的，耐看的，朦胧的</td></tr><tr><td><strong>无彩色对比</strong></td><td>无彩色</td><td>无差别</td><td>大方的，庄重的，高雅的，朴素的</td></tr></tbody></table><p>e.g.</p><img src="https://s2.loli.net/2022/12/01/wt3BVuXkD9vGriZ.jpg" width=80% /><h2 id="色彩混合">色彩混合</h2><h3 id="加色混合">加色混合</h3><p>指色光的混合。加色混合的结果是色相的改变、明度的提高、纯度不下降。</p><img src="https://s2.loli.net/2022/12/02/UuTWah31FPpi8Kg.png" width=60% /><h3 id="减色混合">减色混合</h3><p>指色料的混合，原理是对不同色光的吸收与反射。减色混合的结果是色相的改变、明度的下降、纯度的下降。</p><img src="https://s2.loli.net/2022/12/02/o8UwAJWka7CgBSx.png" width=60% /><h3 id="空间混合">空间混合</h3><p>将两种或多种颜色穿插、并置在一起，于一定的视觉空间之外，能在人眼中造成混合的效果。其实颜色本身并没有真正混合，它们不是发光体，而只是反射光的混合。在工业印刷中经常用到，如下图：</p><img src="https://s2.loli.net/2022/12/02/tsSe12HzvwmA8r5.jpg" width=60% />]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Design/">Design</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Color/">Color</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/12/02/color1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>牢后感</title>
      <link>http://ch3cooh12138.github.io/2022/11/24/py6/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/24/py6/</guid>
      <pubDate>Thu, 24 Nov 2022 15:42:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;锣鼓的题目素质极低，评测点经常有乱七八糟的空格，用Python写的时候随手加 &lt;strong&gt;.strip()&lt;/strong&gt; 以避免坐牢。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>锣鼓的题目素质极低，评测点经常有乱七八糟的空格，用Python写的时候随手加 <strong>.strip()</strong> 以避免坐牢。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Python/">Python</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Python/">Python</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/24/py6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>汇编语言中的标志寄存器及其相关指令</title>
      <link>http://ch3cooh12138.github.io/2022/11/22/assembly-flag/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/22/assembly-flag/</guid>
      <pubDate>Mon, 21 Nov 2022 18:17:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;深夜动调，有感而发。&lt;br&gt;
本来是打算看完《汇编语言》再出一篇博客的，但是我急了，一边学汇编一边学动调，调到一半发现循环出不来，标志寄存器这么多又看不懂，度娘又讲不明白，所以直接从第四章跳到第十一章标志寄存器，粗浅学习一下罢。&lt;br&gt;
看不懂汇编代码的动调挺没安全感的。&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>深夜动调，有感而发。<br>本来是打算看完《汇编语言》再出一篇博客的，但是我急了，一边学汇编一边学动调，调到一半发现循环出不来，标志寄存器这么多又看不懂，度娘又讲不明白，所以直接从第四章跳到第十一章标志寄存器，粗浅学习一下罢。<br>看不懂汇编代码的动调挺没安全感的。</p><h2 id="FLAGS">FLAGS</h2><p><strong>标志寄存器</strong>（PSW/FLAGS）和其他寄存器不一样，其他寄存器用来存放数据，都是整个寄存器具有一个含义。而标志寄存器是按位起作用的，也就是说，它的每一位都有专门的含义，记录特定的信息。</p><p>书中以8086CPU（16位）作为例子，它的结构如下图所示：</p><img src="https://s2.loli.net/2022/11/22/swgSzvkJ84o6QRO.png" width=80% /><p>相关指令（大多是运算指令）执行后，执行结果会对标志寄存器的某些位造成影响。</p><h3 id="ZF（零标志）">ZF（零标志）</h3><p>ZF(Zero flag)，零标志。它记录相关指令执行后，其结果是否为零。如果结果为零，那么<code>zf=1</code>；如果结果不为零，那么<code>zf=0</code>。</p><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">sub ax,1</span><br><span class="line">; ax=0 zf=1</span><br></pre></td></tr></table></figure><h3 id="PF（奇偶校验标志）">PF（奇偶校验标志）</h3><p>PF(Parity flag)，奇偶校验标志。它记录相关指令执行后，其结果的所有比特位中1的个数是否为偶数。如果1的个数为偶数，<code>pf=1</code>；如果为奇数，<code>pf=0</code>。</p><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">add al,10</span><br><span class="line">; al=11=00001011B pf=0</span><br></pre></td></tr></table></figure><h3 id="SF（符号标志）">SF（符号标志）</h3><p>SF(Sign flag)，符号标志。它记录相关指令执行后，其结果是否为负。如果结果为负，<code>sf=1</code>；如果非负，<code>sf=0</code>。</p><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000001B</span><br><span class="line">add al,1</span><br><span class="line">; al=10000010B sf=1</span><br></pre></td></tr></table></figure><p>上述例子中，如果10000001B是有符号数（通常用补码表示），则为-127，上述指令相当于计算<code>-127+1=-126(10000010B)</code>。</p><p>然而，我们也可以把10000001B看做无符号数，即130。这种情况下，SF的值没有意义，虽然相关计算影响了它的值。</p><h3 id="CF（进位标志）">CF（进位标志）</h3><p>CF(Carry flag)，进位标志。一般情况下，在进行<strong>无符号数</strong>运算时，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值。这里的进位为假想位，具体见下图：</p><img src="https://s2.loli.net/2022/11/22/cYrA8zhw7XRtiEn.png" width=80% /><p>可以理解为，两个数据相加时可能产生的从最高有效位向更高位的进位值并不舍弃，而是用CF来记录这个进位值。借位值亦然。</p><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,98H</span><br><span class="line">add al,al ; al=30H cf=1</span><br><span class="line">add al,al ; al=60H cf=0</span><br></pre></td></tr></table></figure><h3 id="OF（溢出标志）">OF（溢出标志）</h3><p>OF(Overflow flag)，溢出标志。一般情况下，在进行<strong>有符号数</strong>运算时，它记录了运算结果是否发生溢出。如果发生溢出，<code>of=1</code>；如果没有，<code>of=0</code>。</p><blockquote><p>溢出：运算结果超出预定范围导致结果不正确。</p></blockquote><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,98</span><br><span class="line">add al,99</span><br><span class="line">; of=1 cf=0</span><br></pre></td></tr></table></figure><p>上述例子可以看出，由于一个数不可能同时是有符号数和无符号数，所以CF和OF虽然相似但他们之间没有任何关系。</p><h3 id="DF（方向标志）">DF（方向标志）</h3><p>DF(Direction flag)，方向标志。用于<strong>指示</strong>串操作指令地址的变化方向。如果<code>df=1</code>，存储器由自高向低方向变化（si、di递减）；如果<code>df=0</code>，存储器由自低向高方向变化（si、di递增）。</p><h3 id="AF（辅助进位标志）">AF（辅助进位标志）</h3><p>AF(Auxiliary carry flag)，辅助进位标志。书中并未提及这个FLAG。它的作用是记录在算术运算中第3位向第4位（从0计数）发生进位或借位的情况。一般用于BCD码。</p><h3 id="TF和IF">TF和IF</h3><p>书中并未提及这两个FLAG。这里把<a href="https://blog.csdn.net/ghosind/article/details/118552727">参考资料</a>大致摘要如下：</p><p>TF(Trap flag)，陷阱标志。当<code>tf=1</code>时将开启单步调试模式，每个指令被执行后都将产生一个调试异常，以便于观察指令执行后的情况。</p><p>IF(Interrupt flag)，中断标志。当<code>if=1</code>时表示CPU可响应可屏蔽中断（maskable interrupt）。</p><h3 id="32位汇编中的EFLAGS">32位汇编中的EFLAGS</h3><p>与16位相比增加的基本上是系统控制的FLAG。感觉也不会经常用到。</p><img src="https://s2.loli.net/2022/11/22/pGtEWNLTf1QyZBY.png" width=80% /><ul><li><p>IOPL：I/O特权级别标志（I/O privilege level flag）是标志寄存器的第12位以及第13位，表示当其程序或任务的I/O权限级别。I/O权限级别为0～3范围之间的值，通常一般用户程序I/O特权级别为0。当前运行程序的CPL（current privilege level）必须小于等于IOPL，否则将发生异常。</p></li><li><p>NT：嵌套任务（Nested task flag）是标志寄存器的第14位，用于控制中断返回指令IRET的执行方式。若被设置则将通过中断的方式执行返回，否则通过常规的堆栈的方式执行。在执行CALL指令、中断或异常处理时，处理器将会设置该标志。</p></li><li><p>RF：恢复标志（Resume flag）是标志寄存器的第16位，用于控制处理器对调试异常的响应。若其被设置则会暂时禁止断点指令产生的调试异常，其复位后断点指令将会产生异常。</p></li><li><p>VM：虚拟8086模式标志（Virtual 8086 mode flag）是标志寄存器的第17位，当其被设置表示启用虚拟8086模式（在保护模式下模拟实模式），否则退回到保护模式工作。</p></li><li><p>AC：对齐检查标志（Alignment check (or access control) flag）是标志寄存器的第18位。当该标志位被设置且CR0寄存器中的AM位被设置时，将对用户态下对内存引用进行对齐检查，在存在未对齐的操作数时产生异常。</p></li><li><p>VIF：虚拟中断标志（Virtual interrupt flag）是标志寄存器的第19位，为IF标志的虚拟映象。该标志与VIP标志一起，且在CR4寄存器中VME或PVI位被设置且IOPL小于3时，处理器才将识别该标志。</p></li><li><p>VIP：虚拟中断挂起标志（Virtual interrupt pending flag）是标志寄存器的第20位，其被设置表示有一个中断被挂起（等待处理），否则表示没有等待处理的中断。该标志通常与VIF标志搭配一起使用。</p></li><li><p>ID：ID标志（Identification flag）是标志寄存器的第21位，通过修改该位的值可以测试是否支持CPUID指令。</p></li></ul><p>64位汇编使用64位的RFLAGS寄存器，其低32位即EFLAGS，高32位保留暂未使用。</p><p>和IDA里的差不多。</p><img src="https://s2.loli.net/2022/11/22/xAFGc1a3EqVL7rk.png" width=5% /><h2 id="FLAGS相关指令">FLAGS相关指令</h2><h3 id="adc">adc</h3><p>adc（带进位加法指令）利用CF位上记录的进位值实现任意长度数据的加法运算。</p><blockquote><p>指令格式： adc 操作对象1,操作对象2<br>功能：操作对象1 = 操作对象1 + 操作对象2 + CF<br>e.g. adc ax,bx 实现的功能是 ax=ax+bx+cf</p></blockquote><p>众所周知，加法分两步进行：</p><ol><li>低位相加</li><li>高位相加再加上低位相加产生的进位值</li></ol><p>于是<code>add ax,bx</code>便可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add al,bl</span><br><span class="line">adc ah,bh</span><br><span class="line">; 等价于 add ax,bx</span><br></pre></td></tr></table></figure><p>结论可以扩展至理论上的任意长度数据的加法运算。</p><h3 id="sbb">sbb</h3><p>sbb（带借位减法指令）利用CF位上记录的进位值实现任意长度数据的减法运算。</p><blockquote><p>指令格式： sbb 操作对象1,操作对象2<br>功能：操作对象1 = 操作对象1 - 操作对象2 - CF<br>e.g. sbb ax,bx 实现的功能是 ax=ax-bx-cf</p></blockquote><p>减法是加法的逆运算，sbb和adc基于相同原理设计，应用思路相似，这里不细🔒。</p><h3 id="cmp">cmp</h3><p>cmp（比较指令）相当于不保存结果的减法指令，只对FLAGS进行影响。</p><blockquote><p>指令格式： cmp 操作对象1,操作对象2<br>功能：计算操作对象1-操作对象2但不保存结果，仅影响FLAGS。<br>e.g. cmp ax,ax ，<code>ax-ax=0</code>但不在ax中进行保存，仅影响FLAGS各位：<code>zf=1</code> <code>pf=1</code> <code>sf=0</code> <code>cf=0</code> <code>of=0</code>。</p></blockquote><p>所以，我们可以根据cmp指令执行后的相关标志位的值来看出比较的结果。</p><p>以<code>cmp ax,bx</code>为例，下面列举无符号数比较后的FLAGS状态：</p><blockquote><p>如果ax==bx，则<strong>zf=1</strong>，<strong>cf=0</strong><br>如果ax!=bx，则<strong>zf=0</strong>，cf=0或1<br>如果ax&lt;bx，则<strong>zf=0</strong>，<strong>cf=1</strong>（减法产生借位）<br>如果ax&gt;bx，则<strong>zf=0</strong>，<strong>cf=0</strong><br>如果ax&lt;=bx，则zf=0或1，cf=0或1，通过ax==bx和ax&lt;bx的结论可看出，他们不可能同时为1或同时为0，所以<strong>zf^cf=1</strong>。<br>如果ax&gt;=bx，则zf=0或1，cf=0。</p></blockquote><p>那么：</p><blockquote><p><strong>zf=0</strong>，<strong>cf=0</strong>时，<strong>ax&gt;bx</strong><br><strong>zf=0</strong>，<strong>cf=1</strong>时，<strong>ax&lt;bx</strong><br><strong>zf=1</strong>，<strong>cf=0</strong>时，<strong>ax==bx</strong><br>zf=1，cf=1时，好像不存在这种情况</p></blockquote><p>以<code>cmp al,bl</code>为例，有符号数比较后的FLAGS状态：</p><blockquote><p><strong>sf=0</strong>，<strong>of=0</strong> 表示无负数无溢出，则代表<strong>al&gt;=bl</strong><br><strong>sf=1</strong>，<strong>of=0</strong> 表示有负数无溢出，则代表<strong>al&lt;bl</strong><br><strong>sf=0</strong>，<strong>of=1</strong> 表示无负数有溢出，则代表<strong>al&lt;bl</strong><br><strong>sf=1</strong>，<strong>of=1</strong> 表示有负数有溢出，则代表<strong>al&gt;bl</strong></p></blockquote><p>等于的情况可以通过ZF看出：</p><blockquote><p><strong>zf=0</strong>代表<strong>al!=bl</strong><br><strong>zf=1</strong>代表<strong>al==bl</strong></p></blockquote><h3 id="检测状态位的条件转移指令">检测状态位的条件转移指令</h3><table><thead><tr><th>指令</th><th>英文含义</th><th>中文含义</th><th>检测的相关标志位</th></tr></thead><tbody><tr><td>je/jz</td><td>jump if equal/zero</td><td>等于/为零则转移</td><td>zf=1</td></tr><tr><td>jne/jnz</td><td>jump if not equal/not zero</td><td>不等于/不为零则转移</td><td>zf=0</td></tr><tr><td>jb</td><td>jump if below</td><td>低于则转移</td><td>cf=1</td></tr><tr><td>jnb</td><td>jump if not below</td><td>不低于则转移</td><td>cf=0</td></tr><tr><td>ja</td><td>jump if above</td><td>高于则转移</td><td>cf=0且zf=0</td></tr><tr><td>jna</td><td>jump if not above</td><td>不高于则转移</td><td>cf=1或zf=1</td></tr></tbody></table><p>由于CF和ZF不能同时为1，所以ja的条件可不可以理解为<code>cf^zf=0</code>（只剩cf=zf=0的情况），jna的条件可不可以理解为<code>cf^zf=1</code>？没有研究过具体判断的过程只作帮助理解之用。</p><p>一般情况下前面都会加个cmp的指令帮助调整相关标准位，联合使用时体现出高级语言的IF语句功能。</p><p>指令格式同jmp指令，具体如下：</p><table><thead><tr><th>指令实例</th><th>代表含义</th></tr></thead><tbody><tr><td>JMP 1000H</td><td>段内直接转移，偏移地址由指令直接给出</td></tr><tr><td>JMP CX</td><td>段内间接转移，偏移地址由CX指出</td></tr><tr><td>JMP 1000H:2000H</td><td>段间直接转移，段地址和偏移地址由指令给出</td></tr><tr><td>JMP WORD PTR [SI]</td><td>段内间接转移，偏移地址在SI所指地址开始的2个单元中</td></tr><tr><td>JMP DWORD PTR [SI]</td><td>段间间接转移，段地址和偏移地址在SI所指地址开始的4个单元中</td></tr><tr><td>JMP SHORT S</td><td>段内间接转移，执行指令后CS:IP指向标号S处的地址，跳转范围为[-128,127]（用补码表示）</td></tr><tr><td>JMP NEAR PTR S</td><td>段内间接转移，执行指令后CS:IP指向标号S处的地址，跳转范围为[-32768,32767]</td></tr><tr><td>JMP FAR PTR S</td><td>段间间接转移，段地址和偏移地址由标号S处的地址指出</td></tr></tbody></table><h3 id="串传送指令">串传送指令</h3><p>等我看完这本书再写。</p><h3 id="pushf和popf">pushf和popf</h3><blockquote><p>指令格式：pushf<br>功能：将标志寄存器的值压栈</p></blockquote><blockquote><p>指令格式：popf<br>功能：从栈中弹出数据，送入标志寄存器中</p></blockquote><h2 id="写在最后">写在最后</h2><p>今天是“三天看完《汇编语言》挑战”的第七天。<br>楼上的某个同志莫名其妙🐑了，封寝了，妈的。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Assembly/">Assembly</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Assemb1y/">Assemb1y</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/22/assembly-flag/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Camera Raw:A Laborer&#39;s Perspective</title>
      <link>http://ch3cooh12138.github.io/2022/11/14/ACR/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/14/ACR/</guid>
      <pubDate>Mon, 14 Nov 2022 12:11:13 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前情提要&quot;&gt;前情提要&lt;/h2&gt;
&lt;p&gt;这几天院里在搞新生引航系列活动。雪姐（辅导员）吩咐我把关一下小宣委的活动照片和新闻稿。新闻稿都写得很好，但是拍照技术欠佳（雪姐原话：“一言难尽。”）。故把上次宣委培训的内容贴在这里，简要介绍一下Photoshop中Camera</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前情提要">前情提要</h2><p>这几天院里在搞新生引航系列活动。雪姐（辅导员）吩咐我把关一下小宣委的活动照片和新闻稿。新闻稿都写得很好，但是拍照技术欠佳（雪姐原话：“一言难尽。”）。故把上次宣委培训的内容贴在这里，简要介绍一下Photoshop中Camera Raw滤镜的基本用法，供学习与参考之用。</p><h2 id="Camera-Raw">Camera Raw</h2><p>以上次在D2楼下拍到<s>室友偷吃</s>的照片作为图像样例。Ps版本为Photoshop2022。</p><img src="https://s2.loli.net/2022/11/15/6L7ZTVNsJgzhkCr.jpg" width=80% /><p>首先打开Ps，拖入图片，在滤镜一栏找到Camera Raw滤镜，点击进入滤镜界面。这里有个好习惯，就是在打开Camera Raw之前把背景图层复制一层后<strong>转化为智能对象</strong>。智能对象拥有智能滤镜功能，可以保留滤镜的参数方便再次调整；而普通的像素图层在打上滤镜之后便会直接应用，参数无法再次调整。</p><img src="https://s2.loli.net/2022/11/15/CvB9sF7bzNR4SQU.png" width=80% /><p>观察Camera Raw界面。左边是预览区，右边是参数调整区，最右边还有一个工具栏。工具栏对于非精修的图像没有必要应用，所以我们只对参数调整区做一个基本介绍。</p><h3 id="几何">几何</h3><p>顾名思义，几何参数调整的是图像的一个几何状态。如果照片发生畸变（常见于建筑），我们就可以使用几何参数来调整。</p><h4 id="自动校正">自动校正</h4><p>一般常用<strong>水平自动校正</strong>（如下图）、<strong>垂直自动校正</strong>（如下下图）和<strong>平衡自动校正</strong>。</p><img src="https://s2.loli.net/2022/11/16/MQyOz7X5geRqmUS.png" width=80% /><p><strong>水平自动校正</strong>可以把图片中的Camera Raw滤镜认为应该是水平线的地方拉到水平线上（非专业术语），具体请看上面的图片。垃圾桶的水平边缘被认为是“应该是水平线的地方”，所以它被拉到水平线上了。</p><img src="https://s2.loli.net/2022/11/16/WAeZYxBy759paME.png" width=80% /><p><strong>垂直自动校正</strong>同上，可以看到垃圾桶的垂直边缘被拉到垂直线上了。但是根据焦点透视它不应该是这样的，所以引起了图像的畸变。然而，<strong>垂直自动校正</strong>对于一些室内的有墙角的照片特别管用。</p><p><strong>平衡自动校正</strong>就是图中水平自动校正左边那个带A字的按钮，具体原理不太清楚，反正挺好用的。</p><p>我选的这张照片没什么畸变，就不用调了。</p><h4 id="垂直">垂直</h4><img src="https://s2.loli.net/2022/11/16/AToWuSiC3mK4r62.png" width=80% /><p>类似于梯形校正。</p><h4 id="水平">水平</h4><img src="https://s2.loli.net/2022/11/16/Ur3QuMZJcd1FNiC.png" width=80% /><p>同上。<strong>建议亲自动手去Camera Raw里试一试。</strong></p><h4 id="旋转">旋转</h4><img src="https://s2.loli.net/2022/11/16/CID83ZfwlWRhX2g.png" width=80% /><p>顾名思义。参数为正顺时针旋转，反之逆时针。</p><h4 id="长宽比">长宽比</h4><img src="https://s2.loli.net/2022/11/16/413bQhXrZn6C8Ol.png" width=80% /><p>顾名思义。</p><h4 id="缩放">缩放</h4><img src="https://s2.loli.net/2022/11/16/QKd3UgpRD2irjaO.png" width=80% /><p>顾名思义。需要注意的是这里的数字代表百分比，所以默认值为100。</p><h4 id="横向-纵向补正">横向/纵向补正</h4><img src="https://s2.loli.net/2022/11/16/UzalWig5eErVJGv.png" width=80% /><p>相当于水平/垂直位移。参数为正时右移/上移，反之左移/下移。</p><h3 id="基本">基本</h3><p>基本参数奠定图像的整体色调和风格。在调整基本参数时，观察参数调整区最上面的直方图是非常重要的。</p><h4 id="白平衡与色温、色调">白平衡与色温、色调</h4><p><strong>白平衡</strong>的基本概念是“不管在任何光源下，都能将白色物体还原为白色”。由于在不同光源下白色物体呈现的颜色可能不同，我们就需要调整白平衡使图像再现色彩真实。</p><p>一般情况下，点击白平衡选项中的“自动”就可以了。但是有些特殊情况，我们需要手动校正白平衡。这时我们可以使用选项右边的<strong>白平衡吸管工具</strong>，点击图像中我们认为应该是白色的地方来手动校正。下图为应用了“自动”白平衡设置后的图像效果。</p><img src="https://s2.loli.net/2022/11/16/Ic5JCvDhZ42LVGY.png" width=80% /><p>校正白平衡的原理是调整图片的色温、色调。这两个参数还可以渲染不同的图片风格，往哪调显现什么颜色它应该标的挺清楚的。</p><img src="https://s2.loli.net/2022/11/16/263JKm4porGDUkO.png" width=80% /><p>u1s1非必要情况我不会去调白平衡，因为改变色温色调有时候会使图片显得很怪（水平有限）。</p><h4 id="曝光-黑色">曝光~黑色</h4><p>这部分面板具有大致的调整顺序：<strong>曝光</strong>-&gt;<strong>白色/黑色</strong>-&gt;<strong>高光/阴影</strong>-&gt;<strong>对比度</strong></p><ol><li><strong>曝光</strong>用于调整图像整体明暗。对于一般的照片来说，直方图整体偏左则欠曝，整体偏右则过曝。所以我们首先需要调整曝光参数，使直方图整体位于居中的位置。</li></ol><img src="https://s2.loli.net/2022/11/16/1d7S4BRZhvNYuKt.png" width=80% /><ol start="2"><li><p><strong>白色</strong>和<strong>黑色</strong>用于调节图片中最亮和最暗部分（接近于纯白或纯黑）的细节，但是对于纯白色（0xFFFFFF）和纯黑色（0x000000）来说，调节这两个参数是没有办法挽救任何细节的。</p><p>以白色为例，我们要调整该参数，使该亮的地方尽量亮起来，但是不能使其变成纯白色，否则细节就会丢失。那么怎么判断图像亮部是否到达纯白色了呢？Camera Raw给我们提供了一个标志，即直方图右上角的“高光修剪警告”。一旦该标志变成白色，就说明调整过度了，我们需要往回调，使得原本被我们调成纯白色的部分显现一些细节，直到该标志不再变白。</p> <img src="https://s2.loli.net/2022/11/16/k6EbM8TreSwUZVd.png" width=80% /><p>如图，首先将白色参数向右调节，使亮部变白，直到警告出现。</p> <img src="https://s2.loli.net/2022/11/16/2KUgvecA8sjI9Zl.png" width=80% /><p>随后回调参数，直到警告消失。</p> <img src="https://s2.loli.net/2022/11/16/TRcFKt6Mu9Wo83y.png" width=80% /><p>黑色参数的调整也是如此。首先将黑色参数向左调节，使暗部变黑，直到警告出现。</p> <img src="https://s2.loli.net/2022/11/16/QBCxmY84cEoKeGI.png" width=80% /><p>随后回调参数，直到警告消失。</p></li><li><p><strong>高光</strong>和<strong>阴影</strong>用于调节图片中较亮和较暗部分的细节。我倾向于认为这两个参数是用于<strong>恢复</strong>亮部/暗部细节的。所以一般情况<strong>将高光参数往暗了调</strong>或<strong>将阴影参数往亮了调</strong>是个不错的选择。</p> <img src="https://s2.loli.net/2022/11/16/6xuEv8PM3iKThbZ.png" width=80% /><p>可以看见在调整白色/黑色参数后，图中黄色矩形部分的细节有所损失，这时候我们可以微调高光参数，使得这里较亮部分的细节体现出来。阴影同理。</p> <img src="https://s2.loli.net/2022/11/16/6xuEv8PM3iKThbZ.png" width=80% /></li><li><p><strong>对比度</strong>主要用来加大整体的明暗反差，调整图像中亮部和暗部的反差，用来解决图像偏灰的问题。这张图片明暗对比强烈，我就没怎么调。</p></li></ol><h5 id="自动">自动</h5><p>以上步骤也许对初学者来说过于繁杂，我们可以直接使用编辑菜单里的<strong>自动按钮</strong>调整这六大参数。</p><p>下图为采用了“自动”参数后的图像效果。</p><img src="https://s2.loli.net/2022/11/16/9NUIWoYR4JxXm78.png" width=80% /><p>对于一般的照片，“自动”可以非常好地完成调节六大参数的效果。但是对于一些特殊照片，“自动”会起到反作用，因为其原理也是根据直方图调整参数。如果遇到一些特殊照片，还请读者掌握参数原理并自行调节。</p><h4 id="纹理、清晰度、去除薄雾">纹理、清晰度、去除薄雾</h4><p>这三个参数循序渐进地调整边缘对比度，具体见下表。</p><table><thead><tr><th></th><th><strong>纹理</strong></th><th><strong>清晰度</strong></th><th><strong>去除薄雾</strong></th></tr></thead><tbody><tr><td>作用范围</td><td>细节边缘</td><td>细节边缘+结构边缘</td><td>细节边缘+结构边缘+纯色渐变区</td></tr><tr><td>作用效果</td><td>小幅度小范围调整细节边缘对比度（一般运用于磨皮）</td><td>大幅度大范围的边缘对比度调整、轻微影响色彩</td><td>最大范围的边缘对比度调整、色彩饱和度与色相对比调整</td></tr></tbody></table><h4 id="自然饱和度、饱和度">自然饱和度、饱和度</h4><p>这两个参数主要调整色彩的鲜艳程度。</p><p><strong>饱和度</strong>控制照片中所有色彩的鲜艳程度。如果它向右侧滑动，那么照片中所有色彩都会被一视同仁地变得更加鲜艳，变鲜艳的程度是一样的。</p><p><strong>自然饱和度</strong>会检测画面中颜色的鲜艳程度，尽量让照片中所有颜色的鲜艳程度度趋于一致。正向调整的时候，自然饱和度会优先增加颜色较淡区域的艳艳度，将其大幅度提高。</p><p>注意不要过度调整这两个参数，否则会造成色彩不真实、过渡不自然等情况。有的时候，色彩朴素的照片更容易为人接受。</p><h4 id="补充">补充</h4><h5 id="饱和度和对比度的区别">饱和度和对比度的区别</h5><p>见下图，饱和度调整<strong>色彩鲜艳程度</strong>，对比度调整<strong>明暗对比程度</strong>。</p><img src="https://s2.loli.net/2022/11/16/h45YBqxby1EjmNR.png" width=80% /><h5 id="一把梭">一把梭</h5><p>为提供工作效率，留出更多的时间摸鱼。可以直接点几何自动调整和六大参数的自动调整，随便开点锐化和降噪（下面会讲到），导出就vans了。</p><p>最高的效率是不调直接交。</p><h5 id="高调照片与低调照片">高调照片与低调照片</h5><p><strong>高调照片</strong>的色调以白为主，一般白色要占75%至95%，它宁可损失高光部位的少许层次，也不让可有可无的灰色留在画面上。意思是这种照片从直方图的角度来看是必然过曝的。这个时候需要考验修图者的审美能力，一般来说需要让图像色彩过渡均匀且显得有层次。</p><p><strong>低调照片</strong>同理。</p><p>特殊情况来了，多多尝试吧。</p><h5 id="前期拍照提示">前期拍照提示</h5><blockquote><p><strong>Cabelis Warning</strong><br><strong>前期拍不好，后期少不了。</strong></p></blockquote><p>有时候前期拍废了，后期救不回来的。比如在一些容易过曝的场合（最常遇到的就是很亮的PPT）可以适当降低曝光，保留亮部细节。其它地方暗点可以调亮，总不可能一点光都没有，暗部细节总是有的，但是如果过曝了亮部细节就一点都没有了。</p><h3 id="细节">细节</h3><img src="https://s2.loli.net/2022/11/16/hKvJ6b3lTyYsowS.png" width=40% /><p>可以看到，细节面板主打的就是一个细节，它需要将预览大小缩放到100%或更大来观察细节。</p><p>样例照片噪点很少，为方便演示，我们手动打上一些噪点。</p><img src="https://s2.loli.net/2022/11/16/xIFgcwi3QjOoEKT.png" width=80% /><h4 id="减少杂色">减少杂色</h4><p>如果使用高ISO，或者在低照度下拍摄照片，照片中则可能出现杂色（噪点）。我们可以使用<strong>减少杂色</strong>参数来降噪。效果如下：</p><img src="https://s2.loli.net/2022/11/16/PSQj4hEwGA5aUqm.png" width=80% /><p>必须注意观察两点：</p><ol><li>虽然在很多情况下它们确实能够减少杂色，但同时它们也会模糊照片内的细节，因此要密切注意。</li><li>它们也会使色彩变得不够饱和，因此也要引起注意。</li></ol><h4 id="锐化">锐化</h4><p><strong>锐化</strong>可以快速聚焦模糊边缘，提高图像中某一部位的清晰度或者焦距程度，使图像特定区域的色彩更加鲜明。这意味着如果单独使用锐化的话，很容易凸显图片中的噪点。我们一般使用它来恢复一些因降噪而模糊的细节。效果如下：</p><img src="https://s2.loli.net/2022/11/16/KU9ZRm8SnaNMAW3.png" width=80% /><p>可以看到虽然与单独降噪效果相比噪点有所凸显，但是好在恢复了一些细节，就噪点来说比原图好一些。</p><h2 id="曲线">曲线</h2><p>Camera Raw里也有曲线，我们这里主要讲的是Photoshop里的曲线，因为它提供了更丰富的选区蒙版功能。</p><p>点击一个非锁定像素图层，按快捷键Ctrl+M进入曲线界面。</p><img src="https://s2.loli.net/2022/11/16/SZ6yVzY38Wjow1b.png" width=80% /><h3 id="原理">原理</h3><p>原理是函数图像，横坐标是原来的亮度，纵坐标是调整后的亮度。</p><blockquote><p>RGB通道曲线是由红（R）绿（G）蓝（B）三个通道的曲线叠加而成的，可以“近似的”理解成图片的亮度曲线。<br>曲线的横轴是原图的亮度，从左到右依次是0值纯黑，1-254的中间灰色值，以及最右边255的纯白最亮值。<br>曲线的纵轴是目标图（调整后）的亮度，从下到上仍然是0-255的亮度值。<br>当我们在曲线上任意取一个点，它的“输入值”就是它横轴对应的值，即原图中的亮度，它的“输出值”就是它纵轴中的数值，也就是调整后它的亮度值。<br>未调整的情况下，图像的曲线会是一条对角线，也就是横轴（原图）和纵轴（目标图）的亮度值相等。</p></blockquote><h3 id="示例">示例</h3><img src="https://s2.loli.net/2022/11/16/gLiPU3EKboVBSkC.png" width=80% /><img src="https://s2.loli.net/2022/11/16/Bh5tnSrQbiA3VMK.png" width=80% /><img src="https://s2.loli.net/2022/11/16/IQMbSV1vuG3pDaU.png" width=80% /><p>可以看到某些情况下曲线调节可以代替Camera Raw中的某些参数调节。</p><p>因为曲线的原理是函数图像，有兴趣的话可以推导一下为什么这样的函数图像导致这样的效果，这里暂不展开。</p><h3 id="蒙版与色彩范围">蒙版与色彩范围</h3><p>有时候我们只需要对图像的部分区域进行亮度等参数的调整，这个时候我们需要用到蒙版。</p><blockquote><p>顾名思义，“蒙版”即“蒙在上面的板子”。这个词来源于生活实际。例如，汽车喷漆的时候，车窗、车灯等不需要喷漆的地方会用一层遮蔽膜挡住，防止油漆喷溅到不该喷漆的地方。我们可以把这一层遮蔽膜理解为“蒙版”。它的作用就是<strong>保护我们没有选中的部分</strong>。<br>在Ps中，蒙版是一种用于遮盖图像的工具，我们可以用它把部分图像遮住，从而控制画面的显示内容。这样做并不会删除图像中我们不需要的部分，而只是将其隐藏起来，便于后期修改。因此，蒙版是一种非破坏性的抠图工具。由于它既有抠图的功能，又不会破坏图像的完整性，“蒙版”所代表的非破坏性编辑成为了合成图像的重要手段。<br>广义上讲，蒙版也是图层的一种。以图层蒙版为例，通常情况下，<strong>蒙版是一个256级色阶的灰度图像，纯白色对应的图像是可见的，纯黑色会遮盖图像，灰色区域会使图像呈现出一定程度的透明效果</strong>。基于以上原理，当我们想要隐藏图像的某些区域时，为它添加一个蒙版，再将相应的区域涂黑即可；想让图像呈现出半透明效果，可以将蒙版涂灰。除图层蒙版外，Ps中的常用蒙版还有矢量蒙版（从路径或矢量图中生成蒙版，用矢量形状限定图像的显示范围）和剪贴蒙版（用下方图层中的图像限定上方图层的显示范围）等。</p></blockquote><p>如下图，我们先将需要调整的区域用钢笔勾勒出来，然后建立选区，之后点击图层面板下方的效果选项卡，选择“曲线”，一个以选区外区域为蒙版的<strong>曲线调整图层</strong>就在该图层上方创建了。之后我们可以使用曲线修改该区域的一些属性。</p><img src="https://s2.loli.net/2022/11/16/3K4m27kLZRq5odA.png" width=80% /><img src="https://s2.loli.net/2022/11/16/jQbSveiNqZDU47X.jpg" width=80% /><p>我们不仅可以使用钢笔工具建立选区，同样可以使用其他工具，其中最值得介绍的是“色彩范围”（位于菜单栏“选择”选项卡）。用其自带的吸管工具吸取图像中对应并调整参数，即可选中图像中相似颜色的区域。在对天空等区域作调整的时候尤为有效。</p><h2 id="仿制图章">仿制图章</h2><img src="https://s2.loli.net/2022/11/16/dQ3KklUrZa5GODv.png" width=80% /><p>看上面这片树叶不爽可以使用<strong>仿制图章</strong>工具把它抹掉（效果如下），其原理是以周围相似结构的区域作为锚点来定义画笔内容。在日常工作中也会经常用到，比如P掉莫名其妙的矿泉水瓶或者餐巾纸。这是个很考验熟练度的工具。</p><img src="https://s2.loli.net/2022/11/16/JD7ScMOTr1sR9Hj.png" width=80% /><h2 id="写在最后">写在最后</h2><p>后期可以解决前期的一些问题，但不能完全替代前期工作，所以前期的拍摄至关重要。<br>我自己拍照技术就不是很好，这些方法是收集网络资料与多年工作经验总结的成果，如有差错，可以私信我或在评论区指出。<br>因为是&quot;A Laborer’s Perspective&quot;，所以仅介绍我作为一个Laborer常用的一些方法。如果想学专业摄影或后期请点击<a href="https://www.baidu.com">这篇教程</a>。<br>好像很多朋友用Lightroom，我寻思一家公司的应该差不多。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Design/">Design</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Photoshop/">Photoshop</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/14/ACR/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>攻防世界 crypto rsarsa</title>
      <link>http://ch3cooh12138.github.io/2022/11/10/ctf4/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/10/ctf4/</guid>
      <pubDate>Thu, 10 Nov 2022 03:36:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;原题地址：&lt;a href=&quot;https://adworld.xctf.org.cn/challenges/details?hash=08957e3e-3b35-11ed-abf3-fa163e4fa609&amp;amp;task_category_id=5&quot;&gt;https://ad</description>
        
      
      
      
      <content:encoded><![CDATA[<p>原题地址：<a href="https://adworld.xctf.org.cn/challenges/details?hash=08957e3e-3b35-11ed-abf3-fa163e4fa609&amp;task_category_id=5">https://adworld.xctf.org.cn/challenges/details?hash=08957e3e-3b35-11ed-abf3-fa163e4fa609&amp;task_category_id=5</a></p><p>原题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p = random_prime(<span class="number">2</span>^<span class="number">1024</span>)</span><br><span class="line">    q = random_prime(<span class="number">2</span>^<span class="number">1024</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    p1=p&gt;&gt;<span class="number">724</span></span><br><span class="line">    ct=n * inverse_mod(q % (<span class="number">2</span> ** <span class="number">265</span>), <span class="number">2</span>^<span class="number">265</span>) % <span class="number">2</span>^<span class="number">265</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p1=&#x27;</span>,p1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ct=&#x27;</span>,ct)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    alarm(<span class="number">80</span>)</span><br><span class="line">    m = randint(<span class="number">2</span>,n-<span class="number">1</span>)</span><br><span class="line">    c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------------------&#x27;</span>)</span><br><span class="line">    m1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;m=&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">if</span> m1!=m:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nope&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read())</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>分析题目，取两个1024位大质数p、q相乘得n，输出<strong>p的高300位p1</strong>和<strong>处理q得到的ct</strong>。m任取（所以不能通过自然语言判断）后加密为c并输出。我们的任务是通过p1、ct和n推出p、q来解密m。验证3轮都正确后输出flag。</p><h2 id="线性同余方程的解法">线性同余方程的解法</h2><p>首先对ct进行分析可得线性同余方程组：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>设</mtext><msub><mi>q</mi><mn>1</mn></msub><mo>=</mo><mi>q</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mn>265</mn></msup><mspace linebreak="newline"></mspace><mtext>设</mtext><mi>i</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator="true">,</mo><msup><mn>2</mn><mn>265</mn></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>则有</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>t</mi><mo>=</mo><mi>n</mi><mo>×</mo><mi>i</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mn>265</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>≡</mo><msub><mi>q</mi><mn>1</mn></msub><mo>×</mo><mi>i</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mn>265</mn></msup></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text{设} q_1 = q \space mod \space 2^{265} \\\text{设} i=inverse(q_1, 2^{265}) \\\text{则有}     \begin{cases}        ct = n \times i \space mod \space 2^{265} \\        1 \equiv q_1 \times i \space mod \space 2^{265}    \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord cjk_fallback">设</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">设</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord text"><span class="mord cjk_fallback">则有</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>对于线性同余方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mi>b</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax \equiv b \space (mod \space n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>：<br>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = gcd(a, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 整除 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> ，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>b</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac b d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>为整数。由<a href="https://baike.baidu.com/item/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/5186593">裴蜀定理</a>，存在整数对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span>（可用扩展欧几里得算法求得）使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>r</mi><mo>+</mo><mi>s</mi><mi>n</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">ar+sn=d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mi>r</mi><mo>×</mo><mfrac><mi>b</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">x_0=r \times \frac b d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>是方程 (1) 的一个解。其他的解都关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac n d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 同余。即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≡</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mi>d</mi></mfrac><mo stretchy="false">)</mo><mo>×</mo><mi>t</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mn>0</mn><mo>⩽</mo><mi>t</mi><mo>⩽</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \equiv x_0+(\frac n d) \times t \space (mod \space n) \space (0 \leqslant t \leqslant d-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7733em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p></blockquote><p>根据上述线性同余方程的求解方法，可以求得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>r</mi><mo>×</mo><mi>c</mi><mi>t</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mn>265</mn></msup></mrow><annotation encoding="application/x-tex">i=r \times ct \space mod \space 2^{265}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span></span></span></span>，进而求得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><msup><mn>2</mn><mn>265</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q_1=inverse(i,2^{265})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">265</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>): <span class="comment">#扩展欧几里得算法    </span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:          </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, gcd = ext_gcd(b, a % b)        </span><br><span class="line">        x, y = y, (x - (a // b) * y)        </span><br><span class="line">        <span class="keyword">return</span> x, y, gcd</span><br><span class="line"></span><br><span class="line">ct = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;ct=&quot;</span>))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;n=&quot;</span>))</span><br><span class="line">i = (ext_gcd(n,<span class="number">2</span>**<span class="number">265</span>)[<span class="number">0</span>] * ct) % <span class="number">2</span>**<span class="number">265</span></span><br><span class="line">q1 = gmpy2.invert(i,<span class="number">2</span>**<span class="number">265</span>)</span><br><span class="line"><span class="built_in">print</span>(q1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，我们已经获得了<strong>p的高300位p1</strong>和<strong>q的低265位q1</strong>。</p><h2 id="Coppersmith已知高位攻击">Coppersmith已知高位攻击</h2><p>知道p或q的高位为其位数的约一半时即可<br>已知e/n，爆破1024位的p，至少需要知道570位二进制。</p><p>网上搜了搜发现有道数据一模一样的题：<a href="https://blog.csdn.net/m0_57291352/article/details/120675242">鹤城杯2021 Crypto babyrsa</a><br>原理是知道<strong>n和q的低265位</strong>可以求出<strong>p的低265位</strong>，结合<strong>p的高300位</strong>就是565位，爆破剩下5位。</p><p>跑脚本罢。</p><p>摘录代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p1 = </span><br><span class="line">q1 = </span><br><span class="line">n = </span><br><span class="line">mod=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">265</span>)</span><br><span class="line">p0=n*invert(q1,mod)%mod</span><br><span class="line">pbar=(p1&lt;&lt;<span class="number">724</span>)+p0</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    f=pbar+x*mod*<span class="number">32</span></span><br><span class="line">    f=f.monic()</span><br><span class="line">    pp=f.small_roots(X=<span class="number">2</span>^<span class="number">454</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span>(pp):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pbar+=mod</span><br><span class="line"> </span><br><span class="line">p=pbar+pp[<span class="number">0</span>]*<span class="number">32</span>*mod</span><br><span class="line"><span class="keyword">assert</span> n%p==<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到了p后就是常规操作了。</p><h2 id="写在最后">写在最后</h2><p>标号难度1…无官方wp，我交上去的时候也只有9个人出来。<br>纠结了半个月。<br>还是要善于搜索，前置知识很重要。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Crypt0/">Crypt0</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/10/ctf4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HECTF 一些re和密码</title>
      <link>http://ch3cooh12138.github.io/2022/11/08/hectf2022/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/08/hectf2022/</guid>
      <pubDate>Tue, 08 Nov 2022 03:12:19 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;re-author’sB0x&quot;&gt;re: author’sB0x&lt;/h2&gt;
&lt;p&gt;exp:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="re-author’sB0x">re: author’sB0x</h2><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">cry = [<span class="number">0xc3</span>,<span class="number">0xf5</span>,<span class="number">0xe5</span>,<span class="number">0xe2</span>,<span class="number">0xEC</span>,<span class="number">0x17</span>,<span class="number">0xE5</span>,<span class="number">0x2A</span>,<span class="number">0xCA</span>,<span class="number">0x3</span>,<span class="number">0xB6</span>,<span class="number">0xFD</span>,<span class="number">0xC1</span>,<span class="number">0xBC</span>,<span class="number">0x70</span>,<span class="number">0x44</span>,<span class="number">0x10</span>,<span class="number">0xCD</span>,<span class="number">0xA6</span>,<span class="number">0x13</span>,<span class="number">0x0B</span>,<span class="number">0x9A</span>,<span class="number">0x73</span>,<span class="number">0x6</span>,<span class="number">0x0E</span>,<span class="number">0x4D</span>,<span class="number">0xDE</span>,<span class="number">0x95</span>,<span class="number">0x12</span>,<span class="number">0x9C</span>,<span class="number">0xD9</span>,<span class="number">0x46</span>]</span><br><span class="line">key = <span class="string">&quot;thisiskey&quot;</span></span><br><span class="line">len1 = <span class="built_in">len</span>(cry)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">t = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">keystream = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    s[i] = i</span><br><span class="line">    t[i] = key[i%<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line">v1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v3 = (s[i] + v3 + <span class="built_in">ord</span>(t[i]))%<span class="number">256</span></span><br><span class="line">    v1 = s[i]</span><br><span class="line">    s[i] = s[v3]</span><br><span class="line">    s[v3] = v1</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    v2 = len1</span><br><span class="line">    len1 -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v2==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = (i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v6 = (v6+s[i])%<span class="number">256</span></span><br><span class="line">    v4 = s[i]</span><br><span class="line">    s[i] = s[v6]</span><br><span class="line">    s[v6] = v4</span><br><span class="line">    keystream[<span class="number">4</span>*v5] = s[(s[v6]+s[i])%<span class="number">256</span>]</span><br><span class="line">    v5 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">len1 = <span class="built_in">len</span>(cry)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1):</span><br><span class="line">    flag[i] = cry[i] ^ keystream[<span class="number">4</span>*i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手搓一遍就出来了。</p><h2 id="密码-ezrsa">密码:ezrsa</h2><p>原题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">t = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q * t</span><br><span class="line">p_=<span class="built_in">pow</span>(p,<span class="number">2</span>,n)</span><br><span class="line">q_=<span class="built_in">pow</span>(q,<span class="number">2</span>,n)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p_=&#x27;</span>,p_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q_=&#x27;</span>,q_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"><span class="comment">#p_= 10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line"><span class="comment">#q_= 24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line"><span class="comment">#c= 946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line"><span class="comment">#n= 1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个问题是<code>p_ = p^2 % n</code>。乍一看很难解，甚至好像和二次剩余有关，实际仔细分析一番得出p并不难。n由3个1024位质数相乘，为3072位。p^2则只有2048位，小于n，相当于没模。易通过<code>p = gmpy2.iroot(p_ , 2)[0]</code>得出p。q同理。</p><p>第二个问题是<code>n = p * q * t</code>，三元质数加密，没学过呀。<a href="https://blog.csdn.net/weixin_44159598/article/details/109563019">搜索一下</a>可知三元的欧拉函数和二元的格式相同，遂放心使用<code>phi = (p-1)*(q-1)*(t-1)</code>。</p><p>第三个问题是<code>gcd(e, phi) != 1</code>，所以没法直接逆元。这里可以先将e整除<code>GCD = gcd(e, phi)</code>得到新的e1后通过构造<code>d1 = gmpy2.invert(e1,phi)</code>后得出密钥，最后的密文要开GCD次根。<br>原理如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>e</mi><mn>1</mn></msub><mo>=</mo><mfrac><mi>e</mi><mi>g</mi></mfrac><mspace linebreak="newline"></mspace><mo>∵</mo><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mi>g</mi></msup><msup><mo stretchy="false">)</mo><mstyle displaystyle="false" scriptlevel="0"><mfrac><mi>e</mi><mi>g</mi></mfrac></mstyle></msup><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mi>g</mi></msup><msup><mo stretchy="false">)</mo><msub><mi>e</mi><msub><mrow></mrow><mn>1</mn></msub></msub></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><msup><mi>m</mi><mi>g</mi></msup><mo>=</mo><msup><mi>c</mi><msub><mi>d</mi><msub><mrow></mrow><mn>1</mn></msub></msub></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mspace linebreak="newline"></mspace><mtext>其中</mtext><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g = gcd(e,\phi(n)) \\e_1 = \frac e {g} \\\because m^e \equiv c\space(mod\space n) \\\therefore m^e \equiv (m^g)^{\tfrac e g} \equiv (m^g)^{e_{_ 1}} \equiv c\space(mod\space n) \\\therefore m^g = c^{d_{_ 1}}\space mod\space n \\\text{其中} d_1 = inverse(e_1,\phi(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1799em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9298em;"><span style="top:-3.4458em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1033em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2996em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.357em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1033em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2996em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.357em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord text"><span class="mord cjk_fallback">其中</span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></span></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p_= <span class="number">10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line">q_= <span class="number">24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line">c= <span class="number">946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line">n= <span class="number">1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843</span></span><br><span class="line">e=<span class="number">114</span></span><br><span class="line">p,f = gmpy2.iroot(p_,<span class="number">2</span>)</span><br><span class="line">q,f = gmpy2.iroot(q_,<span class="number">2</span>)</span><br><span class="line">t = n//(p*q)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(t-<span class="number">1</span>)</span><br><span class="line">GCD=gmpy2.gcd(e,phi)</span><br><span class="line">d1 = gmpy2.invert(e//GCD,phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c,d1,n)</span><br><span class="line">m,f = gmpy2.iroot(m1,GCD)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Rever-e/">Rever$e</category>
      
      <category domain="http://CH3COOH12138.github.io/tags/Crypt0/">Crypt0</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/08/hectf2022/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单的动态网页爬虫——以PTA为例</title>
      <link>http://ch3cooh12138.github.io/2022/11/08/py5-ptaspider/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/08/py5-ptaspider/</guid>
      <pubDate>Tue, 08 Nov 2022 03:09:55 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;项目源码&quot;&gt;项目源码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CH3COOH12138/PTASpider&quot;&gt;https://github.com/CH3COOH12138/PTASpider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目结构：&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="项目源码">项目源码</h2><p><a href="https://github.com/CH3COOH12138/PTASpider">https://github.com/CH3COOH12138/PTASpider</a></p><p>项目结构：</p><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td><a href="http://main.py">main.py</a></td><td>主程序</td></tr><tr><td>pintia_cookies.txt</td><td>Cookie</td></tr><tr><td>requirement.txt</td><td>依赖</td></tr><tr><td>studata.xlsx</td><td>信息映射</td></tr><tr><td>urls.txt</td><td>爬取的网址</td></tr><tr><td><a href="http://readme.md">readme.md</a></td><td>注意事项</td></tr></tbody></table><h2 id="前情提要">前情提要</h2><p>某计导老师很喜欢按学期布置作业，66道布置完了又来98道，外加机考等不定期测试，有些卷✌️次次AK（请勿代入）。我们可以通过这项数据推测一个同学的计导学习进度以及是不是✌️。<br>但是PTA的排名界面只显示学号，记住整个院的学号和姓名的对应关系未免太费脑细胞，我们可以通过Python链接excel表格查询班级、学号、姓名等信息。<br>查完了顺便在PTA里读一下成分（无恶意）。</p><h2 id="预备工作">预备工作</h2><h3 id="安装依赖">安装依赖</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><h3 id="安装-Selenium-WebDriver">安装 Selenium WebDriver</h3><p>静态网页的爬取用requests库即可，然而PTA的排名页是动态的，数据不在源码中。<br>对于动态网页的爬取，这里采用的是Selenium测试工具。它支持所有主流的浏览器（包括 IE、Firefox、Safari、Opera和Chrome等）,可以使用它对浏览器进行各种各样的模拟操作，包括爬取一些网页内容。<br>不过，Selenium自己不带浏览器，它需要与第三方浏览器结合在一起才能使用。要使用它，需要<a href="https://www.selenium.dev/downloads/">下载</a>对应浏览器的WebDriver并放到Python的Scripts文件夹下。<br>Selenium基础入门：<a href="https://blog.csdn.net/benzhujie1245com/article/details/117089767">https://blog.csdn.net/benzhujie1245com/article/details/117089767</a></p><h2 id="读取数据映射">读取数据映射</h2><p>这里用到了<a href="https://www.cnblogs.com/caiya/p/16683639.html">pandas库来读取excel文件</a>。<br>项目文件的excel共有三张工作表，可以使用<code>file = pd.read_excel(path, sheet_name=sheets)</code>读取。<code>sheets</code>参数可以是字符串（工作表名称），数字（默认从0开始编号）或列表，但是如果传入列表的话传出也是列表，干脆用循环一张一张表读。</p><p>这里为了实现学号和姓名的双重关键字查找写了俩函数（每张工作表的最后一行用0填充来代表结尾）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">readexcelbyid</span>(<span class="params">stuid, sheets</span>):</span><br><span class="line">    info = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    file = pd.read_excel(path, sheet_name=sheets)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    data = file.iloc[index, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> data != <span class="number">0</span>: <span class="comment"># 表的最后一行用0填充，代表结尾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(data) == stuid: <span class="comment"># 找到</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                info[i] = file.iloc[index, i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        data = file.iloc[index, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readexcelbyname</span>(<span class="params">name, sheets</span>):</span><br><span class="line">    info = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    file = pd.read_excel(path, sheet_name=sheets)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    data = file.iloc[index, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">while</span> data != <span class="string">&#x27;0&#x27;</span>: <span class="comment"># 表的最后一行用0填充，代表结尾</span></span><br><span class="line">        <span class="keyword">if</span> data == name: <span class="comment"># 找到</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                info[i] = file.iloc[index, i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        data = file.iloc[index, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    str1 = <span class="built_in">input</span>(<span class="string">&quot;请输入学号或姓名：\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> str1[<span class="number">0</span>:<span class="number">3</span>] == <span class="string">&#x27;202&#x27;</span>: <span class="comment"># 输入前3位是&#x27;202&#x27;代表学号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 读3张表</span></span><br><span class="line">            info = readexcelbyid(str1, i)</span><br><span class="line">            <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 读3张表</span></span><br><span class="line">            info = readexcelbyname(str1, i)</span><br><span class="line">            <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> info[<span class="number">0</span>] != <span class="number">0</span>: <span class="comment"># 找到</span></span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查无此人&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="爬取PTA动态网页">爬取PTA动态网页</h2><h3 id="获取Cookie">获取Cookie</h3><p>第一次爬取之前需要手动登录账户以保存Cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getcookie</span>():</span><br><span class="line">    <span class="comment"># 填写完整url</span></span><br><span class="line">    url = <span class="string">r&#x27;&#x27;</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment"># 程序打开网页后50秒内 “手动登陆账户”</span></span><br><span class="line">    time.sleep(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pintia_cookies.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将cookies保存为json格式</span></span><br><span class="line">        f.write(json.dumps(driver.get_cookies()))</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬取网页">爬取网页</h3><p>弄好Cookie后我们就可以欢乐地爬了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ptaspider</span>(<span class="params">url, stuid</span>):</span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) <span class="comment"># 静默运行</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) <span class="comment"># 禁用gpu渲染</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--incognito&#x27;</span>) <span class="comment"># 无痕模式</span></span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>]) <span class="comment"># 禁止打印日志</span></span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line">    browser.implicitly_wait(<span class="number">10</span>) <span class="comment"># 隐式等待</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cookiepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cookies_list = json.load(f)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies_list:</span><br><span class="line">            browser.add_cookie(cookie) <span class="comment"># 加Cookie</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    data = browser.find_element(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;DataTable_1vh8W&#x27;</span>).text</span><br><span class="line">    scoreRe = re.<span class="built_in">compile</span>(<span class="string">&#x27;([0-9]+) &#x27;</span> + <span class="built_in">str</span>(stuid) + <span class="string">&#x27; ([0-9]+)&#x27;</span>)</span><br><span class="line">    score = scoreRe.findall(data)</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(score) == <span class="number">0</span>:</span><br><span class="line">        maxpage = browser.find_elements(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;pageItem_3P4fJ&#x27;</span>)[-<span class="number">2</span>].text</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(score) == <span class="number">0</span> <span class="keyword">and</span> page &lt; <span class="built_in">int</span>(maxpage):</span><br><span class="line">            browser.get(url + <span class="string">&#x27;?page=&#x27;</span> + <span class="built_in">str</span>(page)) <span class="comment"># 拼接url</span></span><br><span class="line">            data = browser.find_element(<span class="string">&quot;class name&quot;</span>, <span class="string">&#x27;DataTable_1vh8W&#x27;</span>).text</span><br><span class="line">            score = scoreRe.findall(data)</span><br><span class="line">            page += <span class="number">1</span></span><br><span class="line">    browser.quit()</span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><p>这里有几个注意点：</p><ol><li>传入参数为 要爬取的网页（url）和 要匹配的学生学号（stuid）。</li><li>加Cookie前要先get一遍网页，不然不知道Cookie加哪。</li><li><code>data = browser.find_element(&quot;class name&quot;, 'DataTable_1vh8W').text</code>的意思是找一个class名称为’DataTable_1vh8W’（需自行调试）的元素，返回它的文本并保存到data里，以便后续正则分析。</li><li>正则表达式视具体情况而定，需自行调试。</li><li>最后的循环实现了逐页查找的功能。这个功能的实现有两个前提。一是获取到网页的最大页数（maxpage)，二是通过拼接url得出每页的访问网址。</li><li>最后返回的是一个列表，代表每个查找到的位置的对应正则匹配（单处匹配返回文本，多处匹配返回元组）。</li></ol><h3 id="通过正则表达式获取url列表">通过<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式</a>获取url列表</h3><p>我们只剩最后一步了：读取项目目录下的urls.txt文件并获取url列表。</p><p>默认的urls.txt写入文件的格式应为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example:https://www.example.com</span><br></pre></td></tr></table></figure><p>显然，我们可以通过<code>'(.+?):(.+)'</code>分别对每条数据的名称和网址进行匹配。需要注意的是<code>https://</code>里也有<code>:</code>，对名称的匹配应使用非贪婪模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">urlRe = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(.+?):(.+)&#x27;</span>)</span><br><span class="line">names = []</span><br><span class="line">urls = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(urlpath) <span class="keyword">as</span> f:</span><br><span class="line">    str2 = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    names.append(urlRe.findall(str2[i])[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    urls.append(urlRe.findall(str2[i])[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(urls)):</span><br><span class="line">    score = ptaspider(urls[i], info[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(score) != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + names[i] + <span class="string">&#x27;\n排名：&#x27;</span> + score[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;\n分数：&#x27;</span> + score[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> + names[i] + <span class="string">&#x27;\n无此记录&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写在最后">写在最后</h2><p>挺烂的活。没写过静态爬虫就来写动态了，有点吃力。<br>之前学的正则有点忘了，复习了一下午。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Python/">Python</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Python/">Python</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/08/py5-ptaspider/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大一上计导期中考回顾</title>
      <link>http://ch3cooh12138.github.io/2022/11/05/test20221105/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/05/test20221105/</guid>
      <pubDate>Sat, 05 Nov 2022 02:13:05 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;单选题-2，原题如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设有定义“int a=1, b=2, c=3, d=4, m=2, n=2;”, 则执行表达式“(m=a&amp;gt;b)&amp;amp;&amp;amp;(n=c&amp;gt;d)”后,n的值为()。&lt;br&gt;
A. 1&lt;br&gt;
B. </description>
        
      
      
      
      <content:encoded><![CDATA[<p>单选题-2，原题如下：</p><blockquote><p>设有定义“int a=1, b=2, c=3, d=4, m=2, n=2;”, 则执行表达式“(m=a&gt;b)&amp;&amp;(n=c&gt;d)”后,n的值为()。<br>A. 1<br>B. 2<br>C. 3<br>D. 0</p><p>错误答案：D<br>错因：受到VB语言的影响，以及知识点的遗忘。</p></blockquote><h2 id="短路运算符">短路运算符</h2><p><strong>《C Primer Plus》曾经说过：“C保证逻辑表达式的求值顺序是从左往右。&amp;&amp;和||运算符都是序列点，所以程序在从一个运算对象执行到下一个运算对象之前，所有的副作用都会生效。而且，C 保证一旦发现某个元素让整个表达式无效，便立即停止求值。”</strong></p><p>意思是，对于<code>a &amp;&amp; (b-c)</code>这个逻辑表达式，如果a为False，则整体必定为False，不必再对<code>(b-c)</code>进行求值。<br>对于<code>a || (b-c)</code>亦然，如果a为True，整体必为True，不必理会<code>(b-c)</code>。</p><p>回到原题，<code>(m=a&gt;b)</code>计算得False，则整体必为False，后续<code>(n=c&gt;d)</code>不再参与计算。故n为原值，即<code>n=2</code>，选C。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/C/">C</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/C/">C</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/05/test20221105/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>攻防世界 近期re刷题记录</title>
      <link>http://ch3cooh12138.github.io/2022/11/03/ctf3/</link>
      <guid>http://ch3cooh12138.github.io/2022/11/03/ctf3/</guid>
      <pubDate>Thu, 03 Nov 2022 05:10:02 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Reverse&quot;&gt;Reverse&lt;/h2&gt;
&lt;p&gt;题目：&lt;a href=&quot;https://adworld.xctf.org.cn/challenges/details?hash=919a59d6-f42f-498a-a095-544eac546273_2&amp;amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Reverse">Reverse</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=919a59d6-f42f-498a-a095-544eac546273_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=919a59d6-f42f-498a-a095-544eac546273_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">v12 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v5 = <span class="string">&quot;1A2F943C4D8C5B6EA3C9BCAD7E&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    v2 = v5[j]</span><br><span class="line">    v3 = v5[j+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(v2)-<span class="number">48</span> &gt; <span class="number">9</span>: </span><br><span class="line">        v8 = <span class="built_in">ord</span>(v2)-<span class="number">55</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v8 = <span class="built_in">ord</span>(v2)</span><br><span class="line">    v4 = v8 &amp; <span class="number">0xf</span> <span class="comment">#v2转16进制</span></span><br><span class="line">    v51 = (<span class="built_in">ord</span>(v3) - <span class="number">55</span>) &amp; <span class="number">0xf</span> </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>(v3)-<span class="number">48</span>) &amp;<span class="number">0xff</span> &lt;=<span class="number">9</span>:</span><br><span class="line">        v51 = <span class="built_in">ord</span>(v3) &amp; <span class="number">0xf</span> <span class="comment"># v51 = v3转16进制</span></span><br><span class="line">    v12[j] = v51 | (<span class="number">16</span> * v4)</span><br><span class="line"></span><br><span class="line">v9 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">v9[<span class="number">0</span>] = <span class="number">15</span></span><br><span class="line">v9[<span class="number">1</span>] = -<span class="number">121</span></span><br><span class="line">v9[<span class="number">2</span>] = <span class="number">98</span></span><br><span class="line">v9[<span class="number">3</span>] = <span class="number">20</span></span><br><span class="line">v9[<span class="number">4</span>] = <span class="number">1</span></span><br><span class="line">v9[<span class="number">5</span>] = -<span class="number">58</span></span><br><span class="line">v9[<span class="number">6</span>] = -<span class="number">16</span></span><br><span class="line">v9[<span class="number">7</span>] = <span class="number">33</span></span><br><span class="line">v9[<span class="number">8</span>] = <span class="number">48</span></span><br><span class="line">v9[<span class="number">9</span>] = <span class="number">17</span></span><br><span class="line">v9[<span class="number">10</span>] = <span class="number">80</span></span><br><span class="line">v9[<span class="number">11</span>] = -<span class="number">48</span></span><br><span class="line">v9[<span class="number">12</span>] = -<span class="number">126</span></span><br><span class="line">v9[<span class="number">13</span>] = <span class="number">35</span></span><br><span class="line">v9[<span class="number">14</span>] = -<span class="number">82</span></span><br><span class="line">v9[<span class="number">15</span>] = <span class="number">35</span></span><br><span class="line">v9[<span class="number">16</span>] = -<span class="number">18</span></span><br><span class="line">v9[<span class="number">17</span>] = -<span class="number">87</span></span><br><span class="line">v9[<span class="number">18</span>] = -<span class="number">76</span></span><br><span class="line">v9[<span class="number">19</span>] = <span class="number">82</span></span><br><span class="line">v9[<span class="number">20</span>] = <span class="number">120</span></span><br><span class="line">v9[<span class="number">21</span>] = <span class="number">87</span></span><br><span class="line">v9[<span class="number">22</span>] = <span class="number">12</span></span><br><span class="line">v9[<span class="number">23</span>] = -<span class="number">122</span></span><br><span class="line">v9[<span class="number">24</span>] = -<span class="number">117</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>): <span class="comment"># 可以简化</span></span><br><span class="line">    <span class="keyword">if</span> v9[i]&gt;<span class="number">0</span>:</span><br><span class="line">        flag[i] = v9[i] ^ v12[i]</span><br><span class="line">    <span class="keyword">elif</span> v9[i]&lt;<span class="number">0</span> <span class="keyword">and</span> v12[i]&lt;<span class="number">128</span>:</span><br><span class="line">        flag[i] = ((v9[i]+<span class="number">128</span>)^v12[i])+<span class="number">2</span>**<span class="number">7</span></span><br><span class="line">    <span class="keyword">elif</span> v9[i]&lt;<span class="number">0</span> <span class="keyword">and</span> v12[i]&gt;<span class="number">128</span>:</span><br><span class="line">        flag[i] = (v9[i]+<span class="number">128</span>)^(v12[i]-<span class="number">2</span>**<span class="number">7</span>)</span><br><span class="line">    flag[i] = (flag[i]&gt;&gt;<span class="number">2</span>) + (flag[i]%<span class="number">4</span> &lt;&lt; <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考点是unsigned __int8和 signed __int8 在计算机中的存储方式，要考虑补码。</p><h2 id="666">666</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=b77f33bb-046b-4be9-8507-00dacd0358fc_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=b77f33bb-046b-4be9-8507-00dacd0358fc_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">v3 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>)]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">enflag = <span class="string">&#x27;izwhroz&quot;&quot;w&quot;v.K&quot;.Ni&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">key = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;key:</span><br><span class="line">    v3[i + <span class="number">64</span>] = <span class="built_in">ord</span>(enflag[i])</span><br><span class="line">    v3[i + <span class="number">33</span>] = <span class="built_in">ord</span>(enflag[i+<span class="number">1</span>])</span><br><span class="line">    v3[i + <span class="number">2</span>] = <span class="built_in">ord</span>(enflag[i+<span class="number">2</span>])</span><br><span class="line">    flag[i] = (key ^ v3[i + <span class="number">64</span>]) - <span class="number">6</span></span><br><span class="line">    flag[i+<span class="number">1</span>] = (key ^ v3[i + <span class="number">33</span>]) + <span class="number">6</span></span><br><span class="line">    flag[i+<span class="number">2</span>] = v3[i + <span class="number">2</span>] ^ <span class="number">6</span> ^ key</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流浪者">流浪者</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=703754e8-4aef-4976-af09-25d41ecdd37d_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=703754e8-4aef-4976-af09-25d41ecdd37d_2&amp;task_category_id=4</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">abc = <span class="string">&quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;</span></span><br><span class="line">enflag = <span class="string">&quot;KanXueCTF2019JustForhappy&quot;</span></span><br><span class="line">str1 = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag))]</span><br><span class="line">flag1 = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag))]</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enflag)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(abc)):</span><br><span class="line">        <span class="keyword">if</span> enflag[i] == abc[j]:</span><br><span class="line">            flag1[i] = j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>&lt;=flag1[i]&lt;=<span class="number">9</span>:</span><br><span class="line">        flag1[i] += <span class="number">48</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span>&lt;=flag1[i]&lt;=<span class="number">35</span>:</span><br><span class="line">        flag1[i] += <span class="number">87</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag1[i]+= <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag1[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Signin">Signin</h2><p>题目：<a href="https://adworld.xctf.org.cn/challenges/details?hash=b9b2c51c-a545-4d2f-ba34-a58d8d040115_2&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=b9b2c51c-a545-4d2f-ba34-a58d8d040115_2&amp;task_category_id=4</a></p><img src="https://s2.loli.net/2022/11/09/Mf1ykYNtAeih8Bx.png" width=80% /><p>一眼RSA。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Rever-e/">Rever$e</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/11/03/ctf3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>攻防世界 crypto爆破 hidden key</title>
      <link>http://ch3cooh12138.github.io/2022/10/27/ctf2/</link>
      <guid>http://ch3cooh12138.github.io/2022/10/27/ctf2/</guid>
      <pubDate>Thu, 27 Oct 2022 05:02:07 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;原题地址：&lt;a href=&quot;https://adworld.xctf.org.cn/challenges/details?hash=1a1149ba-3b29-11ed-abf3-fa163e4fa609&amp;amp;task_category_id=5&quot;&gt;https://ad</description>
        
      
      
      
      <content:encoded><![CDATA[<p>原题地址：<a href="https://adworld.xctf.org.cn/challenges/details?hash=1a1149ba-3b29-11ed-abf3-fa163e4fa609&amp;task_category_id=5">https://adworld.xctf.org.cn/challenges/details?hash=1a1149ba-3b29-11ed-abf3-fa163e4fa609&amp;task_category_id=5</a></p><p>原题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">key=os.urandom(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line">m=[]</span><br><span class="line">random.seed(<span class="built_in">int</span>(hashlib.md5(key).hexdigest(), <span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    rand(<span class="number">256</span>)</span><br><span class="line">    xor=flag[i]^rand(<span class="number">256</span>)</span><br><span class="line">    m.append(xor)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key)&gt;&gt;<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [140, 96, 112, 178, 38, 180, 158, 240, 179, 202, 251, 138, 188, 185, 23, 67, 163, 22, 150, 18, 143, 212, 93, 87, 209, 139, 92, 252, 55, 137, 6, 231, 105, 12, 65, 59, 223, 25, 179, 101, 19, 215]</span></span><br><span class="line"><span class="comment"># 2669175714787937</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="题解">题解</h2><p>观察题目，发现byte_to_long后的key右移12位后得<code>2669175714787937</code>，即<code>0x97B99E652B261</code>，共13位数字，转二进制就是52位，<code>52+12 = 64 bits = 8 bytes</code>，与原题<code>key=os.urandom(8)</code>对应。而key的前52位我们已经知道了，只需要爆破后12位即可。</p><p>易得爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">m = [<span class="number">140</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">178</span>, <span class="number">38</span>, <span class="number">180</span>, <span class="number">158</span>, <span class="number">240</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">251</span>, <span class="number">138</span>, <span class="number">188</span>, <span class="number">185</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">163</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">18</span>, <span class="number">143</span>, <span class="number">212</span>, <span class="number">93</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">139</span>, <span class="number">92</span>, <span class="number">252</span>, <span class="number">55</span>, <span class="number">137</span>, <span class="number">6</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">59</span>, <span class="number">223</span>, <span class="number">25</span>, <span class="number">179</span>, <span class="number">101</span>, <span class="number">19</span>, <span class="number">215</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>):</span><br><span class="line">    tmpkey = long_to_bytes((<span class="number">2669175714787937</span> &lt;&lt; <span class="number">12</span>) + j)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    random.seed(<span class="built_in">int</span>(hashlib.md5(tmpkey).hexdigest(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        rand(<span class="number">256</span>)</span><br><span class="line">        xor = m[i]^rand(<span class="number">256</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(xor)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;e319a58c-4dd6-4e6a-a3fb-f4b0d339faba&#125;</span></span><br></pre></td></tr></table></figure><p>这题的考点应该是计算机伪随机数的产生。鉴于题目中用到了较多产生随机数的函数，姑且对这些函数做个不完全的总结。欢迎各路大神在评论区补充。</p><h2 id="产生随机数">产生随机数</h2><p>众所周知，计算机不能产生真正的随机数。在实践中，大多数编程环境会提供一个<strong>伪随机数生成器</strong>，使得返回值在统计上看起来是随机的。这里不对随机算法进行深入研究，只需知道随机数是由一个名为“种子”的数推算而来。</p><h3 id="C的随机数产生">C的随机数产生</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一个简单的用于产生随机数的程序 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到，上面这个程序的核心代码是<code>rand()</code>。它可以随机的产生 0 ~ RAND_MAX 的随机数，RAND_MAX包含在头文件stdlib.h中，默认为32767。<br>所以我们可以使用<code>a = rand() % (n-m+1) + m;</code>来生成一个m ~ n的随机数。</p><p>然而，我们会发现，虽然函数返回值是无法预料的，但是无论运行多少次，这个函数的返回值都是固定的。其根本原因是没有初始化随机种子。种子在每次启动计算机时是随机的，但是一旦计算机启动以后它就不再变化了。也就是说，每次启动计算机以后，种子就是定值了，所以根据公式推算出来的结果（也就是生成的随机数）就是固定的。</p><p>以下代码可以帮助我们初始化随机种子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>)); <span class="comment">// # include &lt;stdlib.h&gt;  # include &lt;time.h&gt;</span></span><br></pre></td></tr></table></figure><p>原理是使用<code>time(NULL)</code>函数来获取系统时间（从1970年1月1日0点到现在时间的秒数），并转化为unsigned int，最后传给srand()函数作为种子。</p><h3 id="Python的随机数产生">Python的随机数产生</h3><h4 id="os-urandom-n">os.urandom(n)</h4><p>返回一个n字节的随机字符串，适用于加密等。</p><h4 id="random库">random库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><ol><li><p><code>random.seed(a)</code><br>设置初始化随机种子，可输出相同随机数序列；a取整数或浮点数，不设置时默认以系统时间为种子。</p></li><li><p><code>random.random()</code><br>用于生成一个0.0到1.0的随机数。</p></li><li><p><code>random.uniform(a, b)</code><br>生成一个[a, b]之间的随机浮点数（a、b取整数或浮点数）</p></li><li><p><code>random.randint(a, b)</code><br>生成一个[a, b]之间随机整数。</p></li><li><p><code>random.randrange(start, stop, \[step\])</code><br>生成一个[start, stop]之间以step步数的随机整数；start、stop、step取整数，step不设置时默认值为1。</p></li><li><p><code>random.choice(seq)</code><br>从序列类型seq中随机返回一个元素；seq取序列类型，如字符串、列表、元组。</p></li><li><p><code>random.shuffle(seq)</code><br>将序列类型中元素随机排序，无返回值，seq被改变（改变原序列），shuffle为洗牌之意；seq取序列类型，如字符串、列表；元组不能被洗牌。</p></li></ol><h2 id="运算符优先级">运算符优先级</h2><p>debug了一小时啊一小时，最后发现<code>tmpkey = long_to_bytes((2669175714787937 &lt;&lt; 12) + j)</code>这句左移运算符那里没加括号。<br>移位的本质不是乘除吗，为什么优先级比加减还要低？<br>（某乎上有人发了同样的问题）<br><img src="https://s2.loli.net/2022/10/31/58S1twRYoLNeZKv.png" width=80% /></p><p>贴个运算符优先级顺序表在这里以时刻提醒自己。</p><p>C:</p><table><thead><tr><th>优先级</th><th>运算符（们）</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>()　[]　-&gt;　.</td><td>括号/函数调用  索引  间接成员访问  成员访问</td></tr><tr><td>2</td><td>++　–　+　-　!　~　&amp;　*　sizeof　类型转换</td><td>自增（后缀大于前缀）  自减  正  负  非  按位非  取址  解引用  内存大小  类型转换</td></tr><tr><td>3</td><td>*　/　%</td><td>乘  除  模</td></tr><tr><td>4</td><td>+　-</td><td>加  减</td></tr><tr><td>5</td><td>&lt;&lt;　&gt;&gt;</td><td>左移位  右移位</td></tr><tr><td>6</td><td>&lt;　&lt;=　&gt;　&gt;=</td><td>小于  小于等于  大于  大于等于</td></tr><tr><td>7</td><td>==　!=</td><td>等于 不等于</td></tr><tr><td>8</td><td>&amp;</td><td>按位与</td></tr><tr><td>9</td><td>^</td><td>按位异或</td></tr><tr><td>10</td><td>|</td><td>按位或</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>12</td><td>||</td><td>逻辑或</td></tr><tr><td>13</td><td>?:</td><td>三目条件运算符</td></tr><tr><td>14</td><td>=　*=　/=　+=　-=　&lt;&lt;=　&gt;=　&amp;=　|=　^=</td><td>各种赋值运算符</td></tr><tr><td>15</td><td>,</td><td>逗号运算符</td></tr></tbody></table><p>Python:</p><table><thead><tr><th>优先级</th><th>运算符（们）</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>()　[]　.</td><td>括号/函数调用  索引  属性引用</td></tr><tr><td>2</td><td>**</td><td>幂</td></tr><tr><td>3</td><td>+　-　~</td><td>正  负  按位非</td></tr><tr><td>4</td><td>*　/　//　%</td><td>乘  除  整除  模</td></tr><tr><td>5</td><td>+　-</td><td>加  减</td></tr><tr><td>6</td><td>&lt;&lt;　&gt;&gt;</td><td>左移位  右移位</td></tr><tr><td>7</td><td>&amp;</td><td>按位与</td></tr><tr><td>8</td><td>^</td><td>按位异或</td></tr><tr><td>9</td><td>|</td><td>按位或</td></tr><tr><td>10</td><td>&lt;　&lt;=　&gt;　&gt;=</td><td>比较运算</td></tr><tr><td>11</td><td>==　!=</td><td>等于  不等于</td></tr><tr><td>12</td><td>is　not is</td><td>实体检查</td></tr><tr><td>13</td><td>in　not in</td><td>成员检查</td></tr><tr><td>14</td><td>not</td><td>逻辑非</td></tr><tr><td>15</td><td>and</td><td>逻辑与</td></tr><tr><td>16</td><td>or</td><td>逻辑或</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Crypt0/">Crypt0</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/10/27/ctf2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CTF中的RSA攻击方式总结</title>
      <link>http://ch3cooh12138.github.io/2022/10/24/rsa/</link>
      <guid>http://ch3cooh12138.github.io/2022/10/24/rsa/</guid>
      <pubDate>Mon, 24 Oct 2022 12:51:02 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;RSA简介&quot;&gt;RSA简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&amp;amp;fromid=210678&amp;amp;fr=aladd</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="RSA简介">RSA简介</h2><p><a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&amp;fromid=210678&amp;fr=aladdin">RSA</a>是一种算法，并且广泛应用于现代，用于保密通信。</p><p>基本原理为单向陷门函数，即满足如下的三个条件：</p><ol><li>正向计算容易。</li><li>在不知道私钥的情况下，反向计算不可行。</li><li>在知道私钥的情况下，反向计算容易。</li></ol><p>具体加密算法：</p><ol><li>选取两个大素数p和q，两个数位数接近且相差较大。</li><li>计算<code>n = p*q</code>，<code>φ(n) = (p-1)(q-1)</code>。</li><li>随机选取整数e，满足<code>gcd(e,φ(n)) = 1</code>，作为公钥。</li><li>计算私钥d，满足<code>d*e ≡ 1 (mod φ(n))</code>，即d是e模φ(n)的逆元。CTF的角度看就是，d是由e,p,q可以求解出的。</li></ol><p>一般CTF就是把我们想要获得的flag作为明文，RSA中表示为m。然后通过<code>c = pow(m,e,n)</code>加密，得到密文，RSA中表示为c。<br>如果知道私钥d，则可以通过<code>m = pow(c,d,n)</code>进行解密。</p><p>在实际应用中，n，e是公开的，但是由于n一般是两个大素数的乘积，所以我们很难求解出d，所以RSA加密就是利用现代无法快速实现大素数的分解，所存在的一种安全的非对称加密。</p><p>加解密程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    m = bytes_to_long(<span class="string">b&#x27;flag&#123;XXXXXXXXXX&#125;&#x27;</span>)</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span>    <span class="comment"># 视具体题目而定</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)    <span class="comment"># 一般保密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)    <span class="comment"># 一般保密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">p, q, n, e, c</span>):</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上面的内容我们可以知道要想解密一段密文，我们需要c，d，n三个值。其中c我们是知道的，而n和d都可以通过p，q，e算出来，e我们一般也是知道的，也就是说常规的rsa题目我们的解题思路就是想想怎样把p和q求出来，并以此进行解密。</p><h2 id="攻击方法">攻击方法</h2><h3 id="已知p、q">已知p、q</h3><p>略。</p><h3 id="分解n得到p、q">分解n得到p、q</h3><p>适用情况：n已知且可因式分解</p><p>既然<code>n = p*q</code>，那么最常规的想法就是把n因式分解得到p，q，上面说n很难分解，但对于一些不太大的n，我们可以借助 <a href="http://www.factordb.com">在线因式分解网站</a> 或 <a href="https://sourceforge.net/projects/yafu/">yafu</a> 去分解它。<br>如果密钥的长度小于等于256位,一台较快的电脑可以在几个小时内成功分解其因子。</p><p>解密程序见上文。</p><h3 id="低加密指数攻击">低加密指数攻击</h3><p>适用情况：n很大但是e很小，一般e=3</p><p>n很大时我们就不能因式分解了，但是当e很小时，比如e=3，有<code>c = m^e+kn</code>，我们可以对k进行爆破，直到c-kn可以开根，借此得到m。</p><h2 id="维护中，未完待续…">维护中，未完待续…</h2><h2 id="参考资料">参考资料</h2><blockquote><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/">https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/</a><br><a href="https://blog.csdn.net/qq_46145027/article/details/125047313">https://blog.csdn.net/qq_46145027/article/details/125047313</a><br><a href="https://www.freesion.com/article/8945408137/">https://www.freesion.com/article/8945408137/</a><br><a href="https://www.freebuf.com/vuls/257835.html">https://www.freebuf.com/vuls/257835.html</a><br><a href="https://skysec.top/2018/09/15/%E6%B5%85%E6%9E%90RSA-Padding-Attack/">https://skysec.top/2018/09/15/浅析RSA-Padding-Attack/</a><br><a href="https://www.iacr.org/archive/pkc2005/33860001/33860001.pdf">https://www.iacr.org/archive/pkc2005/33860001/33860001.pdf</a><br><a href="https://www.cnblogs.com/nLesxw/p/learn_math_rsa.html">https://www.cnblogs.com/nLesxw/p/learn_math_rsa.html</a></p><p>篇幅有限，不完全列举。如以上文章作者认为此博客有侵权行为或不合理的引用之处，请联系我修改。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Crypt0/">Crypt0</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/10/24/rsa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>攻防世界 re迷宫题 reverse_re3</title>
      <link>http://ch3cooh12138.github.io/2022/10/21/ctf1/</link>
      <guid>http://ch3cooh12138.github.io/2022/10/21/ctf1/</guid>
      <pubDate>Fri, 21 Oct 2022 15:18:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;原题地址：&lt;a href=&quot;https://adworld.xctf.org.cn/challenges/details?hash=0d75f9ba-1c77-11ed-abf3-fa163e4fa609&amp;amp;task_category_id=4&quot;&gt;https://ad</description>
        
      
      
      
      <content:encoded><![CDATA[<p>原题地址：<a href="https://adworld.xctf.org.cn/challenges/details?hash=0d75f9ba-1c77-11ed-abf3-fa163e4fa609&amp;task_category_id=4">https://adworld.xctf.org.cn/challenges/details?hash=0d75f9ba-1c77-11ed-abf3-fa163e4fa609&amp;task_category_id=4</a></p><hr><p>下载文件拖入IDA查看<br>根据以前做迷宫题的经验，F12+shift，无果，遂观察源代码，发现可疑长字符串。<br><img src="https://s2.loli.net/2022/10/21/fBWEdLjYxtAehRV.png" width=80% /></p><p>一开始我没意识到它的长，所以选择手打，打到一半打不下去了，选择写脚本收集。<br>下面的代码实现文件每行最后一个字符（换行符除外）的收集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    file1 = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    string = file1.readlines()</span><br><span class="line">    file1.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件路径：\n&quot;</span>)</span><br><span class="line">    file1 = <span class="built_in">open</span>(path)</span><br><span class="line">    string = file1.readlines()</span><br><span class="line">    file1.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="built_in">print</span>(string[i][-<span class="number">2</span>],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将<code>print(string[i][-2],end=&quot;&quot;)</code>中的<code>[-2]</code>换成<code>[0]</code>可实现第一个字符的收集，下面会用到。</p><p>其实我感觉这个功能的实现应该用EOF指针的，奈何学不来时间又不够，凑合用一下罢。</p><p>复制IDA汇编代码到记事本后拖入脚本，得长字符串：<codecode><br>统计一下有2699个字符。</p><p>然后我傻乎乎地去对2699因式分解了，殊不知这串字符串是dword类型，每4个为一组，只有第一个值是有效值。<br><img src="https://s2.loli.net/2022/10/21/u9I3ebAlKmcf2On.png" width=80% /></p><p>知识盲区了属于是。<br>于是接下来每四个为一组取第一个，用到分行脚本，结合上面的“收集每行第一个字符”的脚本，可以实现每四个取一个。<br>分行脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">1</span>:</span><br><span class="line">    file1 = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    string = file1.read()</span><br><span class="line">    file1.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&quot;请输入文件路径：\n&quot;</span>)</span><br><span class="line">    file1 = <span class="built_in">open</span>(path)</span><br><span class="line">    string = file1.read()</span><br><span class="line">    file1.close()</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入每行字符个数：\n&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)//n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(string[j+i*n],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(string)%n!=<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)%n):</span><br><span class="line">        <span class="built_in">print</span>(string[j+(i+<span class="number">1</span>)*n],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然这里完全没必要分行，因为后面也要用到这个脚本，懒得写一个新的罢了。</p><p>四取一后得字符串：<codecode><br>675个字符。<br>675=3*3*3*5*5<br>逐个尝试分行得675=15行*45列<br>分行如下：<br><img src="https://s2.loli.net/2022/10/22/QPiFzsbVWX3e9T2.png" width=40% /></p><p>可见有三个迷宫，3为起点，4为终点，1可走，0不可走，寻找最短路径得<code>ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss</code><br>md5加密得Flag。</p><hr><p>主要被坑的点就是不知道dword类型的特性。</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/CTF/">CTF</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Rever-e/">Rever$e</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/10/21/ctf1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>玩具</title>
      <link>http://ch3cooh12138.github.io/2022/10/18/py4/</link>
      <guid>http://ch3cooh12138.github.io/2022/10/18/py4/</guid>
      <pubDate>Tue, 18 Oct 2022 12:50:33 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;font size=4&gt;&lt;strong&gt;Cabelis Warning&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
以下脚本仅作练习之用，测试之中没有任何人类受到伤害。&lt;br&gt;
现实生活中请谨慎使用此脚本，尤其是在群聊里，因为它会让您看上去像个晚餐。&lt;br&gt;
珍爱生命，远离刷</description>
        
      
      
      
      <content:encoded><![CDATA[<p><font size=4><strong>Cabelis Warning</strong></font><br>以下脚本仅作练习之用，测试之中没有任何人类受到伤害。<br>现实生活中请谨慎使用此脚本，尤其是在群聊里，因为它会让您看上去像个晚餐。<br>珍爱生命，远离刷屏。</p><hr><p>事情是这样的，最近莫名又其妙流行起了朋友圈默契挑战。我整了10道题，答对6道即可获得“夸夸券”<br><img src="https://s2.loli.net/2022/10/18/EsAgn5cUVIBqK1T.jpg" width=30% /></p><center>↑长这dinner玩意</center><br>然后意料之中，有人答出来了。打字夸吧，有点费腱鞘；用嘴夸吧，怕口水溅出来。于是整了个玩具：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">dic = [<span class="string">&#x27;出水芙蓉&#x27;</span>,<span class="string">&#x27;明眸皓齿&#x27;</span>,<span class="string">&#x27;国色天香&#x27;</span>,<span class="string">&#x27;鹤发童颜&#x27;</span>,<span class="string">&#x27;雍容华贵&#x27;</span>,<span class="string">&#x27;眉清目秀&#x27;</span>,<span class="string">&#x27;威风凛凛&#x27;</span>,<span class="string">&#x27;神采奕奕&#x27;</span>,<span class="string">&#x27;温文尔雅&#x27;</span>,<span class="string">&#x27;眉飞色舞&#x27;</span>,<span class="string">&#x27;眉开眼笑&#x27;</span>,<span class="string">&#x27;笑逐颜开&#x27;</span>,<span class="string">&#x27;忍俊不禁&#x27;</span>,<span class="string">&#x27;正襟危坐&#x27;</span>,<span class="string">&#x27;从容自若&#x27;</span>,<span class="string">&#x27;如痴如醉&#x27;</span>,<span class="string">&#x27;舒眉展眼&#x27;</span>,<span class="string">&#x27;神清气爽&#x27;</span>,<span class="string">&#x27;悠然自得&#x27;</span>,<span class="string">&#x27;口若悬河&#x27;</span>,<span class="string">&#x27;对答如流&#x27;</span>,<span class="string">&#x27;滔滔不绝&#x27;</span>,<span class="string">&#x27;谈笑风生&#x27;</span>,<span class="string">&#x27;高谈阔论&#x27;</span>,<span class="string">&#x27;夸夸其谈&#x27;</span>,<span class="string">&#x27;表里如一&#x27;</span>,<span class="string">&#x27;开诚相见&#x27;</span>,<span class="string">&#x27;言行一致&#x27;</span>,<span class="string">&#x27;实心实意&#x27;</span>,<span class="string">&#x27;心口如一&#x27;</span>,<span class="string">&#x27;胸无城府&#x27;</span>,<span class="string">&#x27;出生入死&#x27;</span>,<span class="string">&#x27;奋不顾身&#x27;</span>,<span class="string">&#x27;赴汤蹈火&#x27;</span>,<span class="string">&#x27;临危不惧&#x27;</span>,<span class="string">&#x27;挺身而出&#x27;</span>,<span class="string">&#x27;视死如归&#x27;</span>,<span class="string">&#x27;一往无前&#x27;</span>,<span class="string">&#x27;义无反顾&#x27;</span>,<span class="string">&#x27;勇往直前&#x27;</span>,<span class="string">&#x27;粗衣淡饭&#x27;</span>,<span class="string">&#x27;克勤克俭&#x27;</span>,<span class="string">&#x27;轻车简从&#x27;</span>,<span class="string">&#x27;节衣缩食&#x27;</span>,<span class="string">&#x27;精打细算&#x27;</span>,<span class="string">&#x27;开源节流&#x27;</span>,<span class="string">&#x27;勤俭持家&#x27;</span>,<span class="string">&#x27;省吃俭用&#x27;</span>,<span class="string">&#x27;细水长流&#x27;</span>,<span class="string">&#x27;高义薄云&#x27;</span>,<span class="string">&#x27;慷慨解囊&#x27;</span>,<span class="string">&#x27;乐善好施&#x27;</span>,<span class="string">&#x27;设身处地&#x27;</span>,<span class="string">&#x27;尊老爱幼&#x27;</span>,<span class="string">&#x27;以德报怨&#x27;</span>,<span class="string">&#x27;仁至义尽&#x27;</span>,<span class="string">&#x27;仁民爱物&#x27;</span>,<span class="string">&#x27;仁人君子&#x27;</span>,<span class="string">&#x27;宅心仁厚&#x27;</span>,<span class="string">&#x27;温柔敦厚&#x27;</span>,<span class="string">&#x27;仁良恭俭让&#x27;</span>,<span class="string">&#x27;超然物外&#x27;</span>,<span class="string">&#x27;超尘拔俗&#x27;</span>,<span class="string">&#x27;宠辱不惊&#x27;</span>,<span class="string">&#x27;孤芳自赏&#x27;</span>,<span class="string">&#x27;洁身自好&#x27;</span>,<span class="string">&#x27;狷介之士&#x27;</span>,<span class="string">&#x27;冰清玉洁&#x27;</span>,<span class="string">&#x27;岁寒松柏&#x27;</span>,<span class="string">&#x27;高风亮节&#x27;</span>,<span class="string">&#x27;高节迈俗&#x27;</span>,<span class="string">&#x27;守身如玉&#x27;</span>,<span class="string">&#x27;明德惟馨&#x27;</span>,<span class="string">&#x27;高山景行&#x27;</span>,<span class="string">&#x27;年高德劭&#x27;</span>,<span class="string">&#x27;光明磊落&#x27;</span>,<span class="string">&#x27;鸿鹄之志&#x27;</span>,<span class="string">&#x27;老骥伏枥&#x27;</span>,<span class="string">&#x27;壮志凌云&#x27;</span>,<span class="string">&#x27;胸怀大志&#x27;</span>,<span class="string">&#x27;雄心壮志&#x27;</span>,<span class="string">&#x27;志在四方&#x27;</span>,<span class="string">&#x27;不耻下问&#x27;</span>,<span class="string">&#x27;不矜不伐&#x27;</span>,<span class="string">&#x27;功成不居&#x27;</span>,<span class="string">&#x27;好问则裕&#x27;</span>,<span class="string">&#x27;戒骄戒躁&#x27;</span>,<span class="string">&#x27;虚怀若谷&#x27;</span>,<span class="string">&#x27;闻过则喜&#x27;</span>,<span class="string">&#x27;抛砖引玉&#x27;</span>,<span class="string">&#x27;深藏若虚&#x27;</span>,<span class="string">&#x27;引咎自责&#x27;</span>,<span class="string">&#x27;知过必改&#x27;</span>,<span class="string">&#x27;自愧弗如&#x27;</span>,<span class="string">&#x27;爱憎分明&#x27;</span>,<span class="string">&#x27;褒善贬恶&#x27;</span>,<span class="string">&#x27;火眼金睛&#x27;</span>,<span class="string">&#x27;两袖清风&#x27;</span>,<span class="string">&#x27;先公后私&#x27;</span>,<span class="string">&#x27;一尘不染&#x27;</span>,<span class="string">&#x27;浩然之气&#x27;</span>,<span class="string">&#x27;直言正论&#x27;</span>,<span class="string">&#x27;刚正不阿&#x27;</span>,<span class="string">&#x27;心无旁骛&#x27;</span>,<span class="string">&#x27;屏气敛息&#x27;</span>,<span class="string">&#x27;目不窥园&#x27;</span>,<span class="string">&#x27;屏气凝神&#x27;</span>,<span class="string">&#x27;全神贯注&#x27;</span>,<span class="string">&#x27;专心致志&#x27;</span>,<span class="string">&#x27;沉鱼落雁&#x27;</span>,<span class="string">&#x27;闭月羞花&#x27;</span>,<span class="string">&#x27;端庄优雅&#x27;</span>,<span class="string">&#x27;大家闺秀&#x27;</span>,<span class="string">&#x27;妩媚动人&#x27;</span>,<span class="string">&#x27;优雅大方&#x27;</span>,<span class="string">&#x27;婀娜多姿&#x27;</span>,<span class="string">&#x27;矜持佳丽&#x27;</span>,<span class="string">&#x27;秀外慧中&#x27;</span>,<span class="string">&#x27;慧质兰心&#x27;</span>,<span class="string">&#x27;柔美婉丽&#x27;</span>,<span class="string">&#x27;清新单纯&#x27;</span>,<span class="string">&#x27;面若桃花&#x27;</span>,<span class="string">&#x27;天生丽质&#x27;</span>,<span class="string">&#x27;娇柔可爱&#x27;</span>,<span class="string">&#x27;宛如天仙&#x27;</span>,<span class="string">&#x27;仙女下凡&#x27;</span>,<span class="string">&#x27;温柔体贴&#x27;</span>,<span class="string">&#x27;气质非凡&#x27;</span>,<span class="string">&#x27;身付异秉&#x27;</span>,<span class="string">&#x27;才思敏捷&#x27;</span>,<span class="string">&#x27;过目不忘&#x27;</span>,<span class="string">&#x27;博学多才&#x27;</span>,<span class="string">&#x27;见多识广&#x27;</span>,<span class="string">&#x27;才高八斗&#x27;</span>,<span class="string">&#x27;学富五车&#x27;</span>,<span class="string">&#x27;文武双全&#x27;</span>,<span class="string">&#x27;雄韬伟略&#x27;</span>,<span class="string">&#x27;谈吐不凡&#x27;</span>,<span class="string">&#x27;谈笑风声&#x27;</span>,<span class="string">&#x27;高谈阔论&#x27;</span>,<span class="string">&#x27;眉飞色舞&#x27;</span>,<span class="string">&#x27;运筹帷幄&#x27;</span>,<span class="string">&#x27;言简意赅&#x27;</span>,<span class="string">&#x27;完美无缺&#x27;</span>,<span class="string">&#x27;一针见血&#x27;</span>,<span class="string">&#x27;远见卓识&#x27;</span>,<span class="string">&#x27;义正词严&#x27;</span>,<span class="string">&#x27;一气呵成&#x27;</span>,<span class="string">&#x27;大显神通&#x27;</span>,<span class="string">&#x27;出口成章&#x27;</span>,<span class="string">&#x27;出类拔萃&#x27;</span>,<span class="string">&#x27;出神入化&#x27;</span>,<span class="string">&#x27;万古流芳&#x27;</span>,<span class="string">&#x27;一箭双雕&#x27;</span>,<span class="string">&#x27;功德无量&#x27;</span>,<span class="string">&#x27;力排众议&#x27;</span>,<span class="string">&#x27;力挽狂澜&#x27;</span>,<span class="string">&#x27;气贯长虹&#x27;</span>,<span class="string">&#x27;气势磅礴&#x27;</span>,<span class="string">&#x27;气吞山河&#x27;</span>,<span class="string">&#x27;坚韧不拔&#x27;</span>,<span class="string">&#x27;空前绝后&#x27;</span>,<span class="string">&#x27;视死如归&#x27;</span>,<span class="string">&#x27;英姿焕发&#x27;</span>,<span class="string">&#x27;奉公守法&#x27;</span>,<span class="string">&#x27;艰苦奋斗&#x27;</span>,<span class="string">&#x27;忠贞不渝&#x27;</span>,<span class="string">&#x27;舍己为人&#x27;</span>,<span class="string">&#x27;大公无私&#x27;</span>,<span class="string">&#x27;一尘不染&#x27;</span>,<span class="string">&#x27;一鸣惊人&#x27;</span>,<span class="string">&#x27;叱诧风云&#x27;</span>,<span class="string">&#x27;惊涛骇浪&#x27;</span>,<span class="string">&#x27;雷霆万钧&#x27;</span>,<span class="string">&#x27;惊心动魄&#x27;</span>,<span class="string">&#x27;横扫千军&#x27;</span>,<span class="string">&#x27;惊天动地&#x27;</span>,<span class="string">&#x27;千篇一律&#x27;</span>,<span class="string">&#x27;口诛笔伐&#x27;</span>,<span class="string">&#x27;文从字顺&#x27;</span>,<span class="string">&#x27;十全十美&#x27;</span>,<span class="string">&#x27;无懈可击&#x27;</span>,<span class="string">&#x27;无与伦比&#x27;</span>,<span class="string">&#x27;励精图治&#x27;</span>,<span class="string">&#x27;壮志凌云&#x27;</span>,<span class="string">&#x27;高瞻远瞩&#x27;</span>,<span class="string">&#x27;忍辱负重&#x27;</span>,<span class="string">&#x27;盖世无双&#x27;</span>,<span class="string">&#x27;龙飞凤舞&#x27;</span>,<span class="string">&#x27;一丝不苟&#x27;</span>,<span class="string">&#x27;身兼数职&#x27;</span>,<span class="string">&#x27;日理万机&#x27;</span>,<span class="string">&#x27;明察秋毫&#x27;</span>,<span class="string">&#x27;英明果断&#x27;</span>,<span class="string">&#x27;分身有术&#x27;</span>,<span class="string">&#x27;孜孜不倦&#x27;</span>,<span class="string">&#x27;回眸一笑百媚生&#x27;</span>]</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    pyperclip.copy(<span class="string">&#x27;&#x27;</span>+dic[i]) <span class="comment"># 可以加上具体姓名</span></span><br><span class="line">    pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>) <span class="comment"># 注意要focus聊天窗口</span></span><br><span class="line">    pyautogui.press(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure>效果不错<img src="https://s2.loli.net/2022/10/18/FV9wmX5CaAu2nqL.png" width=30% /><p>当然还有没有循环出口的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    pyperclip.copy(<span class="string">&#x27;彻底疯狂！&#x27;</span>) <span class="comment"># 可以加上具体姓名</span></span><br><span class="line">    pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/10/18/rlkZyR2IiSacp4G.gif" width=10% /><p>美其名曰 <strong>轰炸机</strong></p><hr><p>脚本有更好的实现方案，欢迎在评论区补充！</p>]]></content:encoded>
      
      
      <category domain="http://CH3COOH12138.github.io/categories/Python/">Python</category>
      
      
      <category domain="http://CH3COOH12138.github.io/tags/Python/">Python</category>
      
      
      <comments>http://ch3cooh12138.github.io/2022/10/18/py4/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
